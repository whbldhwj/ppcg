#include "kernel_kernel.h"
/* Module Definition */
void A_IO_L3_in_core(A_t16 *A, hls::stream<A_t16> &fifo_A_local_out){
    A_t16 local_A[4][16];
    #pragma HLS RESOURCE variable=local_A core=RAM_2P_BRAM

    for (int c0 = 0; c0 <= 255; c0 += 1)
      for (int c2 = 0; c2 <= 3; c2 += 1) {
        // array_L2
        {
          for (int c3 = 0; c3 <= 3; c3 += 1) {
            // access_coalesce
            for (int c4 = 0; c4 <= 15; c4 += 1) {
            #pragma HLS PIPELINE II=1
            {
              A_t16 fifo_data;
              fifo_data = A[256*c0 + 16*c2 + 64*c3 + c4];
              local_A[c3][c4] = fifo_data;
            }
            }
          }
          for (int c4 = 0; c4 <= 1; c4 += 1)
            for (int c5 = 0; c5 <= 15; c5 += 1) {
              // array
              // io_L3
              for (int c6 = 0; c6 <= 3; c6 += 1) {
              #pragma HLS PIPELINE II=1
                // io_L2
                // access_coalesce
                A_t16 fifo_data;
                fifo_data = local_A[c6][c5];
                fifo_A_local_out.write(fifo_data);
              }
            }
        }
      }
}
/* Module Definition */

/* Module Definition */
void A_IO_L3_in(A_t16 *A, hls::stream<A_t16> &fifo_A_local_out)
{
    A_IO_L3_in_core(dev_A, fifo_A_local_out);
}
/* Module Definition */

/* Module Definition */
void A_IO_L2_in_intra_trans(int idx, int c0_prev, int c2_prev, int c4_prev, int c5_prev, A_t16 local_A[1][1], hls::stream<A_t4> &fifo_A_local_out, bool intra_trans_en)
{
#pragma HLS INLINE OFF
    int p0 = idx; // module id

    if (!intra_trans_en) return;

    // io_L2
    // io_L1
    // pe
    for (int c8 = 0; c8 <= 3; c8 += 1) {
      // latency
      for (int c9 = 0; c9 <= 255; c9 += 1) {
      #pragma HLS PIPELINE II=1
        // simd
        A_t4 fifo_data;
        A_t16 buf_data;
        A_t4 buf_data_split[4];
        #pragma HLS ARRAY_PARTITION variable=buf_data_split complete
        buf_data = local_A[0][c8/4];
        for (int n = 0; n < 4; n++) {
            #pragma HLS UNROLL
            buf_data_split[n] = buf_data(127, 0);
            buf_data = buf_data >> 128;
        }
        int split_i = (c8) % 4;
        fifo_data = buf_data_split[split_i];
        fifo_A_local_out.write(fifo_data);
      }
    }
}
/* Module Definition */

/* Module Definition */
void A_IO_L2_in_inter_trans(int idx, int c0, int c2, int c4, int c5, A_t16 local_A[1][1], hls::stream<A_t16> &fifo_A_in, hls::stream<A_t16> &fifo_A_out, bool inter_trans_en)
{
#pragma HLS INLINE OFF
    int p0 = idx; // module id

    if (!inter_trans_en) return;

    for (int c6 = p0; c6 <= 3; c6 += 1) {
    #pragma HLS PIPELINE II=1
      // io_L2
      // access_coalesce
      A_t16 fifo_data;
      fifo_data = fifo_A_in.read();
      if (c6 == p0) {
        local_A[0][0] = fifo_data;
      } else {
        fifo_A_out.write(fifo_data);
      }
    }
}
/* Module Definition */

/* Module Definition */
void A_IO_L2_in_inter_trans_boundary(int idx, int c0, int c2, int c4, int c5, A_t16 local_A[1][1], hls::stream<A_t16> &fifo_A_in, bool inter_trans_en)
{
#pragma HLS INLINE OFF
    int p0 = idx; // module id

    if (!inter_trans_en) return;

    for (int c6 = p0; c6 <= 3; c6 += 1) {
    #pragma HLS PIPELINE II=1
      // io_L2
      // access_coalesce
      A_t16 fifo_data;
      fifo_data = fifo_A_in.read();
      local_A[0][0] = fifo_data;
    }
}
/* Module Definition */

/* Module Definition */
void A_IO_L2_in_core(int idx, hls::stream<A_t16> &fifo_A_in, hls::stream<A_t16> &fifo_A_out, hls::stream<A_t4> &fifo_A_local_out){
    int p0 = idx; // module id
    A_t16 local_A_ping[1][1];
    #pragma HLS RESOURCE variable=local_A_ping core=RAM_2P_BRAM
    A_t16 local_A_pong[1][1];
    #pragma HLS RESOURCE variable=local_A_pong core=RAM_2P_BRAM
    bool arb = 0;
    bool inter_trans_en = 1;
    bool intra_trans_en = 0;
    int c0, c0_prev;
    int c2, c2_prev;
    int c4, c4_prev;
    int c5, c5_prev;

    {
      for (int c0 = 0; c0 <= 255; c0 += 1)
        for (int c2 = 0; c2 <= 3; c2 += 1) {
          // array_L2
          for (int c4 = 0; c4 <= 1; c4 += 1)
            for (int c5 = 0; c5 <= 15; c5 += 1) {
              // array
              // io_L3
              {
                if (arb == 0) {
                    A_IO_L2_in_inter_trans(idx, c0, c2, c4, c5, local_A_pong, fifo_A_in, fifo_A_out, inter_trans_en);
                    A_IO_L2_in_intra_trans(idx, c0_prev, c2_prev, c4_prev, c5_prev, local_A_ping, fifo_A_local_out, intra_trans_en);
                } else {
                    A_IO_L2_in_inter_trans(idx, c0, c2, c4, c5, local_A_ping, fifo_A_in, fifo_A_out, inter_trans_en);
                    A_IO_L2_in_intra_trans(idx, c0_prev, c2_prev, c4_prev, c5_prev, local_A_pong, fifo_A_local_out, intra_trans_en);
                }
                intra_trans_en = 1;
                arb = !arb;
                c0_prev = c0;
                c2_prev = c2;
                c4_prev = c4;
                c5_prev = c5;
              }
            }
        }
      if (arb == 0) {
          A_IO_L2_in_intra_trans(idx, c0_prev, c2_prev, c4_prev, c5_prev, local_A_ping, fifo_A_local_out, intra_trans_en);
      } else {
          A_IO_L2_in_intra_trans(idx, c0_prev, c2_prev, c4_prev, c5_prev, local_A_pong, fifo_A_local_out, intra_trans_en);
      }
    }
}
/* Module Definition */

/* Module Definition */
void A_IO_L2_in(int idx, hls::stream<A_t16> &fifo_A_in, hls::stream<A_t16> &fifo_A_out, hls::stream<A_t4> &fifo_A_local_out)
{
    A_IO_L2_in_core(idx, fifo_A_in, fifo_A_out, fifo_A_local_out);
}
/* Module Definition */

/* Module Definition */
void A_IO_L2_in_boundary_core(int idx, hls::stream<A_t16> &fifo_A_in, hls::stream<A_t4> &fifo_A_local_out){
    int p0 = idx; // module id
    A_t16 local_A_ping[1][1];
    #pragma HLS RESOURCE variable=local_A_ping core=RAM_2P_BRAM
    A_t16 local_A_pong[1][1];
    #pragma HLS RESOURCE variable=local_A_pong core=RAM_2P_BRAM
    bool arb = 0;
    bool inter_trans_en = 1;
    bool intra_trans_en = 0;
    int c0, c0_prev;
    int c2, c2_prev;
    int c4, c4_prev;
    int c5, c5_prev;

    {
      for (int c0 = 0; c0 <= 255; c0 += 1)
        for (int c2 = 0; c2 <= 3; c2 += 1) {
          // array_L2
          for (int c4 = 0; c4 <= 1; c4 += 1)
            for (int c5 = 0; c5 <= 15; c5 += 1) {
              // array
              // io_L3
              {
                if (arb == 0) {
                    A_IO_L2_in_inter_trans_boundary(idx, c0, c2, c4, c5, local_A_pong, fifo_A_in, inter_trans_en);
                    A_IO_L2_in_intra_trans(idx, c0_prev, c2_prev, c4_prev, c5_prev, local_A_ping, fifo_A_local_out, intra_trans_en);
                } else {
                    A_IO_L2_in_inter_trans_boundary(idx, c0, c2, c4, c5, local_A_ping, fifo_A_in, inter_trans_en);
                    A_IO_L2_in_intra_trans(idx, c0_prev, c2_prev, c4_prev, c5_prev, local_A_pong, fifo_A_local_out, intra_trans_en);
                }
                intra_trans_en = 1;
                arb = !arb;
                c0_prev = c0;
                c2_prev = c2;
                c4_prev = c4;
                c5_prev = c5;
              }
            }
        }
      if (arb == 0) {
          A_IO_L2_in_intra_trans(idx, c0_prev, c2_prev, c4_prev, c5_prev, local_A_ping, fifo_A_local_out, intra_trans_en);
      } else {
          A_IO_L2_in_intra_trans(idx, c0_prev, c2_prev, c4_prev, c5_prev, local_A_pong, fifo_A_local_out, intra_trans_en);
      }
    }
}
/* Module Definition */

/* Module Definition */
void A_IO_L2_in_boundary(int idx, hls::stream<A_t16> &fifo_A_in, hls::stream<A_t4> &fifo_A_local_out)
{
    A_IO_L2_in_boundary_core(idx, fifo_A_in, fifo_A_local_out);
}
/* Module Definition */

/* Module Definition */
void B_IO_L3_in_core(B_t16 *B, hls::stream<B_t16> &fifo_B_local_out){
    B_t16 local_B[512][16];
    #pragma HLS RESOURCE variable=local_B core=RAM_2P_BRAM

    for (int c0 = 0; c0 <= 255; c0 += 1)
      for (int c2 = 0; c2 <= 3; c2 += 1) {
        // array_L2
        for (int c4 = 0; c4 <= 1; c4 += 1) {
          for (int c5 = 0; c5 <= 511; c5 += 1) {
            // access_coalesce
            for (int c6 = 0; c6 <= 15; c6 += 1) {
            #pragma HLS PIPELINE II=1
            {
              B_t16 fifo_data;
              fifo_data = B[16*c2 + 32768*c4 + 64*c5 + c6];
              local_B[c5][c6] = fifo_data;
            }
            }
          }
          for (int c5 = 0; c5 <= 15; c5 += 1) {
            // array
            // io_L3
            for (int c6 = 0; c6 <= 1; c6 += 1) {
              // io_L2
              for (int c7 = 0; c7 <= 255; c7 += 1) {
              #pragma HLS PIPELINE II=1
                // access_coalesce
                B_t16 fifo_data;
                fifo_data = local_B[256*c6 + c7][c5];
                fifo_B_local_out.write(fifo_data);
              }
            }
          }
        }
      }
}
/* Module Definition */

/* Module Definition */
void B_IO_L3_in(B_t16 *B, hls::stream<B_t16> &fifo_B_local_out)
{
    B_IO_L3_in_core(dev_B, fifo_B_local_out);
}
/* Module Definition */

/* Module Definition */
void B_IO_L2_in_intra_trans(int idx, int c0_prev, int c2_prev, int c4_prev, int c5_prev, B_t16 local_B[256][1], hls::stream<B_t4> &fifo_B_local_out, bool intra_trans_en)
{
#pragma HLS INLINE OFF
    int p0 = idx; // module id

    if (!intra_trans_en) return;

    // io_L2
    // io_L1
    // pe
    for (int c8 = 0; c8 <= 3; c8 += 1) {
      // latency
      for (int c9 = 0; c9 <= 255; c9 += 1) {
      #pragma HLS PIPELINE II=1
        // simd
        B_t4 fifo_data;
        B_t16 buf_data;
        B_t4 buf_data_split[4];
        #pragma HLS ARRAY_PARTITION variable=buf_data_split complete
        buf_data = local_B[c9][c8/4];
        for (int n = 0; n < 4; n++) {
            #pragma HLS UNROLL
            buf_data_split[n] = buf_data(127, 0);
            buf_data = buf_data >> 128;
        }
        int split_i = (c8) % 4;
        fifo_data = buf_data_split[split_i];
        fifo_B_local_out.write(fifo_data);
      }
    }
}
/* Module Definition */

/* Module Definition */
void B_IO_L2_in_inter_trans(int idx, int c0, int c2, int c4, int c5, B_t16 local_B[256][1], hls::stream<B_t16> &fifo_B_in, hls::stream<B_t16> &fifo_B_out, bool inter_trans_en)
{
#pragma HLS INLINE OFF
    int p0 = idx; // module id

    if (!inter_trans_en) return;

    for (int c6 = p0; c6 <= 1; c6 += 1) {
      // io_L2
      for (int c7 = 0; c7 <= 255; c7 += 1) {
      #pragma HLS PIPELINE II=1
        // access_coalesce
        B_t16 fifo_data;
        fifo_data = fifo_B_in.read();
        if (c6 == p0) {
          local_B[c7][0] = fifo_data;
        } else {
          fifo_B_out.write(fifo_data);
        }
      }
    }
}
/* Module Definition */

/* Module Definition */
void B_IO_L2_in_inter_trans_boundary(int idx, int c0, int c2, int c4, int c5, B_t16 local_B[256][1], hls::stream<B_t16> &fifo_B_in, bool inter_trans_en)
{
#pragma HLS INLINE OFF
    int p0 = idx; // module id

    if (!inter_trans_en) return;

    for (int c6 = p0; c6 <= 1; c6 += 1) {
      // io_L2
      for (int c7 = 0; c7 <= 255; c7 += 1) {
      #pragma HLS PIPELINE II=1
        // access_coalesce
        B_t16 fifo_data;
        fifo_data = fifo_B_in.read();
        local_B[c7][0] = fifo_data;
      }
    }
}
/* Module Definition */

/* Module Definition */
void B_IO_L2_in_core(int idx, hls::stream<B_t16> &fifo_B_in, hls::stream<B_t16> &fifo_B_out, hls::stream<B_t4> &fifo_B_local_out){
    int p0 = idx; // module id
    B_t16 local_B_ping[256][1];
    #pragma HLS RESOURCE variable=local_B_ping core=RAM_2P_BRAM
    B_t16 local_B_pong[256][1];
    #pragma HLS RESOURCE variable=local_B_pong core=RAM_2P_BRAM
    bool arb = 0;
    bool inter_trans_en = 1;
    bool intra_trans_en = 0;
    int c0, c0_prev;
    int c2, c2_prev;
    int c4, c4_prev;
    int c5, c5_prev;

    {
      for (int c0 = 0; c0 <= 255; c0 += 1)
        for (int c2 = 0; c2 <= 3; c2 += 1) {
          // array_L2
          for (int c4 = 0; c4 <= 1; c4 += 1)
            for (int c5 = 0; c5 <= 15; c5 += 1) {
              // array
              // io_L3
              {
                if (arb == 0) {
                    B_IO_L2_in_inter_trans(idx, c0, c2, c4, c5, local_B_pong, fifo_B_in, fifo_B_out, inter_trans_en);
                    B_IO_L2_in_intra_trans(idx, c0_prev, c2_prev, c4_prev, c5_prev, local_B_ping, fifo_B_local_out, intra_trans_en);
                } else {
                    B_IO_L2_in_inter_trans(idx, c0, c2, c4, c5, local_B_ping, fifo_B_in, fifo_B_out, inter_trans_en);
                    B_IO_L2_in_intra_trans(idx, c0_prev, c2_prev, c4_prev, c5_prev, local_B_pong, fifo_B_local_out, intra_trans_en);
                }
                intra_trans_en = 1;
                arb = !arb;
                c0_prev = c0;
                c2_prev = c2;
                c4_prev = c4;
                c5_prev = c5;
              }
            }
        }
      if (arb == 0) {
          B_IO_L2_in_intra_trans(idx, c0_prev, c2_prev, c4_prev, c5_prev, local_B_ping, fifo_B_local_out, intra_trans_en);
      } else {
          B_IO_L2_in_intra_trans(idx, c0_prev, c2_prev, c4_prev, c5_prev, local_B_pong, fifo_B_local_out, intra_trans_en);
      }
    }
}
/* Module Definition */

/* Module Definition */
void B_IO_L2_in(int idx, hls::stream<B_t16> &fifo_B_in, hls::stream<B_t16> &fifo_B_out, hls::stream<B_t4> &fifo_B_local_out)
{
    B_IO_L2_in_core(idx, fifo_B_in, fifo_B_out, fifo_B_local_out);
}
/* Module Definition */

/* Module Definition */
void B_IO_L2_in_boundary_core(int idx, hls::stream<B_t16> &fifo_B_in, hls::stream<B_t4> &fifo_B_local_out){
    int p0 = idx; // module id
    B_t16 local_B_ping[256][1];
    #pragma HLS RESOURCE variable=local_B_ping core=RAM_2P_BRAM
    B_t16 local_B_pong[256][1];
    #pragma HLS RESOURCE variable=local_B_pong core=RAM_2P_BRAM
    bool arb = 0;
    bool inter_trans_en = 1;
    bool intra_trans_en = 0;
    int c0, c0_prev;
    int c2, c2_prev;
    int c4, c4_prev;
    int c5, c5_prev;

    {
      for (int c0 = 0; c0 <= 255; c0 += 1)
        for (int c2 = 0; c2 <= 3; c2 += 1) {
          // array_L2
          for (int c4 = 0; c4 <= 1; c4 += 1)
            for (int c5 = 0; c5 <= 15; c5 += 1) {
              // array
              // io_L3
              {
                if (arb == 0) {
                    B_IO_L2_in_inter_trans_boundary(idx, c0, c2, c4, c5, local_B_pong, fifo_B_in, inter_trans_en);
                    B_IO_L2_in_intra_trans(idx, c0_prev, c2_prev, c4_prev, c5_prev, local_B_ping, fifo_B_local_out, intra_trans_en);
                } else {
                    B_IO_L2_in_inter_trans_boundary(idx, c0, c2, c4, c5, local_B_ping, fifo_B_in, inter_trans_en);
                    B_IO_L2_in_intra_trans(idx, c0_prev, c2_prev, c4_prev, c5_prev, local_B_pong, fifo_B_local_out, intra_trans_en);
                }
                intra_trans_en = 1;
                arb = !arb;
                c0_prev = c0;
                c2_prev = c2;
                c4_prev = c4;
                c5_prev = c5;
              }
            }
        }
      if (arb == 0) {
          B_IO_L2_in_intra_trans(idx, c0_prev, c2_prev, c4_prev, c5_prev, local_B_ping, fifo_B_local_out, intra_trans_en);
      } else {
          B_IO_L2_in_intra_trans(idx, c0_prev, c2_prev, c4_prev, c5_prev, local_B_pong, fifo_B_local_out, intra_trans_en);
      }
    }
}
/* Module Definition */

/* Module Definition */
void B_IO_L2_in_boundary(int idx, hls::stream<B_t16> &fifo_B_in, hls::stream<B_t4> &fifo_B_local_out)
{
    B_IO_L2_in_boundary_core(idx, fifo_B_in, fifo_B_local_out);
}
/* Module Definition */

/* Module Definition */
void C_IO_L3_in_core(C_t16 *C, hls::stream<C_t16> &fifo_C_local_out){
    C_t16 local_C[4][32];
    #pragma HLS RESOURCE variable=local_C core=RAM_2P_BRAM

    for (int c0 = 0; c0 <= 255; c0 += 1)
      for (int c2 = 0; c2 <= 3; c2 += 1) {
        // array_L2
        for (int c4 = 0; c4 <= 1; c4 += 1) {
          if (c2 >= 1)
            for (int c5 = 0; c5 <= 3; c5 += 1) {
              // access_coalesce
              for (int c6 = 0; c6 <= 31; c6 += 1) {
              #pragma HLS PIPELINE II=1
              {
                C_t16 fifo_data;
                fifo_data = C[256*c0 + 32*c4 + 64*c5 + c6];
                local_C[c5][c6] = fifo_data;
              }
              }
            }
          for (int c5 = 0; c5 <= 15; c5 += 1)
            if (c2 + c5 >= 1) {
              // array
              // io_L3
              for (int c6 = 0; c6 <= 1; c6 += 1) {
                // io_L2
                for (int c7 = 0; c7 <= 3; c7 += 1) {
                  // io_L1
                  // access_coalesce
                  for (int c9 = 0; c9 <= 15; c9 += 1) {
                  #pragma HLS PIPELINE II=1
                    C_t16 fifo_data;
                    fifo_data = local_C[c7][16*c6 + c9];
                    fifo_C_local_out.write(fifo_data);
                  }
                }
              }
            }
        }
      }
}
/* Module Definition */

/* Module Definition */
void C_IO_L3_in(C_t16 *C, hls::stream<C_t16> &fifo_C_local_out)
{
    C_IO_L3_in_core(dev_C, fifo_C_local_out);
}
/* Module Definition */

/* Module Definition */
void C_IO_L2_in_core(int idx, hls::stream<C_t16> &fifo_C_in, hls::stream<C_t16> &fifo_C_out, hls::stream<C_t16> &fifo_C_local_out){
    int p0 = idx; // module id

    for (int c0 = 0; c0 <= 255; c0 += 1)
      for (int c2 = 0; c2 <= 3; c2 += 1) {
        // array_L2
        for (int c4 = 0; c4 <= 1; c4 += 1)
          for (int c5 = 0; c5 <= 15; c5 += 1)
            if (c2 + c5 >= 1) {
              // array
              // io_L3
              for (int c6 = p0; c6 <= 1; c6 += 1) {
                // io_L2
                for (int c7 = 0; c7 <= 3; c7 += 1) {
                  // io_L1
                  // pe
                  // access_coalesce
                  for (int c9 = 0; c9 <= 15; c9 += 1) {
                  #pragma HLS PIPELINE II=1
                    C_t16 fifo_data;
                    fifo_data = fifo_C_in.read();
                    if (c6 == p0) {
                      fifo_C_local_out.write(fifo_data);
                    } else {
                      fifo_C_out.write(fifo_data);
                    }
                  }
                }
              }
            }
      }
}
/* Module Definition */

/* Module Definition */
void C_IO_L2_in(int idx, hls::stream<C_t16> &fifo_C_in, hls::stream<C_t16> &fifo_C_out, hls::stream<C_t16> &fifo_C_local_out)
{
    C_IO_L2_in_core(idx, fifo_C_in, fifo_C_out, fifo_C_local_out);
}
/* Module Definition */

/* Module Definition */
void C_IO_L2_in_boundary_core(int idx, hls::stream<C_t16> &fifo_C_in, hls::stream<C_t16> &fifo_C_local_out){
    int p0 = idx; // module id

    for (int c0 = 0; c0 <= 255; c0 += 1)
      for (int c2 = 0; c2 <= 3; c2 += 1) {
        // array_L2
        for (int c4 = 0; c4 <= 1; c4 += 1)
          for (int c5 = 0; c5 <= 15; c5 += 1)
            if (c2 + c5 >= 1) {
              // array
              // io_L3
              for (int c6 = p0; c6 <= 1; c6 += 1) {
                // io_L2
                for (int c7 = 0; c7 <= 3; c7 += 1) {
                  // io_L1
                  // pe
                  // access_coalesce
                  for (int c9 = 0; c9 <= 15; c9 += 1) {
                  #pragma HLS PIPELINE II=1
                    C_t16 fifo_data;
                    fifo_data = fifo_C_in.read();
                    fifo_C_local_out.write(fifo_data);
                  }
                }
              }
            }
      }
}
/* Module Definition */

/* Module Definition */
void C_IO_L2_in_boundary(int idx, hls::stream<C_t16> &fifo_C_in, hls::stream<C_t16> &fifo_C_local_out)
{
    C_IO_L2_in_boundary_core(idx, fifo_C_in, fifo_C_local_out);
}
/* Module Definition */

/* Module Definition */
void C_IO_L1_in_core(int idx, int idy, hls::stream<C_t16> &fifo_C_in, hls::stream<C_t16> &fifo_C_out, hls::stream<C_t16> &fifo_C_local_out){
    int p0 = idx, p1 = idy; // module id

    for (int c0 = 0; c0 <= 255; c0 += 1)
      for (int c2 = 0; c2 <= 3; c2 += 1) {
        // array_L2
        for (int c4 = 0; c4 <= 1; c4 += 1)
          for (int c5 = 0; c5 <= 15; c5 += 1)
            if (c2 + c5 >= 1) {
              // array
              // io_L3
              // io_L2
              for (int c7 = p1; c7 <= 3; c7 += 1) {
                // io_L1
                // pe
                // access_coalesce
                for (int c9 = 0; c9 <= 15; c9 += 1) {
                #pragma HLS PIPELINE II=1
                  C_t16 fifo_data;
                  fifo_data = fifo_C_in.read();
                  if (c7 == p1) {
                    fifo_C_local_out.write(fifo_data);
                  } else {
                    fifo_C_out.write(fifo_data);
                  }
                }
              }
            }
      }
}
/* Module Definition */

/* Module Definition */
void C_IO_L1_in(int idx, int idy, hls::stream<C_t16> &fifo_C_in, hls::stream<C_t16> &fifo_C_out, hls::stream<C_t16> &fifo_C_local_out)
{
    C_IO_L1_in_core(idx, idy, fifo_C_in, fifo_C_out, fifo_C_local_out);
}
/* Module Definition */

/* Module Definition */
void C_IO_L1_in_boundary_core(int idx, int idy, hls::stream<C_t16> &fifo_C_in, hls::stream<C_t16> &fifo_C_local_out){
    int p0 = idx, p1 = idy; // module id

    for (int c0 = 0; c0 <= 255; c0 += 1)
      for (int c2 = 0; c2 <= 3; c2 += 1) {
        // array_L2
        for (int c4 = 0; c4 <= 1; c4 += 1)
          for (int c5 = 0; c5 <= 15; c5 += 1)
            if (c2 + c5 >= 1) {
              // array
              // io_L3
              // io_L2
              for (int c7 = p1; c7 <= 3; c7 += 1) {
                // io_L1
                // pe
                // access_coalesce
                for (int c9 = 0; c9 <= 15; c9 += 1) {
                #pragma HLS PIPELINE II=1
                  C_t16 fifo_data;
                  fifo_data = fifo_C_in.read();
                  fifo_C_local_out.write(fifo_data);
                }
              }
            }
      }
}
/* Module Definition */

/* Module Definition */
void C_IO_L1_in_boundary(int idx, int idy, hls::stream<C_t16> &fifo_C_in, hls::stream<C_t16> &fifo_C_local_out)
{
    C_IO_L1_in_boundary_core(idx, idy, fifo_C_in, fifo_C_local_out);
}
/* Module Definition */

/* Module Definition */
void PE_core(int idx, int idy, hls::stream<A_t4> &fifo_A_in, hls::stream<A_t4> &fifo_A_out, hls::stream<B_t4> &fifo_B_in, hls::stream<B_t4> &fifo_B_out, hls::stream<C_t16> &fifo_C_in, hls::stream<C_t16> &fifo_C_out, hls::stream<float> &fifo_C_drain_out){
    int p0 = idx, p1 = idy; // module id
    float local_A[1][4];
    #pragma HLS ARRAY_PARTITION variable=local_A dim=2 factor=4 cyclic
    #pragma HLS RESOURCE variable=local_A core=RAM_2P_BRAM
    float local_B[1][4];
    #pragma HLS ARRAY_PARTITION variable=local_B dim=2 factor=4 cyclic
    #pragma HLS RESOURCE variable=local_B core=RAM_2P_BRAM
    float local_C[1][256];
    #pragma HLS RESOURCE variable=local_C core=RAM_2P_BRAM

    for (int c0 = 0; c0 <= 255; c0 += 1)
      for (int c2 = 0; c2 <= 3; c2 += 1) {
        // array_L2
        for (int c4 = 0; c4 <= 1; c4 += 1)
          for (int c5 = 0; c5 <= 15; c5 += 1) {
            // array
            // pe
            {
              if (c2 + c5 >= 1) {
                for (int c9 = 0; c9 <= 255; c9 += 1)
                  local_C[0][c9] = fifo_C_in.read();
              } else {
                // latency
                for (int c9 = 0; c9 <= 255; c9 += 1) {
                #pragma HLS PIPELINE II=1
                  // simd
                  // hls_unroll
                  local_C[0][c9] = 0;
                }
              }
              for (int c8 = 0; c8 <= 3; c8 += 1) {
                // latency
                for (int c9 = 0; c9 <= 255; c9 += 1) {
                #pragma HLS PIPELINE II=1
                  {
                    {
                      A_t4 fifo_data;
                      fifo_data = fifo_A_in.read();
                      for (int n = 0; n < 4; n++) {
                      #pragma HLS UNROLL
                          local_A[0][n] = Reinterpret<float>((ap_uint<32>)fifo_data(31, 0));
                          fifo_data = fifo_data >> 32;
                      }
                    }
                    {
                      B_t4 fifo_data;
                      fifo_data = fifo_B_in.read();
                      for (int n = 0; n < 4; n++) {
                      #pragma HLS UNROLL
                          local_B[0][n] = Reinterpret<float>((ap_uint<32>)fifo_data(31, 0));
                          fifo_data = fifo_data >> 32;
                      }
                    }
                    // simd
                    for (int c10 = 0; c10 <= 3; c10 += 1) {
                    #pragma HLS UNROLL
                      local_C[0][c9] = (local_C[0][c9] + (local_A[0][c10] * local_B[0][c10]));
                    }
                    if (c2 == 3 && c5 == 15 && c8 == 3)
                      fifo_C_drain_out.write(local_C[0][c9]);
                    {
                      B_t4 fifo_data;
                      fifo_data = (Reinterpret<ap_uint<32> >(local_B[0][3]), Reinterpret<ap_uint<32> >(local_B[0][2]), Reinterpret<ap_uint<32> >(local_B[0][1]), Reinterpret<ap_uint<32> >(local_B[0][0]));
                      fifo_B_out.write(fifo_data);
                    }
                    {
                      A_t4 fifo_data;
                      fifo_data = (Reinterpret<ap_uint<32> >(local_A[0][3]), Reinterpret<ap_uint<32> >(local_A[0][2]), Reinterpret<ap_uint<32> >(local_A[0][1]), Reinterpret<ap_uint<32> >(local_A[0][0]));
                      fifo_A_out.write(fifo_data);
                    }
                  }
                }
              }
              if (c2 + c5 <= 17)
                for (int c9 = 0; c9 <= 255; c9 += 1)
                  fifo_C_out.write(local_C[0][c9]);
            }
          }
      }
}
/* Module Definition */

/* Module Definition */
void PE(int idx, int idy, hls::stream<A_t4> &fifo_A_in, hls::stream<A_t4> &fifo_A_out, hls::stream<B_t4> &fifo_B_in, hls::stream<B_t4> &fifo_B_out, hls::stream<C_t16> &fifo_C_in, hls::stream<C_t16> &fifo_C_out, hls::stream<float> &fifo_C_drain_out)
{
    PE_core(idx, idy, fifo_A_in, fifo_A_out, fifo_B_in, fifo_B_out, fifo_C_in, fifo_C_out, fifo_C_drain_out);
}
/* Module Definition */

/* Module Definition */
void A_PE_dummy_core(int idx, int idy, hls::stream<A_t4> &fifo_A_in){
    int p0 = idx, p1 = idy; // module id

    for (int c0 = 0; c0 <= 255; c0 += 1)
      for (int c2 = 0; c2 <= 3; c2 += 1) {
        // array_L2
        for (int c4 = 0; c4 <= 1; c4 += 1) {
          // array
          {
          }
          for (int c5 = 0; c5 <= 15; c5 += 1) {
            // array
            // pe
            for (int c8 = 0; c8 <= 3; c8 += 1) {
              // latency
              for (int c9 = 0; c9 <= 255; c9 += 1) {
              #pragma HLS PIPELINE II=1
                A_t4 fifo_data;
                fifo_data = fifo_A_in.read();
              }
            }
          }
        }
      }
}
/* Module Definition */

/* Module Definition */
void A_PE_dummy(int idx, int idy, hls::stream<A_t4> &fifo_A_in)
{
    A_PE_dummy_core(idx, idy, fifo_A_in);
}
/* Module Definition */

/* Module Definition */
void B_PE_dummy_core(int idx, int idy, hls::stream<B_t4> &fifo_B_in){
    int p0 = idx, p1 = idy; // module id

    for (int c0 = 0; c0 <= 255; c0 += 1)
      for (int c2 = 0; c2 <= 3; c2 += 1) {
        // array_L2
        for (int c4 = 0; c4 <= 1; c4 += 1) {
          // array
          {
          }
          for (int c5 = 0; c5 <= 15; c5 += 1) {
            // array
            // pe
            for (int c8 = 0; c8 <= 3; c8 += 1) {
              // latency
              for (int c9 = 0; c9 <= 255; c9 += 1) {
              #pragma HLS PIPELINE II=1
                B_t4 fifo_data;
                fifo_data = fifo_B_in.read();
              }
            }
          }
        }
      }
}
/* Module Definition */

/* Module Definition */
void B_PE_dummy(int idx, int idy, hls::stream<B_t4> &fifo_B_in)
{
    B_PE_dummy_core(idx, idy, fifo_B_in);
}
/* Module Definition */

/* Module Definition */
void C_IO_L1_out_core(int idx, int idy, hls::stream<C_t16> &fifo_C_in, hls::stream<C_t16> &fifo_C_out, hls::stream<C_t16> &fifo_C_local_in){
    int p0 = idx, p1 = idy; // module id

    for (int c0 = 0; c0 <= 255; c0 += 1)
      for (int c2 = 0; c2 <= 3; c2 += 1) {
        // array_L2
        for (int c4 = 0; c4 <= 1; c4 += 1)
          for (int c5 = 0; c5 <= 15; c5 += 1)
            if (c2 + c5 <= 17) {
              // array
              // io_L3
              // io_L2
              for (int c7 = p1; c7 <= 3; c7 += 1) {
                // io_L1
                // pe
                // access_coalesce
                for (int c9 = 0; c9 <= 15; c9 += 1) {
                #pragma HLS PIPELINE II=1
                  C_t16 fifo_data;
                  if (c7 == p1) {
                    fifo_data = fifo_C_local_in.read();
                  } else {
                    fifo_data = fifo_C_in.read();
                  }
                  fifo_C_out.write(fifo_data);
                }
              }
            }
      }
}
/* Module Definition */

/* Module Definition */
void C_IO_L1_out(int idx, int idy, hls::stream<C_t16> &fifo_C_in, hls::stream<C_t16> &fifo_C_out, hls::stream<C_t16> &fifo_C_local_in)
{
    C_IO_L1_out_core(idx, idy, fifo_C_in, fifo_C_out, fifo_C_local_in);
}
/* Module Definition */

/* Module Definition */
void C_IO_L1_out_boundary_core(int idx, int idy, hls::stream<C_t16> &fifo_C_out, hls::stream<C_t16> &fifo_C_local_in){
    int p0 = idx, p1 = idy; // module id

    for (int c0 = 0; c0 <= 255; c0 += 1)
      for (int c2 = 0; c2 <= 3; c2 += 1) {
        // array_L2
        for (int c4 = 0; c4 <= 1; c4 += 1)
          for (int c5 = 0; c5 <= 15; c5 += 1)
            if (c2 + c5 <= 17) {
              // array
              // io_L3
              // io_L2
              for (int c7 = p1; c7 <= 3; c7 += 1) {
                // io_L1
                // pe
                // access_coalesce
                for (int c9 = 0; c9 <= 15; c9 += 1) {
                #pragma HLS PIPELINE II=1
                  C_t16 fifo_data;
                  fifo_data = fifo_C_local_in.read();
                  fifo_C_out.write(fifo_data);
                }
              }
            }
      }
}
/* Module Definition */

/* Module Definition */
void C_IO_L1_out_boundary(int idx, int idy, hls::stream<C_t16> &fifo_C_out, hls::stream<C_t16> &fifo_C_local_in)
{
    C_IO_L1_out_boundary_core(idx, idy, fifo_C_out, fifo_C_local_in);
}
/* Module Definition */

/* Module Definition */
void C_IO_L2_out_core(int idx, hls::stream<C_t16> &fifo_C_in, hls::stream<C_t16> &fifo_C_out, hls::stream<C_t16> &fifo_C_local_in){
    int p0 = idx; // module id

    for (int c0 = 0; c0 <= 255; c0 += 1)
      for (int c2 = 0; c2 <= 3; c2 += 1) {
        // array_L2
        for (int c4 = 0; c4 <= 1; c4 += 1)
          for (int c5 = 0; c5 <= 15; c5 += 1)
            if (c2 + c5 <= 17) {
              // array
              // io_L3
              for (int c6 = p0; c6 <= 1; c6 += 1) {
                // io_L2
                for (int c7 = 0; c7 <= 3; c7 += 1) {
                  // io_L1
                  // pe
                  // access_coalesce
                  for (int c9 = 0; c9 <= 15; c9 += 1) {
                  #pragma HLS PIPELINE II=1
                    C_t16 fifo_data;
                    if (c6 == p0) {
                      fifo_data = fifo_C_local_in.read();
                    } else {
                      fifo_data = fifo_C_in.read();
                    }
                    fifo_C_out.write(fifo_data);
                  }
                }
              }
            }
      }
}
/* Module Definition */

/* Module Definition */
void C_IO_L2_out(int idx, hls::stream<C_t16> &fifo_C_in, hls::stream<C_t16> &fifo_C_out, hls::stream<C_t16> &fifo_C_local_in)
{
    C_IO_L2_out_core(idx, fifo_C_in, fifo_C_out, fifo_C_local_in);
}
/* Module Definition */

/* Module Definition */
void C_IO_L2_out_boundary_core(int idx, hls::stream<C_t16> &fifo_C_out, hls::stream<C_t16> &fifo_C_local_in){
    int p0 = idx; // module id

    for (int c0 = 0; c0 <= 255; c0 += 1)
      for (int c2 = 0; c2 <= 3; c2 += 1) {
        // array_L2
        for (int c4 = 0; c4 <= 1; c4 += 1)
          for (int c5 = 0; c5 <= 15; c5 += 1)
            if (c2 + c5 <= 17) {
              // array
              // io_L3
              for (int c6 = p0; c6 <= 1; c6 += 1) {
                // io_L2
                for (int c7 = 0; c7 <= 3; c7 += 1) {
                  // io_L1
                  // pe
                  // access_coalesce
                  for (int c9 = 0; c9 <= 15; c9 += 1) {
                  #pragma HLS PIPELINE II=1
                    C_t16 fifo_data;
                    fifo_data = fifo_C_local_in.read();
                    fifo_C_out.write(fifo_data);
                  }
                }
              }
            }
      }
}
/* Module Definition */

/* Module Definition */
void C_IO_L2_out_boundary(int idx, hls::stream<C_t16> &fifo_C_out, hls::stream<C_t16> &fifo_C_local_in)
{
    C_IO_L2_out_boundary_core(idx, fifo_C_out, fifo_C_local_in);
}
/* Module Definition */

/* Module Definition */
void C_IO_L3_out_core(C_t16 *C, hls::stream<C_t16> &fifo_C_local_in){
    C_t16 local_C[4][32];
    #pragma HLS RESOURCE variable=local_C core=RAM_2P_BRAM

    for (int c0 = 0; c0 <= 255; c0 += 1)
      for (int c2 = 0; c2 <= 3; c2 += 1) {
        // array_L2
        for (int c4 = 0; c4 <= 1; c4 += 1) {
          for (int c5 = 0; c5 <= 15; c5 += 1)
            if (c2 + c5 <= 17) {
              // array
              // io_L3
              for (int c6 = 0; c6 <= 1; c6 += 1) {
                // io_L2
                for (int c7 = 0; c7 <= 3; c7 += 1) {
                #pragma HLS DEPENDENCE variable=local_C inter false
                  // io_L1
                  // access_coalesce
                  for (int c9 = 0; c9 <= 15; c9 += 1) {
                  #pragma HLS PIPELINE II=1
                    C_t16 fifo_data;
                    fifo_data = fifo_C_local_in.read();
                    local_C[c7][16*c6 + c9] = fifo_data;
                  }
                }
              }
            }
          if (c2 <= 2)
            for (int c5 = 0; c5 <= 3; c5 += 1) {
            #pragma HLS DEPENDENCE variable=local_C inter false
              // access_coalesce
              for (int c6 = 0; c6 <= 31; c6 += 1) {
              #pragma HLS PIPELINE II=1
              {
                C_t16 fifo_data;
                fifo_data = local_C[c5][c6];
                C[256*c0 + 32*c4 + 64*c5 + c6] = fifo_data;
              }
              }
            }
        }
      }
}
/* Module Definition */

/* Module Definition */
void C_IO_L3_out(C_t16 *C, hls::stream<C_t16> &fifo_C_local_in)
{
    C_IO_L3_out_core(dev_C, fifo_C_local_in);
}
/* Module Definition */

/* Module Definition */
void C_drain_IO_L1_out_intra_trans(int idx, int idy, int c0, int c4, C_t16 local_C[1][16], hls::stream<float> &fifo_C_drain_local_in, bool intra_trans_en)
{
#pragma HLS INLINE OFF
    int p0 = idx, p1 = idy; // module id

    if (!intra_trans_en) return;

    // io_L1
    // pe
    // latency
    for (int c9 = 0; c9 <= 255; c9 += 1) {
    #pragma HLS PIPELINE II=1
      // simd
      float fifo_data;
      C_t16 buf_data;
      ap_uint<32> buf_data_split[16];
      #pragma HLS ARRAY_PARTITION variable=buf_data_split complete
      buf_data = local_C[0][c9/16];
      for (int n = 0; n < 16; n++) {
          #pragma HLS UNROLL
          buf_data_split[n] = buf_data(31, 0);
          buf_data = buf_data >> 32;
      }
      int split_i = (c9) % 16;
      fifo_data = fifo_C_drain_local_in.read();
      buf_data_split[split_i] = Reinterpret<ap_uint<32> >(fifo_data);
      buf_data = (buf_data_split[15], buf_data_split[14], buf_data_split[13], buf_data_split[12], buf_data_split[11], buf_data_split[10], buf_data_split[9], buf_data_split[8], buf_data_split[7], buf_data_split[6], buf_data_split[5], buf_data_split[4], buf_data_split[3], buf_data_split[2], buf_data_split[1], buf_data_split[0]);
      local_C[0][c9/16] = buf_data;
    }
}
/* Module Definition */

/* Module Definition */
void C_drain_IO_L1_out_inter_trans(int idx, int idy, int c0_prev, int c4_prev, C_t16 local_C[1][16], hls::stream<C_t16> &fifo_C_drain_in, hls::stream<C_t16> &fifo_C_drain_out, bool inter_trans_en)
{
#pragma HLS INLINE OFF
    int p0 = idx, p1 = idy; // module id

    if (!inter_trans_en) return;

    for (int c7 = p1; c7 <= 3; c7 += 1) {
    #pragma HLS DEPENDENCE variable=local_C inter false
      // io_L1
      // access_coalesce
      for (int c9 = 0; c9 <= 15; c9 += 1) {
      #pragma HLS PIPELINE II=1
        C_t16 fifo_data;
        if (c7 == p1) {
          fifo_data = local_C[0][c9];
        } else {
          fifo_data = fifo_C_drain_in.read();
        }
        fifo_C_drain_out.write(fifo_data);
      }
    }
}
/* Module Definition */

/* Module Definition */
void C_drain_IO_L1_out_inter_trans_boundary(int idx, int idy, int c0_prev, int c4_prev, C_t16 local_C[1][16], hls::stream<C_t16> &fifo_C_drain_out, bool inter_trans_en)
{
#pragma HLS INLINE OFF
    int p0 = idx, p1 = idy; // module id

    if (!inter_trans_en) return;

    for (int c7 = p1; c7 <= 3; c7 += 1) {
    #pragma HLS DEPENDENCE variable=local_C inter false
      // io_L1
      // access_coalesce
      for (int c9 = 0; c9 <= 15; c9 += 1) {
      #pragma HLS PIPELINE II=1
        C_t16 fifo_data;
        fifo_data = local_C[0][c9];
        fifo_C_drain_out.write(fifo_data);
      }
    }
}
/* Module Definition */

/* Module Definition */
void C_drain_IO_L1_out_core(int idx, int idy, hls::stream<C_t16> &fifo_C_drain_in, hls::stream<C_t16> &fifo_C_drain_out, hls::stream<float> &fifo_C_drain_local_in){
    int p0 = idx, p1 = idy; // module id
    C_t16 local_C_ping[1][16];
    #pragma HLS RESOURCE variable=local_C_ping core=RAM_2P_BRAM
    C_t16 local_C_pong[1][16];
    #pragma HLS RESOURCE variable=local_C_pong core=RAM_2P_BRAM
    bool arb = 0;
    bool inter_trans_en = 0;
    bool intra_trans_en = 1;
    int c0, c0_prev;
    int c4, c4_prev;

    {
      for (int c0 = 0; c0 <= 255; c0 += 1) {
        // array_L2
        for (int c4 = 0; c4 <= 1; c4 += 1) {
          // array
          // io_L3
          // io_L2
          {
            if (arb == 0) {
                C_drain_IO_L1_out_intra_trans(idx, idy, c0, c4, local_C_ping, fifo_C_drain_local_in, intra_trans_en);
                C_drain_IO_L1_out_inter_trans(idx, idy, c0_prev, c4_prev, local_C_pong, fifo_C_drain_in, fifo_C_drain_out, inter_trans_en);
            } else {
                C_drain_IO_L1_out_intra_trans(idx, idy, c0, c4, local_C_pong, fifo_C_drain_local_in, intra_trans_en);
                C_drain_IO_L1_out_inter_trans(idx, idy, c0_prev, c4_prev, local_C_ping, fifo_C_drain_in, fifo_C_drain_out, inter_trans_en);
            }
            inter_trans_en = 1;
            arb = !arb;
            c0_prev = c0;
            c4_prev = c4;
          }
        }
      }
      if (arb == 0) {
          C_drain_IO_L1_out_inter_trans(idx, idy, c0_prev, c4_prev, local_C_pong, fifo_C_drain_in, fifo_C_drain_out, inter_trans_en);
      } else {
          C_drain_IO_L1_out_inter_trans(idx, idy, c0_prev, c4_prev, local_C_ping, fifo_C_drain_in, fifo_C_drain_out, inter_trans_en);
      }
    }
}
/* Module Definition */

/* Module Definition */
void C_drain_IO_L1_out(int idx, int idy, hls::stream<C_t16> &fifo_C_drain_in, hls::stream<C_t16> &fifo_C_drain_out, hls::stream<float> &fifo_C_drain_local_in)
{
    C_drain_IO_L1_out_core(idx, idy, fifo_C_drain_in, fifo_C_drain_out, fifo_C_drain_local_in);
}
/* Module Definition */

/* Module Definition */
void C_drain_IO_L1_out_boundary_core(int idx, int idy, hls::stream<C_t16> &fifo_C_drain_out, hls::stream<float> &fifo_C_drain_local_in){
    int p0 = idx, p1 = idy; // module id
    C_t16 local_C_ping[1][16];
    #pragma HLS RESOURCE variable=local_C_ping core=RAM_2P_BRAM
    C_t16 local_C_pong[1][16];
    #pragma HLS RESOURCE variable=local_C_pong core=RAM_2P_BRAM
    bool arb = 0;
    bool inter_trans_en = 0;
    bool intra_trans_en = 1;
    int c0, c0_prev;
    int c4, c4_prev;

    {
      for (int c0 = 0; c0 <= 255; c0 += 1) {
        // array_L2
        for (int c4 = 0; c4 <= 1; c4 += 1) {
          // array
          // io_L3
          // io_L2
          {
            if (arb == 0) {
                C_drain_IO_L1_out_intra_trans(idx, idy, c0, c4, local_C_ping, fifo_C_drain_local_in, intra_trans_en);
                C_drain_IO_L1_out_inter_trans_boundary(idx, idy, c0_prev, c4_prev, local_C_pong, fifo_C_drain_out, inter_trans_en);
            } else {
                C_drain_IO_L1_out_intra_trans(idx, idy, c0, c4, local_C_pong, fifo_C_drain_local_in, intra_trans_en);
                C_drain_IO_L1_out_inter_trans_boundary(idx, idy, c0_prev, c4_prev, local_C_ping, fifo_C_drain_out, inter_trans_en);
            }
            inter_trans_en = 1;
            arb = !arb;
            c0_prev = c0;
            c4_prev = c4;
          }
        }
      }
      if (arb == 0) {
          C_drain_IO_L1_out_inter_trans_boundary(idx, idy, c0_prev, c4_prev, local_C_pong, fifo_C_drain_out, inter_trans_en);
      } else {
          C_drain_IO_L1_out_inter_trans_boundary(idx, idy, c0_prev, c4_prev, local_C_ping, fifo_C_drain_out, inter_trans_en);
      }
    }
}
/* Module Definition */

/* Module Definition */
void C_drain_IO_L1_out_boundary(int idx, int idy, hls::stream<C_t16> &fifo_C_drain_out, hls::stream<float> &fifo_C_drain_local_in)
{
    C_drain_IO_L1_out_boundary_core(idx, idy, fifo_C_drain_out, fifo_C_drain_local_in);
}
/* Module Definition */

/* Module Definition */
void C_drain_IO_L2_out_core(int idx, hls::stream<C_t16> &fifo_C_drain_in, hls::stream<C_t16> &fifo_C_drain_out, hls::stream<C_t16> &fifo_C_drain_local_in){
    int p0 = idx; // module id

    for (int c0 = 0; c0 <= 255; c0 += 1) {
      // array_L2
      for (int c4 = 0; c4 <= 1; c4 += 1) {
        // array
        // io_L3
        for (int c6 = p0; c6 <= 1; c6 += 1) {
          // io_L2
          for (int c7 = 0; c7 <= 3; c7 += 1) {
            // io_L1
            // pe
            // access_coalesce
            for (int c9 = 0; c9 <= 15; c9 += 1) {
            #pragma HLS PIPELINE II=1
              C_t16 fifo_data;
              if (c6 == p0) {
                fifo_data = fifo_C_drain_local_in.read();
              } else {
                fifo_data = fifo_C_drain_in.read();
              }
              fifo_C_drain_out.write(fifo_data);
            }
          }
        }
      }
    }
}
/* Module Definition */

/* Module Definition */
void C_drain_IO_L2_out(int idx, hls::stream<C_t16> &fifo_C_drain_in, hls::stream<C_t16> &fifo_C_drain_out, hls::stream<C_t16> &fifo_C_drain_local_in)
{
    C_drain_IO_L2_out_core(idx, fifo_C_drain_in, fifo_C_drain_out, fifo_C_drain_local_in);
}
/* Module Definition */

/* Module Definition */
void C_drain_IO_L2_out_boundary_core(int idx, hls::stream<C_t16> &fifo_C_drain_out, hls::stream<C_t16> &fifo_C_drain_local_in){
    int p0 = idx; // module id

    for (int c0 = 0; c0 <= 255; c0 += 1) {
      // array_L2
      for (int c4 = 0; c4 <= 1; c4 += 1) {
        // array
        // io_L3
        for (int c6 = p0; c6 <= 1; c6 += 1) {
          // io_L2
          for (int c7 = 0; c7 <= 3; c7 += 1) {
            // io_L1
            // pe
            // access_coalesce
            for (int c9 = 0; c9 <= 15; c9 += 1) {
            #pragma HLS PIPELINE II=1
              C_t16 fifo_data;
              fifo_data = fifo_C_drain_local_in.read();
              fifo_C_drain_out.write(fifo_data);
            }
          }
        }
      }
    }
}
/* Module Definition */

/* Module Definition */
void C_drain_IO_L2_out_boundary(int idx, hls::stream<C_t16> &fifo_C_drain_out, hls::stream<C_t16> &fifo_C_drain_local_in)
{
    C_drain_IO_L2_out_boundary_core(idx, fifo_C_drain_out, fifo_C_drain_local_in);
}
/* Module Definition */

/* Module Definition */
void C_drain_IO_L3_out_core(C_t16 *C, hls::stream<C_t16> &fifo_C_drain_local_in){
    C_t16 local_C[4][32];
    #pragma HLS RESOURCE variable=local_C core=RAM_2P_BRAM

    for (int c0 = 0; c0 <= 255; c0 += 1) {
      // array_L2
      for (int c4 = 0; c4 <= 1; c4 += 1) {
        // array
        // io_L3
        for (int c6 = 0; c6 <= 1; c6 += 1) {
          // io_L2
          for (int c7 = 0; c7 <= 3; c7 += 1) {
          #pragma HLS DEPENDENCE variable=local_C inter false
            // io_L1
            // access_coalesce
            for (int c9 = 0; c9 <= 15; c9 += 1) {
            #pragma HLS PIPELINE II=1
              C_t16 fifo_data;
              fifo_data = fifo_C_drain_local_in.read();
              local_C[c7][16*c6 + c9] = fifo_data;
            }
          }
        }
        for (int c5 = 0; c5 <= 3; c5 += 1) {
        #pragma HLS DEPENDENCE variable=local_C inter false
          // access_coalesce
          for (int c6 = 0; c6 <= 31; c6 += 1) {
          #pragma HLS PIPELINE II=1
          {
            C_t16 fifo_data;
            fifo_data = local_C[c5][c6];
            C[256*c0 + 32*c4 + 64*c5 + c6] = fifo_data;
          }
          }
        }
      }
    }
}
/* Module Definition */

/* Module Definition */
void C_drain_IO_L3_out(C_t16 *C, hls::stream<C_t16> &fifo_C_drain_local_in)
{
    C_drain_IO_L3_out_core(dev_C, fifo_C_drain_local_in);
}
/* Module Definition */

extern "C" {
void kernel0(A_t16 *A, B_t16 *B, C_t16 *C_0, C_t16 *C_1, C_t16 *C_2)
{
#pragma HLS INTERFACE m_axi port=A offset=slave bundle=gmem_A
#pragma HLS INTERFACE m_axi port=B offset=slave bundle=gmem_B
#pragma HLS INTERFACE m_axi port=C_0 offset=slave bundle=gmem_C_0
#pragma HLS INTERFACE m_axi port=C_1 offset=slave bundle=gmem_C_1
#pragma HLS INTERFACE m_axi port=C_2 offset=slave bundle=gmem_C_2
#pragma HLS INTERFACE s_axilite port=A bundle=control
#pragma HLS INTERFACE s_axilite port=B bundle=control
#pragma HLS INTERFACE s_axilite port=C_0 bundle=control
#pragma HLS INTERFACE s_axilite port=C_1 bundle=control
#pragma HLS INTERFACE s_axilite port=C_2 bundle=control
#pragma HLS INTERFACE s_axilite port=return bundle=control

#pragma HLS DATAFLOW

    /* FIFO Declaration */
    /* A_IO_L2_in fifo */ hls::stream<A_t16> fifo_A_A_IO_L2_in_0;
    #pragma HLS STREAM variable=fifo_A_A_IO_L2_in_0 depth=2
    /* A_IO_L2_in fifo */ hls::stream<A_t16> fifo_A_A_IO_L2_in_1;
    #pragma HLS STREAM variable=fifo_A_A_IO_L2_in_1 depth=2
    /* A_IO_L2_in fifo */ hls::stream<A_t16> fifo_A_A_IO_L2_in_2;
    #pragma HLS STREAM variable=fifo_A_A_IO_L2_in_2 depth=2
    /* A_IO_L2_in fifo */ hls::stream<A_t16> fifo_A_A_IO_L2_in_3;
    #pragma HLS STREAM variable=fifo_A_A_IO_L2_in_3 depth=2
    /* A_IO_L2_in fifo */ hls::stream<A_t16> fifo_A_A_IO_L2_in_4;
    #pragma HLS STREAM variable=fifo_A_A_IO_L2_in_4 depth=2
    /* B_IO_L2_in fifo */ hls::stream<B_t16> fifo_B_B_IO_L2_in_0;
    #pragma HLS STREAM variable=fifo_B_B_IO_L2_in_0 depth=2
    /* B_IO_L2_in fifo */ hls::stream<B_t16> fifo_B_B_IO_L2_in_1;
    #pragma HLS STREAM variable=fifo_B_B_IO_L2_in_1 depth=2
    /* B_IO_L2_in fifo */ hls::stream<B_t16> fifo_B_B_IO_L2_in_2;
    #pragma HLS STREAM variable=fifo_B_B_IO_L2_in_2 depth=2
    /* C_IO_L2_in fifo */ hls::stream<C_t16> fifo_C_C_IO_L2_in_0;
    #pragma HLS STREAM variable=fifo_C_C_IO_L2_in_0 depth=2
    /* C_IO_L2_in fifo */ hls::stream<C_t16> fifo_C_C_IO_L2_in_1;
    #pragma HLS STREAM variable=fifo_C_C_IO_L2_in_1 depth=2
    /* C_IO_L2_in fifo */ hls::stream<C_t16> fifo_C_C_IO_L2_in_2;
    #pragma HLS STREAM variable=fifo_C_C_IO_L2_in_2 depth=2
    /* C_IO_L1_in fifo */ hls::stream<C_t16> fifo_C_C_IO_L1_in_0_0;
    #pragma HLS STREAM variable=fifo_C_C_IO_L1_in_0_0 depth=2
    /* C_IO_L1_in fifo */ hls::stream<C_t16> fifo_C_C_IO_L1_in_0_1;
    #pragma HLS STREAM variable=fifo_C_C_IO_L1_in_0_1 depth=2
    /* C_IO_L1_in fifo */ hls::stream<C_t16> fifo_C_C_IO_L1_in_0_2;
    #pragma HLS STREAM variable=fifo_C_C_IO_L1_in_0_2 depth=2
    /* C_IO_L1_in fifo */ hls::stream<C_t16> fifo_C_C_IO_L1_in_0_3;
    #pragma HLS STREAM variable=fifo_C_C_IO_L1_in_0_3 depth=2
    /* C_IO_L1_in fifo */ hls::stream<C_t16> fifo_C_C_IO_L1_in_0_4;
    #pragma HLS STREAM variable=fifo_C_C_IO_L1_in_0_4 depth=2
    /* C_IO_L1_in fifo */ hls::stream<C_t16> fifo_C_C_IO_L1_in_1_0;
    #pragma HLS STREAM variable=fifo_C_C_IO_L1_in_1_0 depth=2
    /* C_IO_L1_in fifo */ hls::stream<C_t16> fifo_C_C_IO_L1_in_1_1;
    #pragma HLS STREAM variable=fifo_C_C_IO_L1_in_1_1 depth=2
    /* C_IO_L1_in fifo */ hls::stream<C_t16> fifo_C_C_IO_L1_in_1_2;
    #pragma HLS STREAM variable=fifo_C_C_IO_L1_in_1_2 depth=2
    /* C_IO_L1_in fifo */ hls::stream<C_t16> fifo_C_C_IO_L1_in_1_3;
    #pragma HLS STREAM variable=fifo_C_C_IO_L1_in_1_3 depth=2
    /* C_IO_L1_in fifo */ hls::stream<C_t16> fifo_C_C_IO_L1_in_1_4;
    #pragma HLS STREAM variable=fifo_C_C_IO_L1_in_1_4 depth=2
    /* PE fifo */ hls::stream<A_t4> fifo_A_PE_0_0;
    #pragma HLS STREAM variable=fifo_A_PE_0_0 depth=2
    /* PE fifo */ hls::stream<A_t4> fifo_A_PE_0_1;
    #pragma HLS STREAM variable=fifo_A_PE_0_1 depth=2
    /* PE fifo */ hls::stream<A_t4> fifo_A_PE_0_2;
    #pragma HLS STREAM variable=fifo_A_PE_0_2 depth=2
    /* PE fifo */ hls::stream<A_t4> fifo_A_PE_1_0;
    #pragma HLS STREAM variable=fifo_A_PE_1_0 depth=2
    /* PE fifo */ hls::stream<A_t4> fifo_A_PE_1_1;
    #pragma HLS STREAM variable=fifo_A_PE_1_1 depth=2
    /* PE fifo */ hls::stream<A_t4> fifo_A_PE_1_2;
    #pragma HLS STREAM variable=fifo_A_PE_1_2 depth=2
    /* PE fifo */ hls::stream<A_t4> fifo_A_PE_2_0;
    #pragma HLS STREAM variable=fifo_A_PE_2_0 depth=2
    /* PE fifo */ hls::stream<A_t4> fifo_A_PE_2_1;
    #pragma HLS STREAM variable=fifo_A_PE_2_1 depth=2
    /* PE fifo */ hls::stream<A_t4> fifo_A_PE_2_2;
    #pragma HLS STREAM variable=fifo_A_PE_2_2 depth=2
    /* PE fifo */ hls::stream<A_t4> fifo_A_PE_3_0;
    #pragma HLS STREAM variable=fifo_A_PE_3_0 depth=2
    /* PE fifo */ hls::stream<A_t4> fifo_A_PE_3_1;
    #pragma HLS STREAM variable=fifo_A_PE_3_1 depth=2
    /* PE fifo */ hls::stream<A_t4> fifo_A_PE_3_2;
    #pragma HLS STREAM variable=fifo_A_PE_3_2 depth=2
    /* PE fifo */ hls::stream<B_t4> fifo_B_PE_0_0;
    #pragma HLS STREAM variable=fifo_B_PE_0_0 depth=2
    /* PE fifo */ hls::stream<B_t4> fifo_B_PE_1_0;
    #pragma HLS STREAM variable=fifo_B_PE_1_0 depth=2
    /* PE fifo */ hls::stream<B_t4> fifo_B_PE_2_0;
    #pragma HLS STREAM variable=fifo_B_PE_2_0 depth=2
    /* PE fifo */ hls::stream<B_t4> fifo_B_PE_3_0;
    #pragma HLS STREAM variable=fifo_B_PE_3_0 depth=2
    /* PE fifo */ hls::stream<B_t4> fifo_B_PE_4_0;
    #pragma HLS STREAM variable=fifo_B_PE_4_0 depth=2
    /* PE fifo */ hls::stream<B_t4> fifo_B_PE_0_1;
    #pragma HLS STREAM variable=fifo_B_PE_0_1 depth=2
    /* PE fifo */ hls::stream<B_t4> fifo_B_PE_1_1;
    #pragma HLS STREAM variable=fifo_B_PE_1_1 depth=2
    /* PE fifo */ hls::stream<B_t4> fifo_B_PE_2_1;
    #pragma HLS STREAM variable=fifo_B_PE_2_1 depth=2
    /* PE fifo */ hls::stream<B_t4> fifo_B_PE_3_1;
    #pragma HLS STREAM variable=fifo_B_PE_3_1 depth=2
    /* PE fifo */ hls::stream<B_t4> fifo_B_PE_4_1;
    #pragma HLS STREAM variable=fifo_B_PE_4_1 depth=2
    /* PE fifo */ hls::stream<C_t16> fifo_C_PE_in_0_0;
    #pragma HLS STREAM variable=fifo_C_PE_in_0_0 depth=2
    /* PE fifo */ hls::stream<C_t16> fifo_C_PE_out_0_0;
    #pragma HLS STREAM variable=fifo_C_PE_out_0_0 depth=2
    /* PE fifo */ hls::stream<C_t16> fifo_C_PE_in_1_0;
    #pragma HLS STREAM variable=fifo_C_PE_in_1_0 depth=2
    /* PE fifo */ hls::stream<C_t16> fifo_C_PE_out_1_0;
    #pragma HLS STREAM variable=fifo_C_PE_out_1_0 depth=2
    /* PE fifo */ hls::stream<C_t16> fifo_C_PE_in_2_0;
    #pragma HLS STREAM variable=fifo_C_PE_in_2_0 depth=2
    /* PE fifo */ hls::stream<C_t16> fifo_C_PE_out_2_0;
    #pragma HLS STREAM variable=fifo_C_PE_out_2_0 depth=2
    /* PE fifo */ hls::stream<C_t16> fifo_C_PE_in_3_0;
    #pragma HLS STREAM variable=fifo_C_PE_in_3_0 depth=2
    /* PE fifo */ hls::stream<C_t16> fifo_C_PE_out_3_0;
    #pragma HLS STREAM variable=fifo_C_PE_out_3_0 depth=2
    /* PE fifo */ hls::stream<C_t16> fifo_C_PE_in_4_0;
    #pragma HLS STREAM variable=fifo_C_PE_in_4_0 depth=2
    /* PE fifo */ hls::stream<C_t16> fifo_C_PE_out_4_0;
    #pragma HLS STREAM variable=fifo_C_PE_out_4_0 depth=2
    /* PE fifo */ hls::stream<C_t16> fifo_C_PE_in_0_1;
    #pragma HLS STREAM variable=fifo_C_PE_in_0_1 depth=2
    /* PE fifo */ hls::stream<C_t16> fifo_C_PE_out_0_1;
    #pragma HLS STREAM variable=fifo_C_PE_out_0_1 depth=2
    /* PE fifo */ hls::stream<C_t16> fifo_C_PE_in_1_1;
    #pragma HLS STREAM variable=fifo_C_PE_in_1_1 depth=2
    /* PE fifo */ hls::stream<C_t16> fifo_C_PE_out_1_1;
    #pragma HLS STREAM variable=fifo_C_PE_out_1_1 depth=2
    /* PE fifo */ hls::stream<C_t16> fifo_C_PE_in_2_1;
    #pragma HLS STREAM variable=fifo_C_PE_in_2_1 depth=2
    /* PE fifo */ hls::stream<C_t16> fifo_C_PE_out_2_1;
    #pragma HLS STREAM variable=fifo_C_PE_out_2_1 depth=2
    /* PE fifo */ hls::stream<C_t16> fifo_C_PE_in_3_1;
    #pragma HLS STREAM variable=fifo_C_PE_in_3_1 depth=2
    /* PE fifo */ hls::stream<C_t16> fifo_C_PE_out_3_1;
    #pragma HLS STREAM variable=fifo_C_PE_out_3_1 depth=2
    /* PE fifo */ hls::stream<C_t16> fifo_C_PE_in_4_1;
    #pragma HLS STREAM variable=fifo_C_PE_in_4_1 depth=2
    /* PE fifo */ hls::stream<C_t16> fifo_C_PE_out_4_1;
    #pragma HLS STREAM variable=fifo_C_PE_out_4_1 depth=2
    /* PE fifo */ hls::stream<float> fifo_C_drain_PE_0_0;
    #pragma HLS STREAM variable=fifo_C_drain_PE_0_0 depth=2
    /* PE fifo */ hls::stream<float> fifo_C_drain_PE_1_0;
    #pragma HLS STREAM variable=fifo_C_drain_PE_1_0 depth=2
    /* PE fifo */ hls::stream<float> fifo_C_drain_PE_2_0;
    #pragma HLS STREAM variable=fifo_C_drain_PE_2_0 depth=2
    /* PE fifo */ hls::stream<float> fifo_C_drain_PE_3_0;
    #pragma HLS STREAM variable=fifo_C_drain_PE_3_0 depth=2
    /* PE fifo */ hls::stream<float> fifo_C_drain_PE_0_1;
    #pragma HLS STREAM variable=fifo_C_drain_PE_0_1 depth=2
    /* PE fifo */ hls::stream<float> fifo_C_drain_PE_1_1;
    #pragma HLS STREAM variable=fifo_C_drain_PE_1_1 depth=2
    /* PE fifo */ hls::stream<float> fifo_C_drain_PE_2_1;
    #pragma HLS STREAM variable=fifo_C_drain_PE_2_1 depth=2
    /* PE fifo */ hls::stream<float> fifo_C_drain_PE_3_1;
    #pragma HLS STREAM variable=fifo_C_drain_PE_3_1 depth=2
    /* C_IO_L1_out fifo */ hls::stream<C_t16> fifo_C_C_IO_L1_out_0_0;
    #pragma HLS STREAM variable=fifo_C_C_IO_L1_out_0_0 depth=2
    /* C_IO_L1_out fifo */ hls::stream<C_t16> fifo_C_C_IO_L1_out_0_1;
    #pragma HLS STREAM variable=fifo_C_C_IO_L1_out_0_1 depth=2
    /* C_IO_L1_out fifo */ hls::stream<C_t16> fifo_C_C_IO_L1_out_0_2;
    #pragma HLS STREAM variable=fifo_C_C_IO_L1_out_0_2 depth=2
    /* C_IO_L1_out fifo */ hls::stream<C_t16> fifo_C_C_IO_L1_out_0_3;
    #pragma HLS STREAM variable=fifo_C_C_IO_L1_out_0_3 depth=2
    /* C_IO_L1_out fifo */ hls::stream<C_t16> fifo_C_C_IO_L1_out_0_4;
    #pragma HLS STREAM variable=fifo_C_C_IO_L1_out_0_4 depth=2
    /* C_IO_L1_out fifo */ hls::stream<C_t16> fifo_C_C_IO_L1_out_1_0;
    #pragma HLS STREAM variable=fifo_C_C_IO_L1_out_1_0 depth=2
    /* C_IO_L1_out fifo */ hls::stream<C_t16> fifo_C_C_IO_L1_out_1_1;
    #pragma HLS STREAM variable=fifo_C_C_IO_L1_out_1_1 depth=2
    /* C_IO_L1_out fifo */ hls::stream<C_t16> fifo_C_C_IO_L1_out_1_2;
    #pragma HLS STREAM variable=fifo_C_C_IO_L1_out_1_2 depth=2
    /* C_IO_L1_out fifo */ hls::stream<C_t16> fifo_C_C_IO_L1_out_1_3;
    #pragma HLS STREAM variable=fifo_C_C_IO_L1_out_1_3 depth=2
    /* C_IO_L1_out fifo */ hls::stream<C_t16> fifo_C_C_IO_L1_out_1_4;
    #pragma HLS STREAM variable=fifo_C_C_IO_L1_out_1_4 depth=2
    /* C_IO_L2_out fifo */ hls::stream<C_t16> fifo_C_C_IO_L2_out_0;
    #pragma HLS STREAM variable=fifo_C_C_IO_L2_out_0 depth=2
    /* C_IO_L2_out fifo */ hls::stream<C_t16> fifo_C_C_IO_L2_out_1;
    #pragma HLS STREAM variable=fifo_C_C_IO_L2_out_1 depth=2
    /* C_IO_L2_out fifo */ hls::stream<C_t16> fifo_C_C_IO_L2_out_2;
    #pragma HLS STREAM variable=fifo_C_C_IO_L2_out_2 depth=2
    /* C_drain_IO_L1_out fifo */ hls::stream<C_t16> fifo_C_drain_C_drain_IO_L1_out_0_0;
    #pragma HLS STREAM variable=fifo_C_drain_C_drain_IO_L1_out_0_0 depth=2
    /* C_drain_IO_L1_out fifo */ hls::stream<C_t16> fifo_C_drain_C_drain_IO_L1_out_0_1;
    #pragma HLS STREAM variable=fifo_C_drain_C_drain_IO_L1_out_0_1 depth=2
    /* C_drain_IO_L1_out fifo */ hls::stream<C_t16> fifo_C_drain_C_drain_IO_L1_out_0_2;
    #pragma HLS STREAM variable=fifo_C_drain_C_drain_IO_L1_out_0_2 depth=2
    /* C_drain_IO_L1_out fifo */ hls::stream<C_t16> fifo_C_drain_C_drain_IO_L1_out_0_3;
    #pragma HLS STREAM variable=fifo_C_drain_C_drain_IO_L1_out_0_3 depth=2
    /* C_drain_IO_L1_out fifo */ hls::stream<C_t16> fifo_C_drain_C_drain_IO_L1_out_0_4;
    #pragma HLS STREAM variable=fifo_C_drain_C_drain_IO_L1_out_0_4 depth=2
    /* C_drain_IO_L1_out fifo */ hls::stream<C_t16> fifo_C_drain_C_drain_IO_L1_out_1_0;
    #pragma HLS STREAM variable=fifo_C_drain_C_drain_IO_L1_out_1_0 depth=2
    /* C_drain_IO_L1_out fifo */ hls::stream<C_t16> fifo_C_drain_C_drain_IO_L1_out_1_1;
    #pragma HLS STREAM variable=fifo_C_drain_C_drain_IO_L1_out_1_1 depth=2
    /* C_drain_IO_L1_out fifo */ hls::stream<C_t16> fifo_C_drain_C_drain_IO_L1_out_1_2;
    #pragma HLS STREAM variable=fifo_C_drain_C_drain_IO_L1_out_1_2 depth=2
    /* C_drain_IO_L1_out fifo */ hls::stream<C_t16> fifo_C_drain_C_drain_IO_L1_out_1_3;
    #pragma HLS STREAM variable=fifo_C_drain_C_drain_IO_L1_out_1_3 depth=2
    /* C_drain_IO_L1_out fifo */ hls::stream<C_t16> fifo_C_drain_C_drain_IO_L1_out_1_4;
    #pragma HLS STREAM variable=fifo_C_drain_C_drain_IO_L1_out_1_4 depth=2
    /* C_drain_IO_L2_out fifo */ hls::stream<C_t16> fifo_C_drain_C_drain_IO_L2_out_0;
    #pragma HLS STREAM variable=fifo_C_drain_C_drain_IO_L2_out_0 depth=2
    /* C_drain_IO_L2_out fifo */ hls::stream<C_t16> fifo_C_drain_C_drain_IO_L2_out_1;
    #pragma HLS STREAM variable=fifo_C_drain_C_drain_IO_L2_out_1 depth=2
    /* C_drain_IO_L2_out fifo */ hls::stream<C_t16> fifo_C_drain_C_drain_IO_L2_out_2;
    #pragma HLS STREAM variable=fifo_C_drain_C_drain_IO_L2_out_2 depth=2
    /* FIFO Declaration */

    /* Module Call */
    A_IO_L3_in(
        /* array */ A,
        /* fifo */ fifo_A_A_IO_L2_in_0
    );
    /* Module Call */

    /* Module Call */
    A_IO_L2_in(
        /* module id */ 0,
        /* fifo */ fifo_A_A_IO_L2_in_0,
        /* fifo */ fifo_A_A_IO_L2_in_1,
        /* fifo */ fifo_A_PE_0_0
    );
    /* Module Call */

    /* Module Call */
    A_IO_L2_in(
        /* module id */ 1,
        /* fifo */ fifo_A_A_IO_L2_in_1,
        /* fifo */ fifo_A_A_IO_L2_in_2,
        /* fifo */ fifo_A_PE_1_0
    );
    /* Module Call */

    /* Module Call */
    A_IO_L2_in(
        /* module id */ 2,
        /* fifo */ fifo_A_A_IO_L2_in_2,
        /* fifo */ fifo_A_A_IO_L2_in_3,
        /* fifo */ fifo_A_PE_2_0
    );
    /* Module Call */

    /* Module Call */
    A_IO_L2_in_boundary(
        /* module id */ 3,
        /* fifo */ fifo_A_A_IO_L2_in_3,
        /* fifo */ fifo_A_PE_3_0
    );
    /* Module Call */

    /* Module Call */
    B_IO_L3_in(
        /* array */ B,
        /* fifo */ fifo_B_B_IO_L2_in_0
    );
    /* Module Call */

    /* Module Call */
    B_IO_L2_in(
        /* module id */ 0,
        /* fifo */ fifo_B_B_IO_L2_in_0,
        /* fifo */ fifo_B_B_IO_L2_in_1,
        /* fifo */ fifo_B_PE_0_0
    );
    /* Module Call */

    /* Module Call */
    B_IO_L2_in_boundary(
        /* module id */ 1,
        /* fifo */ fifo_B_B_IO_L2_in_1,
        /* fifo */ fifo_B_PE_0_1
    );
    /* Module Call */

    /* Module Call */
    C_IO_L3_in(
        /* array */ C_0,
        /* fifo */ fifo_C_C_IO_L2_in_0
    );
    /* Module Call */

    /* Module Call */
    C_IO_L2_in(
        /* module id */ 0,
        /* fifo */ fifo_C_C_IO_L2_in_0,
        /* fifo */ fifo_C_C_IO_L2_in_1,
        /* fifo */ fifo_C_C_IO_L1_in_0_0
    );
    /* Module Call */

    /* Module Call */
    C_IO_L2_in_boundary(
        /* module id */ 1,
        /* fifo */ fifo_C_C_IO_L2_in_1,
        /* fifo */ fifo_C_C_IO_L1_in_1_0
    );
    /* Module Call */

    /* Module Call */
    C_IO_L1_in(
        /* module id */ 0,
        /* module id */ 0,
        /* fifo */ fifo_C_C_IO_L1_in_0_0,
        /* fifo */ fifo_C_C_IO_L1_in_0_1,
        /* fifo */ fifo_C_PE_in_0_0
    );
    /* Module Call */

    /* Module Call */
    C_IO_L1_in(
        /* module id */ 0,
        /* module id */ 1,
        /* fifo */ fifo_C_C_IO_L1_in_0_1,
        /* fifo */ fifo_C_C_IO_L1_in_0_2,
        /* fifo */ fifo_C_PE_in_1_0
    );
    /* Module Call */

    /* Module Call */
    C_IO_L1_in(
        /* module id */ 0,
        /* module id */ 2,
        /* fifo */ fifo_C_C_IO_L1_in_0_2,
        /* fifo */ fifo_C_C_IO_L1_in_0_3,
        /* fifo */ fifo_C_PE_in_2_0
    );
    /* Module Call */

    /* Module Call */
    C_IO_L1_in_boundary(
        /* module id */ 0,
        /* module id */ 3,
        /* fifo */ fifo_C_C_IO_L1_in_0_3,
        /* fifo */ fifo_C_PE_in_3_0
    );
    /* Module Call */

    /* Module Call */
    C_IO_L1_in(
        /* module id */ 1,
        /* module id */ 0,
        /* fifo */ fifo_C_C_IO_L1_in_1_0,
        /* fifo */ fifo_C_C_IO_L1_in_1_1,
        /* fifo */ fifo_C_PE_in_0_1
    );
    /* Module Call */

    /* Module Call */
    C_IO_L1_in(
        /* module id */ 1,
        /* module id */ 1,
        /* fifo */ fifo_C_C_IO_L1_in_1_1,
        /* fifo */ fifo_C_C_IO_L1_in_1_2,
        /* fifo */ fifo_C_PE_in_1_1
    );
    /* Module Call */

    /* Module Call */
    C_IO_L1_in(
        /* module id */ 1,
        /* module id */ 2,
        /* fifo */ fifo_C_C_IO_L1_in_1_2,
        /* fifo */ fifo_C_C_IO_L1_in_1_3,
        /* fifo */ fifo_C_PE_in_2_1
    );
    /* Module Call */

    /* Module Call */
    C_IO_L1_in_boundary(
        /* module id */ 1,
        /* module id */ 3,
        /* fifo */ fifo_C_C_IO_L1_in_1_3,
        /* fifo */ fifo_C_PE_in_3_1
    );
    /* Module Call */

    /* Module Call */
    PE(
        /* module id */ 0,
        /* module id */ 0,
        /* fifo */ fifo_A_PE_0_0,
        /* fifo */ fifo_A_PE_0_1,
        /* fifo */ fifo_B_PE_0_0,
        /* fifo */ fifo_B_PE_1_0,
        /* fifo */ fifo_C_PE_in_0_0,
        /* fifo */ fifo_C_PE_out_0_0,
        /* fifo */ fifo_C_drain_PE_0_0
    );
    /* Module Call */

    /* Module Call */
    PE(
        /* module id */ 0,
        /* module id */ 1,
        /* fifo */ fifo_A_PE_0_1,
        /* fifo */ fifo_A_PE_0_2,
        /* fifo */ fifo_B_PE_0_1,
        /* fifo */ fifo_B_PE_1_1,
        /* fifo */ fifo_C_PE_in_0_1,
        /* fifo */ fifo_C_PE_out_0_1,
        /* fifo */ fifo_C_drain_PE_0_1
    );
    /* Module Call */

    /* Module Call */
    PE(
        /* module id */ 1,
        /* module id */ 0,
        /* fifo */ fifo_A_PE_1_0,
        /* fifo */ fifo_A_PE_1_1,
        /* fifo */ fifo_B_PE_1_0,
        /* fifo */ fifo_B_PE_2_0,
        /* fifo */ fifo_C_PE_in_1_0,
        /* fifo */ fifo_C_PE_out_1_0,
        /* fifo */ fifo_C_drain_PE_1_0
    );
    /* Module Call */

    /* Module Call */
    PE(
        /* module id */ 1,
        /* module id */ 1,
        /* fifo */ fifo_A_PE_1_1,
        /* fifo */ fifo_A_PE_1_2,
        /* fifo */ fifo_B_PE_1_1,
        /* fifo */ fifo_B_PE_2_1,
        /* fifo */ fifo_C_PE_in_1_1,
        /* fifo */ fifo_C_PE_out_1_1,
        /* fifo */ fifo_C_drain_PE_1_1
    );
    /* Module Call */

    /* Module Call */
    PE(
        /* module id */ 2,
        /* module id */ 0,
        /* fifo */ fifo_A_PE_2_0,
        /* fifo */ fifo_A_PE_2_1,
        /* fifo */ fifo_B_PE_2_0,
        /* fifo */ fifo_B_PE_3_0,
        /* fifo */ fifo_C_PE_in_2_0,
        /* fifo */ fifo_C_PE_out_2_0,
        /* fifo */ fifo_C_drain_PE_2_0
    );
    /* Module Call */

    /* Module Call */
    PE(
        /* module id */ 2,
        /* module id */ 1,
        /* fifo */ fifo_A_PE_2_1,
        /* fifo */ fifo_A_PE_2_2,
        /* fifo */ fifo_B_PE_2_1,
        /* fifo */ fifo_B_PE_3_1,
        /* fifo */ fifo_C_PE_in_2_1,
        /* fifo */ fifo_C_PE_out_2_1,
        /* fifo */ fifo_C_drain_PE_2_1
    );
    /* Module Call */

    /* Module Call */
    PE(
        /* module id */ 3,
        /* module id */ 0,
        /* fifo */ fifo_A_PE_3_0,
        /* fifo */ fifo_A_PE_3_1,
        /* fifo */ fifo_B_PE_3_0,
        /* fifo */ fifo_B_PE_4_0,
        /* fifo */ fifo_C_PE_in_3_0,
        /* fifo */ fifo_C_PE_out_3_0,
        /* fifo */ fifo_C_drain_PE_3_0
    );
    /* Module Call */

    /* Module Call */
    PE(
        /* module id */ 3,
        /* module id */ 1,
        /* fifo */ fifo_A_PE_3_1,
        /* fifo */ fifo_A_PE_3_2,
        /* fifo */ fifo_B_PE_3_1,
        /* fifo */ fifo_B_PE_4_1,
        /* fifo */ fifo_C_PE_in_3_1,
        /* fifo */ fifo_C_PE_out_3_1,
        /* fifo */ fifo_C_drain_PE_3_1
    );
    /* Module Call */

    /* Module Call */
    A_PE_dummy(
        /* module id */ 0,
        /* module id */ 1,
        /* fifo */ fifo_A_PE_0_2
    );
    /* Module Call */

    /* Module Call */
    A_PE_dummy(
        /* module id */ 1,
        /* module id */ 1,
        /* fifo */ fifo_A_PE_1_2
    );
    /* Module Call */

    /* Module Call */
    A_PE_dummy(
        /* module id */ 2,
        /* module id */ 1,
        /* fifo */ fifo_A_PE_2_2
    );
    /* Module Call */

    /* Module Call */
    A_PE_dummy(
        /* module id */ 3,
        /* module id */ 1,
        /* fifo */ fifo_A_PE_3_2
    );
    /* Module Call */

    /* Module Call */
    B_PE_dummy(
        /* module id */ 3,
        /* module id */ 0,
        /* fifo */ fifo_B_PE_4_0
    );
    /* Module Call */

    /* Module Call */
    B_PE_dummy(
        /* module id */ 3,
        /* module id */ 1,
        /* fifo */ fifo_B_PE_4_1
    );
    /* Module Call */

    /* Module Call */
    C_IO_L1_out_boundary(
        /* module id */ 0,
        /* module id */ 3,
        /* fifo */ fifo_C_C_IO_L1_out_0_3,
        /* fifo */ fifo_C_PE_out_3_0
    );
    /* Module Call */

    /* Module Call */
    C_IO_L1_out(
        /* module id */ 0,
        /* module id */ 2,
        /* fifo */ fifo_C_C_IO_L1_out_0_3,
        /* fifo */ fifo_C_C_IO_L1_out_0_2,
        /* fifo */ fifo_C_PE_out_2_0
    );
    /* Module Call */

    /* Module Call */
    C_IO_L1_out(
        /* module id */ 0,
        /* module id */ 1,
        /* fifo */ fifo_C_C_IO_L1_out_0_2,
        /* fifo */ fifo_C_C_IO_L1_out_0_1,
        /* fifo */ fifo_C_PE_out_1_0
    );
    /* Module Call */

    /* Module Call */
    C_IO_L1_out(
        /* module id */ 0,
        /* module id */ 0,
        /* fifo */ fifo_C_C_IO_L1_out_0_1,
        /* fifo */ fifo_C_C_IO_L1_out_0_0,
        /* fifo */ fifo_C_PE_out_0_0
    );
    /* Module Call */

    /* Module Call */
    C_IO_L1_out_boundary(
        /* module id */ 1,
        /* module id */ 3,
        /* fifo */ fifo_C_C_IO_L1_out_1_3,
        /* fifo */ fifo_C_PE_out_3_1
    );
    /* Module Call */

    /* Module Call */
    C_IO_L1_out(
        /* module id */ 1,
        /* module id */ 2,
        /* fifo */ fifo_C_C_IO_L1_out_1_3,
        /* fifo */ fifo_C_C_IO_L1_out_1_2,
        /* fifo */ fifo_C_PE_out_2_1
    );
    /* Module Call */

    /* Module Call */
    C_IO_L1_out(
        /* module id */ 1,
        /* module id */ 1,
        /* fifo */ fifo_C_C_IO_L1_out_1_2,
        /* fifo */ fifo_C_C_IO_L1_out_1_1,
        /* fifo */ fifo_C_PE_out_1_1
    );
    /* Module Call */

    /* Module Call */
    C_IO_L1_out(
        /* module id */ 1,
        /* module id */ 0,
        /* fifo */ fifo_C_C_IO_L1_out_1_1,
        /* fifo */ fifo_C_C_IO_L1_out_1_0,
        /* fifo */ fifo_C_PE_out_0_1
    );
    /* Module Call */

    /* Module Call */
    C_IO_L2_out_boundary(
        /* module id */ 1,
        /* fifo */ fifo_C_C_IO_L2_out_1,
        /* fifo */ fifo_C_C_IO_L1_out_1_0
    );
    /* Module Call */

    /* Module Call */
    C_IO_L2_out(
        /* module id */ 0,
        /* fifo */ fifo_C_C_IO_L2_out_1,
        /* fifo */ fifo_C_C_IO_L2_out_0,
        /* fifo */ fifo_C_C_IO_L1_out_0_0
    );
    /* Module Call */

    /* Module Call */
    C_IO_L3_out(
        /* array */ C_1,
        /* fifo */ fifo_C_C_IO_L2_out_0
    );
    /* Module Call */

    /* Module Call */
    C_drain_IO_L1_out_boundary(
        /* module id */ 0,
        /* module id */ 3,
        /* fifo */ fifo_C_drain_C_drain_IO_L1_out_0_3,
        /* fifo */ fifo_C_drain_PE_3_0
    );
    /* Module Call */

    /* Module Call */
    C_drain_IO_L1_out(
        /* module id */ 0,
        /* module id */ 2,
        /* fifo */ fifo_C_drain_C_drain_IO_L1_out_0_3,
        /* fifo */ fifo_C_drain_C_drain_IO_L1_out_0_2,
        /* fifo */ fifo_C_drain_PE_2_0
    );
    /* Module Call */

    /* Module Call */
    C_drain_IO_L1_out(
        /* module id */ 0,
        /* module id */ 1,
        /* fifo */ fifo_C_drain_C_drain_IO_L1_out_0_2,
        /* fifo */ fifo_C_drain_C_drain_IO_L1_out_0_1,
        /* fifo */ fifo_C_drain_PE_1_0
    );
    /* Module Call */

    /* Module Call */
    C_drain_IO_L1_out(
        /* module id */ 0,
        /* module id */ 0,
        /* fifo */ fifo_C_drain_C_drain_IO_L1_out_0_1,
        /* fifo */ fifo_C_drain_C_drain_IO_L1_out_0_0,
        /* fifo */ fifo_C_drain_PE_0_0
    );
    /* Module Call */

    /* Module Call */
    C_drain_IO_L1_out_boundary(
        /* module id */ 1,
        /* module id */ 3,
        /* fifo */ fifo_C_drain_C_drain_IO_L1_out_1_3,
        /* fifo */ fifo_C_drain_PE_3_1
    );
    /* Module Call */

    /* Module Call */
    C_drain_IO_L1_out(
        /* module id */ 1,
        /* module id */ 2,
        /* fifo */ fifo_C_drain_C_drain_IO_L1_out_1_3,
        /* fifo */ fifo_C_drain_C_drain_IO_L1_out_1_2,
        /* fifo */ fifo_C_drain_PE_2_1
    );
    /* Module Call */

    /* Module Call */
    C_drain_IO_L1_out(
        /* module id */ 1,
        /* module id */ 1,
        /* fifo */ fifo_C_drain_C_drain_IO_L1_out_1_2,
        /* fifo */ fifo_C_drain_C_drain_IO_L1_out_1_1,
        /* fifo */ fifo_C_drain_PE_1_1
    );
    /* Module Call */

    /* Module Call */
    C_drain_IO_L1_out(
        /* module id */ 1,
        /* module id */ 0,
        /* fifo */ fifo_C_drain_C_drain_IO_L1_out_1_1,
        /* fifo */ fifo_C_drain_C_drain_IO_L1_out_1_0,
        /* fifo */ fifo_C_drain_PE_0_1
    );
    /* Module Call */

    /* Module Call */
    C_drain_IO_L2_out_boundary(
        /* module id */ 1,
        /* fifo */ fifo_C_drain_C_drain_IO_L2_out_1,
        /* fifo */ fifo_C_drain_C_drain_IO_L1_out_1_0
    );
    /* Module Call */

    /* Module Call */
    C_drain_IO_L2_out(
        /* module id */ 0,
        /* fifo */ fifo_C_drain_C_drain_IO_L2_out_1,
        /* fifo */ fifo_C_drain_C_drain_IO_L2_out_0,
        /* fifo */ fifo_C_drain_C_drain_IO_L1_out_0_0
    );
    /* Module Call */

    /* Module Call */
    C_drain_IO_L3_out(
        /* array */ C_2,
        /* fifo */ fifo_C_drain_C_drain_IO_L2_out_0
    );
    /* Module Call */

}
}

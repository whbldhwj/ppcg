// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module A_IO_L3_in (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        m_axi_A_V_AWVALID,
        m_axi_A_V_AWREADY,
        m_axi_A_V_AWADDR,
        m_axi_A_V_AWID,
        m_axi_A_V_AWLEN,
        m_axi_A_V_AWSIZE,
        m_axi_A_V_AWBURST,
        m_axi_A_V_AWLOCK,
        m_axi_A_V_AWCACHE,
        m_axi_A_V_AWPROT,
        m_axi_A_V_AWQOS,
        m_axi_A_V_AWREGION,
        m_axi_A_V_AWUSER,
        m_axi_A_V_WVALID,
        m_axi_A_V_WREADY,
        m_axi_A_V_WDATA,
        m_axi_A_V_WSTRB,
        m_axi_A_V_WLAST,
        m_axi_A_V_WID,
        m_axi_A_V_WUSER,
        m_axi_A_V_ARVALID,
        m_axi_A_V_ARREADY,
        m_axi_A_V_ARADDR,
        m_axi_A_V_ARID,
        m_axi_A_V_ARLEN,
        m_axi_A_V_ARSIZE,
        m_axi_A_V_ARBURST,
        m_axi_A_V_ARLOCK,
        m_axi_A_V_ARCACHE,
        m_axi_A_V_ARPROT,
        m_axi_A_V_ARQOS,
        m_axi_A_V_ARREGION,
        m_axi_A_V_ARUSER,
        m_axi_A_V_RVALID,
        m_axi_A_V_RREADY,
        m_axi_A_V_RDATA,
        m_axi_A_V_RLAST,
        m_axi_A_V_RID,
        m_axi_A_V_RUSER,
        m_axi_A_V_RRESP,
        m_axi_A_V_BVALID,
        m_axi_A_V_BREADY,
        m_axi_A_V_BRESP,
        m_axi_A_V_BID,
        m_axi_A_V_BUSER,
        A_V_offset_dout,
        A_V_offset_empty_n,
        A_V_offset_read,
        fifo_A_local_out_V_V_din,
        fifo_A_local_out_V_V_full_n,
        fifo_A_local_out_V_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state12 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
output   m_axi_A_V_AWVALID;
input   m_axi_A_V_AWREADY;
output  [31:0] m_axi_A_V_AWADDR;
output  [0:0] m_axi_A_V_AWID;
output  [31:0] m_axi_A_V_AWLEN;
output  [2:0] m_axi_A_V_AWSIZE;
output  [1:0] m_axi_A_V_AWBURST;
output  [1:0] m_axi_A_V_AWLOCK;
output  [3:0] m_axi_A_V_AWCACHE;
output  [2:0] m_axi_A_V_AWPROT;
output  [3:0] m_axi_A_V_AWQOS;
output  [3:0] m_axi_A_V_AWREGION;
output  [0:0] m_axi_A_V_AWUSER;
output   m_axi_A_V_WVALID;
input   m_axi_A_V_WREADY;
output  [127:0] m_axi_A_V_WDATA;
output  [15:0] m_axi_A_V_WSTRB;
output   m_axi_A_V_WLAST;
output  [0:0] m_axi_A_V_WID;
output  [0:0] m_axi_A_V_WUSER;
output   m_axi_A_V_ARVALID;
input   m_axi_A_V_ARREADY;
output  [31:0] m_axi_A_V_ARADDR;
output  [0:0] m_axi_A_V_ARID;
output  [31:0] m_axi_A_V_ARLEN;
output  [2:0] m_axi_A_V_ARSIZE;
output  [1:0] m_axi_A_V_ARBURST;
output  [1:0] m_axi_A_V_ARLOCK;
output  [3:0] m_axi_A_V_ARCACHE;
output  [2:0] m_axi_A_V_ARPROT;
output  [3:0] m_axi_A_V_ARQOS;
output  [3:0] m_axi_A_V_ARREGION;
output  [0:0] m_axi_A_V_ARUSER;
input   m_axi_A_V_RVALID;
output   m_axi_A_V_RREADY;
input  [127:0] m_axi_A_V_RDATA;
input   m_axi_A_V_RLAST;
input  [0:0] m_axi_A_V_RID;
input  [0:0] m_axi_A_V_RUSER;
input  [1:0] m_axi_A_V_RRESP;
input   m_axi_A_V_BVALID;
output   m_axi_A_V_BREADY;
input  [1:0] m_axi_A_V_BRESP;
input  [0:0] m_axi_A_V_BID;
input  [0:0] m_axi_A_V_BUSER;
input  [31:0] A_V_offset_dout;
input   A_V_offset_empty_n;
output   A_V_offset_read;
output  [127:0] fifo_A_local_out_V_V_din;
input   fifo_A_local_out_V_V_full_n;
output   fifo_A_local_out_V_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg m_axi_A_V_ARVALID;
reg m_axi_A_V_RREADY;
reg A_V_offset_read;
reg fifo_A_local_out_V_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    A_V_blk_n_AR;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln6_reg_637;
reg    A_V_blk_n_R;
reg    ap_enable_reg_pp0_iter8;
reg   [0:0] icmp_ln6_reg_637_pp0_iter7_reg;
reg    A_V_offset_blk_n;
reg    fifo_A_local_out_V_V_blk_n;
reg    ap_enable_reg_pp0_iter9;
reg   [0:0] icmp_ln6_reg_637_pp0_iter8_reg;
reg   [5:0] indvar_flatten85_i_reg_137;
reg   [1:0] c0_0_i_reg_148;
reg   [5:0] indvar_flatten47_i_reg_159;
reg   [4:0] indvar_flatten17_i_reg_170;
reg   [1:0] c2_0_i_reg_181;
reg   [3:0] indvar_flatten_i_reg_192;
reg   [1:0] c3_0_i_reg_203;
reg   [1:0] c4_0_i_reg_214;
wire   [28:0] zext_ln6_fu_235_p1;
reg   [28:0] zext_ln6_reg_632;
reg    ap_block_state1;
wire   [0:0] icmp_ln6_fu_257_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state3_io;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
reg    ap_block_state10_pp0_stage0_iter8;
reg    ap_block_state11_pp0_stage0_iter9;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln6_reg_637_pp0_iter1_reg;
reg   [0:0] icmp_ln6_reg_637_pp0_iter2_reg;
reg   [0:0] icmp_ln6_reg_637_pp0_iter3_reg;
reg   [0:0] icmp_ln6_reg_637_pp0_iter4_reg;
reg   [0:0] icmp_ln6_reg_637_pp0_iter5_reg;
reg   [0:0] icmp_ln6_reg_637_pp0_iter6_reg;
wire   [5:0] add_ln6_fu_263_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [1:0] select_ln6_fu_343_p3;
reg   [1:0] select_ln6_reg_646;
wire   [1:0] select_ln8_2_fu_459_p3;
wire   [1:0] select_ln11_2_fu_515_p3;
wire   [28:0] add_ln321_fu_569_p2;
reg   [28:0] add_ln321_reg_661;
wire   [1:0] c4_fu_574_p2;
wire   [3:0] select_ln11_4_fu_586_p3;
wire   [4:0] select_ln8_3_fu_600_p3;
wire   [5:0] select_ln7_1_fu_614_p3;
reg   [127:0] fifo_data_V_reg_692;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg   [1:0] ap_phi_mux_c0_0_i_phi_fu_152_p4;
wire   [63:0] zext_ln321_3_fu_622_p1;
reg    ap_block_pp0_stage0_01001;
wire   [27:0] tmp_fu_225_p4;
wire   [0:0] trunc_ln17_1_fu_243_p1;
wire   [0:0] trunc_ln17_fu_239_p1;
wire   [1:0] add_ln6_1_fu_269_p2;
wire   [0:0] trunc_ln17_2_fu_281_p1;
wire   [0:0] icmp_ln7_fu_275_p2;
wire   [2:0] or_ln_mid_i_fu_285_p3;
wire   [2:0] or_ln_i_fu_247_p4;
wire   [0:0] icmp_ln13_fu_307_p2;
wire   [0:0] xor_ln7_fu_301_p2;
wire   [0:0] icmp_ln11_fu_319_p2;
wire   [0:0] icmp_ln8_fu_331_p2;
wire   [0:0] and_ln7_2_fu_337_p2;
wire   [0:0] or_ln8_fu_351_p2;
wire   [0:0] trunc_ln17_3_fu_365_p1;
wire   [2:0] or_ln_mid4_i_fu_369_p3;
wire   [2:0] select_ln7_fu_293_p3;
wire   [0:0] xor_ln8_fu_385_p2;
wire   [0:0] and_ln7_fu_313_p2;
wire   [0:0] or_ln8_1_fu_391_p2;
wire   [0:0] and_ln7_1_fu_325_p2;
wire   [1:0] select_ln8_fu_357_p3;
wire   [0:0] and_ln8_1_fu_403_p2;
wire   [0:0] or_ln11_fu_415_p2;
wire   [0:0] or_ln11_1_fu_421_p2;
wire   [1:0] add_ln8_fu_409_p2;
wire   [2:0] select_ln8_1_fu_377_p3;
wire   [0:0] and_ln8_fu_397_p2;
wire   [0:0] xor_ln11_fu_447_p2;
wire   [1:0] select_ln11_fu_427_p3;
wire   [0:0] and_ln11_fu_453_p2;
wire   [0:0] or_ln17_fu_473_p2;
wire   [0:0] or_ln17_1_fu_479_p2;
wire   [1:0] add_ln11_fu_467_p2;
wire   [0:0] trunc_ln17_5_fu_493_p1;
wire   [2:0] or_ln_mid1_i_fu_497_p4;
wire   [2:0] select_ln11_1_fu_439_p3;
wire   [1:0] select_ln17_fu_485_p3;
wire   [2:0] select_ln17_1_fu_507_p3;
wire   [2:0] zext_ln17_fu_523_p1;
wire   [0:0] trunc_ln17_6_fu_539_p1;
wire   [0:0] xor_ln8_1_fu_533_p2;
wire   [0:0] trunc_ln17_4_fu_435_p1;
wire   [0:0] and_ln8_2_fu_543_p2;
wire   [2:0] add_ln17_fu_527_p2;
wire   [0:0] select_ln11_3_fu_549_p3;
wire   [3:0] trunc_ln_i_fu_557_p3;
wire   [28:0] zext_ln321_fu_565_p1;
wire   [3:0] add_ln11_1_fu_580_p2;
wire   [4:0] add_ln8_1_fu_594_p2;
wire   [5:0] add_ln7_fu_608_p2;
wire    ap_CS_fsm_state12;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((1'b0 == A_V_offset_empty_n) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end else if ((~((1'b0 == A_V_offset_empty_n) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter9 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_reg_637 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        c0_0_i_reg_148 <= select_ln6_reg_646;
    end else if ((~((1'b0 == A_V_offset_empty_n) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        c0_0_i_reg_148 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_fu_257_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        c2_0_i_reg_181 <= select_ln8_2_fu_459_p3;
    end else if ((~((1'b0 == A_V_offset_empty_n) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        c2_0_i_reg_181 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_fu_257_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        c3_0_i_reg_203 <= select_ln11_2_fu_515_p3;
    end else if ((~((1'b0 == A_V_offset_empty_n) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        c3_0_i_reg_203 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_fu_257_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        c4_0_i_reg_214 <= c4_fu_574_p2;
    end else if ((~((1'b0 == A_V_offset_empty_n) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        c4_0_i_reg_214 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_fu_257_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten17_i_reg_170 <= select_ln8_3_fu_600_p3;
    end else if ((~((1'b0 == A_V_offset_empty_n) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten17_i_reg_170 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_fu_257_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten47_i_reg_159 <= select_ln7_1_fu_614_p3;
    end else if ((~((1'b0 == A_V_offset_empty_n) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten47_i_reg_159 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_fu_257_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten85_i_reg_137 <= add_ln6_fu_263_p2;
    end else if ((~((1'b0 == A_V_offset_empty_n) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten85_i_reg_137 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_fu_257_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_i_reg_192 <= select_ln11_4_fu_586_p3;
    end else if ((~((1'b0 == A_V_offset_empty_n) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_i_reg_192 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_fu_257_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln321_reg_661 <= add_ln321_fu_569_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_reg_637_pp0_iter7_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        fifo_data_V_reg_692 <= m_axi_A_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln6_reg_637 <= icmp_ln6_fu_257_p2;
        icmp_ln6_reg_637_pp0_iter1_reg <= icmp_ln6_reg_637;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln6_reg_637_pp0_iter2_reg <= icmp_ln6_reg_637_pp0_iter1_reg;
        icmp_ln6_reg_637_pp0_iter3_reg <= icmp_ln6_reg_637_pp0_iter2_reg;
        icmp_ln6_reg_637_pp0_iter4_reg <= icmp_ln6_reg_637_pp0_iter3_reg;
        icmp_ln6_reg_637_pp0_iter5_reg <= icmp_ln6_reg_637_pp0_iter4_reg;
        icmp_ln6_reg_637_pp0_iter6_reg <= icmp_ln6_reg_637_pp0_iter5_reg;
        icmp_ln6_reg_637_pp0_iter7_reg <= icmp_ln6_reg_637_pp0_iter6_reg;
        icmp_ln6_reg_637_pp0_iter8_reg <= icmp_ln6_reg_637_pp0_iter7_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_fu_257_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln6_reg_646 <= select_ln6_fu_343_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == A_V_offset_empty_n) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        zext_ln6_reg_632[27 : 0] <= zext_ln6_fu_235_p1[27 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln6_reg_637 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        A_V_blk_n_AR = m_axi_A_V_ARREADY;
    end else begin
        A_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln6_reg_637_pp0_iter7_reg == 1'd0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        A_V_blk_n_R = m_axi_A_V_RVALID;
    end else begin
        A_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        A_V_offset_blk_n = A_V_offset_empty_n;
    end else begin
        A_V_offset_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == A_V_offset_empty_n) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        A_V_offset_read = 1'b1;
    end else begin
        A_V_offset_read = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln6_fu_257_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln6_reg_637 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_c0_0_i_phi_fu_152_p4 = select_ln6_reg_646;
    end else begin
        ap_phi_mux_c0_0_i_phi_fu_152_p4 = c0_0_i_reg_148;
    end
end

always @ (*) begin
    if (((icmp_ln6_reg_637_pp0_iter8_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        fifo_A_local_out_V_V_blk_n = fifo_A_local_out_V_V_full_n;
    end else begin
        fifo_A_local_out_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln6_reg_637_pp0_iter8_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        fifo_A_local_out_V_V_write = 1'b1;
    end else begin
        fifo_A_local_out_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln6_reg_637 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_A_V_ARVALID = 1'b1;
    end else begin
        m_axi_A_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln6_reg_637_pp0_iter7_reg == 1'd0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_A_V_RREADY = 1'b1;
    end else begin
        m_axi_A_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b0 == A_V_offset_empty_n) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln6_fu_257_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter9 == 1'b1) & (ap_enable_reg_pp0_iter8 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln6_fu_257_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter9 == 1'b1) & (ap_enable_reg_pp0_iter8 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln11_1_fu_580_p2 = (4'd1 + indvar_flatten_i_reg_192);

assign add_ln11_fu_467_p2 = (2'd1 + select_ln11_fu_427_p3);

assign add_ln17_fu_527_p2 = (select_ln17_1_fu_507_p3 + zext_ln17_fu_523_p1);

assign add_ln321_fu_569_p2 = (zext_ln321_fu_565_p1 + zext_ln6_reg_632);

assign add_ln6_1_fu_269_p2 = (2'd1 + ap_phi_mux_c0_0_i_phi_fu_152_p4);

assign add_ln6_fu_263_p2 = (6'd1 + indvar_flatten85_i_reg_137);

assign add_ln7_fu_608_p2 = (6'd1 + indvar_flatten47_i_reg_159);

assign add_ln8_1_fu_594_p2 = (5'd1 + indvar_flatten17_i_reg_170);

assign add_ln8_fu_409_p2 = (2'd1 + select_ln8_fu_357_p3);

assign and_ln11_fu_453_p2 = (xor_ln11_fu_447_p2 & and_ln8_fu_397_p2);

assign and_ln7_1_fu_325_p2 = (xor_ln7_fu_301_p2 & icmp_ln11_fu_319_p2);

assign and_ln7_2_fu_337_p2 = (xor_ln7_fu_301_p2 & icmp_ln8_fu_331_p2);

assign and_ln7_fu_313_p2 = (xor_ln7_fu_301_p2 & icmp_ln13_fu_307_p2);

assign and_ln8_1_fu_403_p2 = (or_ln8_1_fu_391_p2 & and_ln7_1_fu_325_p2);

assign and_ln8_2_fu_543_p2 = (xor_ln8_1_fu_533_p2 & trunc_ln17_6_fu_539_p1);

assign and_ln8_fu_397_p2 = (or_ln8_1_fu_391_p2 & and_ln7_fu_313_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln6_reg_637_pp0_iter8_reg == 1'd0) & (fifo_A_local_out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b1)) | ((icmp_ln6_reg_637_pp0_iter7_reg == 1'd0) & (m_axi_A_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln6_reg_637_pp0_iter8_reg == 1'd0) & (fifo_A_local_out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b1)) | ((icmp_ln6_reg_637_pp0_iter7_reg == 1'd0) & (m_axi_A_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln6_reg_637_pp0_iter8_reg == 1'd0) & (fifo_A_local_out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b1)) | ((icmp_ln6_reg_637_pp0_iter7_reg == 1'd0) & (m_axi_A_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_io)));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == A_V_offset_empty_n) | (real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter8 = ((icmp_ln6_reg_637_pp0_iter7_reg == 1'd0) & (m_axi_A_V_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state11_pp0_stage0_iter9 = ((icmp_ln6_reg_637_pp0_iter8_reg == 1'd0) & (fifo_A_local_out_V_V_full_n == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((icmp_ln6_reg_637 == 1'd0) & (m_axi_A_V_ARREADY == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign c4_fu_574_p2 = (2'd1 + select_ln17_fu_485_p3);

assign fifo_A_local_out_V_V_din = fifo_data_V_reg_692;

assign icmp_ln11_fu_319_p2 = ((indvar_flatten_i_reg_192 == 4'd4) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_307_p2 = ((c4_0_i_reg_214 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln6_fu_257_p2 = ((indvar_flatten85_i_reg_137 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln7_fu_275_p2 = ((indvar_flatten47_i_reg_159 == 6'd16) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_331_p2 = ((indvar_flatten17_i_reg_170 == 5'd8) ? 1'b1 : 1'b0);

assign m_axi_A_V_ARADDR = zext_ln321_3_fu_622_p1;

assign m_axi_A_V_ARBURST = 2'd0;

assign m_axi_A_V_ARCACHE = 4'd0;

assign m_axi_A_V_ARID = 1'd0;

assign m_axi_A_V_ARLEN = 32'd1;

assign m_axi_A_V_ARLOCK = 2'd0;

assign m_axi_A_V_ARPROT = 3'd0;

assign m_axi_A_V_ARQOS = 4'd0;

assign m_axi_A_V_ARREGION = 4'd0;

assign m_axi_A_V_ARSIZE = 3'd0;

assign m_axi_A_V_ARUSER = 1'd0;

assign m_axi_A_V_AWADDR = 32'd0;

assign m_axi_A_V_AWBURST = 2'd0;

assign m_axi_A_V_AWCACHE = 4'd0;

assign m_axi_A_V_AWID = 1'd0;

assign m_axi_A_V_AWLEN = 32'd0;

assign m_axi_A_V_AWLOCK = 2'd0;

assign m_axi_A_V_AWPROT = 3'd0;

assign m_axi_A_V_AWQOS = 4'd0;

assign m_axi_A_V_AWREGION = 4'd0;

assign m_axi_A_V_AWSIZE = 3'd0;

assign m_axi_A_V_AWUSER = 1'd0;

assign m_axi_A_V_AWVALID = 1'b0;

assign m_axi_A_V_BREADY = 1'b0;

assign m_axi_A_V_WDATA = 128'd0;

assign m_axi_A_V_WID = 1'd0;

assign m_axi_A_V_WLAST = 1'b0;

assign m_axi_A_V_WSTRB = 16'd0;

assign m_axi_A_V_WUSER = 1'd0;

assign m_axi_A_V_WVALID = 1'b0;

assign or_ln11_1_fu_421_p2 = (or_ln11_fu_415_p2 | icmp_ln7_fu_275_p2);

assign or_ln11_fu_415_p2 = (and_ln8_1_fu_403_p2 | and_ln7_2_fu_337_p2);

assign or_ln17_1_fu_479_p2 = (or_ln8_fu_351_p2 | or_ln17_fu_473_p2);

assign or_ln17_fu_473_p2 = (and_ln8_1_fu_403_p2 | and_ln11_fu_453_p2);

assign or_ln8_1_fu_391_p2 = (xor_ln8_fu_385_p2 | icmp_ln7_fu_275_p2);

assign or_ln8_fu_351_p2 = (icmp_ln7_fu_275_p2 | and_ln7_2_fu_337_p2);

assign or_ln_i_fu_247_p4 = {{{trunc_ln17_1_fu_243_p1}, {trunc_ln17_fu_239_p1}}, {1'd0}};

assign or_ln_mid1_i_fu_497_p4 = {{{trunc_ln17_3_fu_365_p1}, {trunc_ln17_5_fu_493_p1}}, {1'd0}};

assign or_ln_mid4_i_fu_369_p3 = {{trunc_ln17_3_fu_365_p1}, {2'd0}};

assign or_ln_mid_i_fu_285_p3 = {{trunc_ln17_2_fu_281_p1}, {2'd0}};

assign select_ln11_1_fu_439_p3 = ((and_ln8_1_fu_403_p2[0:0] === 1'b1) ? or_ln_mid4_i_fu_369_p3 : select_ln8_1_fu_377_p3);

assign select_ln11_2_fu_515_p3 = ((and_ln11_fu_453_p2[0:0] === 1'b1) ? add_ln11_fu_467_p2 : select_ln11_fu_427_p3);

assign select_ln11_3_fu_549_p3 = ((and_ln8_1_fu_403_p2[0:0] === 1'b1) ? trunc_ln17_4_fu_435_p1 : and_ln8_2_fu_543_p2);

assign select_ln11_4_fu_586_p3 = ((or_ln11_1_fu_421_p2[0:0] === 1'b1) ? 4'd1 : add_ln11_1_fu_580_p2);

assign select_ln11_fu_427_p3 = ((or_ln11_1_fu_421_p2[0:0] === 1'b1) ? 2'd0 : c3_0_i_reg_203);

assign select_ln17_1_fu_507_p3 = ((and_ln11_fu_453_p2[0:0] === 1'b1) ? or_ln_mid1_i_fu_497_p4 : select_ln11_1_fu_439_p3);

assign select_ln17_fu_485_p3 = ((or_ln17_1_fu_479_p2[0:0] === 1'b1) ? 2'd0 : c4_0_i_reg_214);

assign select_ln6_fu_343_p3 = ((icmp_ln7_fu_275_p2[0:0] === 1'b1) ? add_ln6_1_fu_269_p2 : ap_phi_mux_c0_0_i_phi_fu_152_p4);

assign select_ln7_1_fu_614_p3 = ((icmp_ln7_fu_275_p2[0:0] === 1'b1) ? 6'd1 : add_ln7_fu_608_p2);

assign select_ln7_fu_293_p3 = ((icmp_ln7_fu_275_p2[0:0] === 1'b1) ? or_ln_mid_i_fu_285_p3 : or_ln_i_fu_247_p4);

assign select_ln8_1_fu_377_p3 = ((and_ln7_2_fu_337_p2[0:0] === 1'b1) ? or_ln_mid4_i_fu_369_p3 : select_ln7_fu_293_p3);

assign select_ln8_2_fu_459_p3 = ((and_ln8_1_fu_403_p2[0:0] === 1'b1) ? add_ln8_fu_409_p2 : select_ln8_fu_357_p3);

assign select_ln8_3_fu_600_p3 = ((or_ln8_fu_351_p2[0:0] === 1'b1) ? 5'd1 : add_ln8_1_fu_594_p2);

assign select_ln8_fu_357_p3 = ((or_ln8_fu_351_p2[0:0] === 1'b1) ? 2'd0 : c2_0_i_reg_181);

assign start_out = real_start;

assign tmp_fu_225_p4 = {{A_V_offset_dout[31:4]}};

assign trunc_ln17_1_fu_243_p1 = ap_phi_mux_c0_0_i_phi_fu_152_p4[0:0];

assign trunc_ln17_2_fu_281_p1 = add_ln6_1_fu_269_p2[0:0];

assign trunc_ln17_3_fu_365_p1 = select_ln6_fu_343_p3[0:0];

assign trunc_ln17_4_fu_435_p1 = add_ln8_fu_409_p2[0:0];

assign trunc_ln17_5_fu_493_p1 = add_ln11_fu_467_p2[0:0];

assign trunc_ln17_6_fu_539_p1 = c2_0_i_reg_181[0:0];

assign trunc_ln17_fu_239_p1 = c3_0_i_reg_203[0:0];

assign trunc_ln_i_fu_557_p3 = {{add_ln17_fu_527_p2}, {select_ln11_3_fu_549_p3}};

assign xor_ln11_fu_447_p2 = (1'd1 ^ and_ln8_1_fu_403_p2);

assign xor_ln7_fu_301_p2 = (icmp_ln7_fu_275_p2 ^ 1'd1);

assign xor_ln8_1_fu_533_p2 = (or_ln8_fu_351_p2 ^ 1'd1);

assign xor_ln8_fu_385_p2 = (icmp_ln8_fu_331_p2 ^ 1'd1);

assign zext_ln17_fu_523_p1 = select_ln17_fu_485_p3;

assign zext_ln321_3_fu_622_p1 = add_ln321_reg_661;

assign zext_ln321_fu_565_p1 = trunc_ln_i_fu_557_p3;

assign zext_ln6_fu_235_p1 = tmp_fu_225_p4;

always @ (posedge ap_clk) begin
    zext_ln6_reg_632[28] <= 1'b0;
end

endmodule //A_IO_L3_in

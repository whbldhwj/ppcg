// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module C_drain_IO_L2_out (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        fifo_C_drain_in_V_V_dout,
        fifo_C_drain_in_V_V_empty_n,
        fifo_C_drain_in_V_V_read,
        fifo_C_drain_out_V_V_din,
        fifo_C_drain_out_V_V_full_n,
        fifo_C_drain_out_V_V_write,
        fifo_C_drain_local_in_V_V_dout,
        fifo_C_drain_local_in_V_V_empty_n,
        fifo_C_drain_local_in_V_V_read
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [63:0] fifo_C_drain_in_V_V_dout;
input   fifo_C_drain_in_V_V_empty_n;
output   fifo_C_drain_in_V_V_read;
output  [63:0] fifo_C_drain_out_V_V_din;
input   fifo_C_drain_out_V_V_full_n;
output   fifo_C_drain_out_V_V_write;
input  [63:0] fifo_C_drain_local_in_V_V_dout;
input   fifo_C_drain_local_in_V_V_empty_n;
output   fifo_C_drain_local_in_V_V_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg fifo_C_drain_in_V_V_read;
reg fifo_C_drain_out_V_V_write;
reg fifo_C_drain_local_in_V_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    fifo_C_drain_in_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln738_reg_364;
reg   [0:0] select_ln750_reg_373;
reg    fifo_C_drain_out_V_V_blk_n;
reg    fifo_C_drain_local_in_V_V_blk_n;
reg   [5:0] indvar_flatten63_reg_117;
reg   [5:0] indvar_flatten33_reg_128;
reg   [4:0] indvar_flatten11_reg_139;
reg   [1:0] c3_0_reg_150;
reg   [3:0] indvar_flatten_reg_161;
wire   [0:0] icmp_ln738_fu_184_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_predicate_op47_read_state3;
reg    ap_predicate_op49_read_state3;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [5:0] add_ln738_fu_190_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] select_ln750_fu_294_p3;
wire   [1:0] select_ln742_1_fu_302_p3;
wire   [3:0] select_ln744_fu_328_p3;
wire   [4:0] select_ln742_2_fu_342_p3;
wire   [5:0] select_ln739_fu_356_p3;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg   [63:0] ap_phi_mux_tmp_V_phi_fu_175_p4;
wire   [63:0] ap_phi_reg_pp0_iter1_tmp_V_reg_172;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln739_fu_196_p2;
wire   [0:0] icmp_ln750_fu_208_p2;
wire   [0:0] xor_ln739_fu_202_p2;
wire   [0:0] icmp_ln744_fu_220_p2;
wire   [0:0] icmp_ln742_fu_232_p2;
wire   [0:0] and_ln739_2_fu_238_p2;
wire   [0:0] or_ln742_fu_244_p2;
wire   [0:0] xor_ln742_fu_258_p2;
wire   [0:0] and_ln739_fu_214_p2;
wire   [0:0] or_ln742_1_fu_264_p2;
wire   [0:0] and_ln739_1_fu_226_p2;
wire   [1:0] select_ln742_fu_250_p3;
wire   [0:0] and_ln742_1_fu_276_p2;
wire   [0:0] icmp_ln750_1_fu_288_p2;
wire   [0:0] and_ln742_fu_270_p2;
wire   [1:0] c3_fu_282_p2;
wire   [0:0] or_ln744_fu_316_p2;
wire   [0:0] or_ln744_1_fu_322_p2;
wire   [3:0] add_ln744_fu_310_p2;
wire   [4:0] add_ln742_1_fu_336_p2;
wire   [5:0] add_ln739_fu_350_p2;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln738_fu_184_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c3_0_reg_150 <= select_ln742_1_fu_302_p3;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        c3_0_reg_150 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln738_fu_184_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten11_reg_139 <= select_ln742_2_fu_342_p3;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten11_reg_139 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln738_fu_184_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten33_reg_128 <= select_ln739_fu_356_p3;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten33_reg_128 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln738_fu_184_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten63_reg_117 <= add_ln738_fu_190_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten63_reg_117 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln738_fu_184_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_161 <= select_ln744_fu_328_p3;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_161 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln738_reg_364 <= icmp_ln738_fu_184_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln738_fu_184_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln750_reg_373 <= select_ln750_fu_294_p3;
    end
end

always @ (*) begin
    if ((icmp_ln738_fu_184_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln738_reg_364 == 1'd0)) begin
        if ((select_ln750_reg_373 == 1'd0)) begin
            ap_phi_mux_tmp_V_phi_fu_175_p4 = fifo_C_drain_in_V_V_dout;
        end else if ((select_ln750_reg_373 == 1'd1)) begin
            ap_phi_mux_tmp_V_phi_fu_175_p4 = fifo_C_drain_local_in_V_V_dout;
        end else begin
            ap_phi_mux_tmp_V_phi_fu_175_p4 = ap_phi_reg_pp0_iter1_tmp_V_reg_172;
        end
    end else begin
        ap_phi_mux_tmp_V_phi_fu_175_p4 = ap_phi_reg_pp0_iter1_tmp_V_reg_172;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln750_reg_373 == 1'd0) & (icmp_ln738_reg_364 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fifo_C_drain_in_V_V_blk_n = fifo_C_drain_in_V_V_empty_n;
    end else begin
        fifo_C_drain_in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op47_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fifo_C_drain_in_V_V_read = 1'b1;
    end else begin
        fifo_C_drain_in_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln750_reg_373 == 1'd1) & (icmp_ln738_reg_364 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fifo_C_drain_local_in_V_V_blk_n = fifo_C_drain_local_in_V_V_empty_n;
    end else begin
        fifo_C_drain_local_in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op49_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fifo_C_drain_local_in_V_V_read = 1'b1;
    end else begin
        fifo_C_drain_local_in_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln738_reg_364 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fifo_C_drain_out_V_V_blk_n = fifo_C_drain_out_V_V_full_n;
    end else begin
        fifo_C_drain_out_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln738_reg_364 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fifo_C_drain_out_V_V_write = 1'b1;
    end else begin
        fifo_C_drain_out_V_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln738_fu_184_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln738_fu_184_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln738_fu_190_p2 = (indvar_flatten63_reg_117 + 6'd1);

assign add_ln739_fu_350_p2 = (indvar_flatten33_reg_128 + 6'd1);

assign add_ln742_1_fu_336_p2 = (indvar_flatten11_reg_139 + 5'd1);

assign add_ln744_fu_310_p2 = (indvar_flatten_reg_161 + 4'd1);

assign and_ln739_1_fu_226_p2 = (xor_ln739_fu_202_p2 & icmp_ln744_fu_220_p2);

assign and_ln739_2_fu_238_p2 = (xor_ln739_fu_202_p2 & icmp_ln742_fu_232_p2);

assign and_ln739_fu_214_p2 = (xor_ln739_fu_202_p2 & icmp_ln750_fu_208_p2);

assign and_ln742_1_fu_276_p2 = (or_ln742_1_fu_264_p2 & and_ln739_1_fu_226_p2);

assign and_ln742_fu_270_p2 = (or_ln742_1_fu_264_p2 & and_ln739_fu_214_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((fifo_C_drain_local_in_V_V_empty_n == 1'b0) & (ap_predicate_op49_read_state3 == 1'b1)) | ((fifo_C_drain_in_V_V_empty_n == 1'b0) & (ap_predicate_op47_read_state3 == 1'b1)) | ((icmp_ln738_reg_364 == 1'd0) & (fifo_C_drain_out_V_V_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((fifo_C_drain_local_in_V_V_empty_n == 1'b0) & (ap_predicate_op49_read_state3 == 1'b1)) | ((fifo_C_drain_in_V_V_empty_n == 1'b0) & (ap_predicate_op47_read_state3 == 1'b1)) | ((icmp_ln738_reg_364 == 1'd0) & (fifo_C_drain_out_V_V_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((fifo_C_drain_local_in_V_V_empty_n == 1'b0) & (ap_predicate_op49_read_state3 == 1'b1)) | ((fifo_C_drain_in_V_V_empty_n == 1'b0) & (ap_predicate_op47_read_state3 == 1'b1)) | ((icmp_ln738_reg_364 == 1'd0) & (fifo_C_drain_out_V_V_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((fifo_C_drain_local_in_V_V_empty_n == 1'b0) & (ap_predicate_op49_read_state3 == 1'b1)) | ((fifo_C_drain_in_V_V_empty_n == 1'b0) & (ap_predicate_op47_read_state3 == 1'b1)) | ((icmp_ln738_reg_364 == 1'd0) & (fifo_C_drain_out_V_V_full_n == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter1_tmp_V_reg_172 = 'bx;

always @ (*) begin
    ap_predicate_op47_read_state3 = ((select_ln750_reg_373 == 1'd0) & (icmp_ln738_reg_364 == 1'd0));
end

always @ (*) begin
    ap_predicate_op49_read_state3 = ((select_ln750_reg_373 == 1'd1) & (icmp_ln738_reg_364 == 1'd0));
end

assign c3_fu_282_p2 = (select_ln742_fu_250_p3 + 2'd1);

assign fifo_C_drain_out_V_V_din = ap_phi_mux_tmp_V_phi_fu_175_p4;

assign icmp_ln738_fu_184_p2 = ((indvar_flatten63_reg_117 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln739_fu_196_p2 = ((indvar_flatten33_reg_128 == 6'd16) ? 1'b1 : 1'b0);

assign icmp_ln742_fu_232_p2 = ((indvar_flatten11_reg_139 == 5'd8) ? 1'b1 : 1'b0);

assign icmp_ln744_fu_220_p2 = ((indvar_flatten_reg_161 == 4'd4) ? 1'b1 : 1'b0);

assign icmp_ln750_1_fu_288_p2 = ((select_ln742_fu_250_p3 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln750_fu_208_p2 = ((c3_0_reg_150 == 2'd1) ? 1'b1 : 1'b0);

assign or_ln742_1_fu_264_p2 = (xor_ln742_fu_258_p2 | icmp_ln739_fu_196_p2);

assign or_ln742_fu_244_p2 = (icmp_ln739_fu_196_p2 | and_ln739_2_fu_238_p2);

assign or_ln744_1_fu_322_p2 = (or_ln744_fu_316_p2 | icmp_ln739_fu_196_p2);

assign or_ln744_fu_316_p2 = (and_ln742_1_fu_276_p2 | and_ln739_2_fu_238_p2);

assign select_ln739_fu_356_p3 = ((icmp_ln739_fu_196_p2[0:0] === 1'b1) ? 6'd1 : add_ln739_fu_350_p2);

assign select_ln742_1_fu_302_p3 = ((and_ln742_1_fu_276_p2[0:0] === 1'b1) ? c3_fu_282_p2 : select_ln742_fu_250_p3);

assign select_ln742_2_fu_342_p3 = ((or_ln742_fu_244_p2[0:0] === 1'b1) ? 5'd1 : add_ln742_1_fu_336_p2);

assign select_ln742_fu_250_p3 = ((or_ln742_fu_244_p2[0:0] === 1'b1) ? 2'd0 : c3_0_reg_150);

assign select_ln744_fu_328_p3 = ((or_ln744_1_fu_322_p2[0:0] === 1'b1) ? 4'd1 : add_ln744_fu_310_p2);

assign select_ln750_fu_294_p3 = ((and_ln742_1_fu_276_p2[0:0] === 1'b1) ? icmp_ln750_1_fu_288_p2 : and_ln742_fu_270_p2);

assign xor_ln739_fu_202_p2 = (icmp_ln739_fu_196_p2 ^ 1'd1);

assign xor_ln742_fu_258_p2 = (icmp_ln742_fu_232_p2 ^ 1'd1);

endmodule //C_drain_IO_L2_out

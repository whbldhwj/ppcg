// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module B_IO_L2_in_intra_tra (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        local_B_0_V_address0,
        local_B_0_V_ce0,
        local_B_0_V_q0,
        fifo_B_local_out_V_V_din,
        fifo_B_local_out_V_V_full_n,
        fifo_B_local_out_V_V_write,
        en
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [0:0] local_B_0_V_address0;
output   local_B_0_V_ce0;
input  [127:0] local_B_0_V_q0;
output  [63:0] fifo_B_local_out_V_V_din;
input   fifo_B_local_out_V_V_full_n;
output   fifo_B_local_out_V_V_write;
input   en;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg local_B_0_V_ce0;
reg fifo_B_local_out_V_V_write;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    fifo_B_local_out_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln251_reg_294;
reg   [3:0] indvar_flatten14_reg_98;
reg   [1:0] c5_0_reg_109;
reg   [3:0] indvar_flatten_reg_120;
reg   [1:0] c6_0_reg_131;
reg   [1:0] c7_0_reg_142;
wire   [0:0] en_read_read_fu_72_p2;
wire   [0:0] icmp_ln251_fu_153_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [3:0] add_ln251_fu_159_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [1:0] select_ln321_1_fu_185_p3;
reg   [1:0] select_ln321_1_reg_303;
wire   [0:0] trunc_ln321_fu_193_p1;
reg   [0:0] trunc_ln321_reg_308;
wire   [1:0] select_ln263_fu_221_p3;
reg   [1:0] select_ln263_reg_313;
wire   [1:0] c7_fu_246_p3;
wire   [3:0] select_ln253_fu_260_p3;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg   [1:0] ap_phi_mux_c5_0_phi_fu_113_p4;
reg   [1:0] ap_phi_mux_c6_0_phi_fu_135_p4;
wire   [63:0] zext_ln263_fu_229_p1;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln253_fu_171_p2;
wire   [1:0] c5_fu_165_p2;
wire   [0:0] icmp_ln255_fu_203_p2;
wire   [0:0] xor_ln321_fu_197_p2;
wire   [1:0] select_ln321_fu_177_p3;
wire   [0:0] and_ln321_fu_209_p2;
wire   [1:0] c6_fu_215_p2;
wire   [0:0] or_ln255_fu_240_p2;
wire   [1:0] add_ln255_fu_234_p2;
wire   [3:0] add_ln253_1_fu_254_p2;
wire   [63:0] buf_data_split_1_V_fu_272_p4;
wire   [63:0] buf_data_split_0_V_fu_268_p1;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (en_read_read_fu_72_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (en_read_read_fu_72_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (en_read_read_fu_72_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c5_0_reg_109 <= 2'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln251_reg_294 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c5_0_reg_109 <= select_ln321_1_reg_303;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (en_read_read_fu_72_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c6_0_reg_131 <= 2'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln251_reg_294 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c6_0_reg_131 <= select_ln263_reg_313;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (en_read_read_fu_72_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c7_0_reg_142 <= 2'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln251_fu_153_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c7_0_reg_142 <= c7_fu_246_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (en_read_read_fu_72_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten14_reg_98 <= 4'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln251_fu_153_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten14_reg_98 <= add_ln251_fu_159_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (en_read_read_fu_72_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_120 <= 4'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln251_fu_153_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_120 <= select_ln253_fu_260_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln251_reg_294 <= icmp_ln251_fu_153_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln251_fu_153_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln263_reg_313 <= select_ln263_fu_221_p3;
        select_ln321_1_reg_303 <= select_ln321_1_fu_185_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln251_fu_153_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln321_reg_308 <= trunc_ln321_fu_193_p1;
    end
end

always @ (*) begin
    if ((icmp_ln251_fu_153_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln251_reg_294 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_c5_0_phi_fu_113_p4 = select_ln321_1_reg_303;
    end else begin
        ap_phi_mux_c5_0_phi_fu_113_p4 = c5_0_reg_109;
    end
end

always @ (*) begin
    if (((icmp_ln251_reg_294 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_c6_0_phi_fu_135_p4 = select_ln263_reg_313;
    end else begin
        ap_phi_mux_c6_0_phi_fu_135_p4 = c6_0_reg_131;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln251_reg_294 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fifo_B_local_out_V_V_blk_n = fifo_B_local_out_V_V_full_n;
    end else begin
        fifo_B_local_out_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln251_reg_294 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fifo_B_local_out_V_V_write = 1'b1;
    end else begin
        fifo_B_local_out_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        local_B_0_V_ce0 = 1'b1;
    end else begin
        local_B_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (en_read_read_fu_72_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_start == 1'b1) & (en_read_read_fu_72_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln251_fu_153_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln251_fu_153_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln251_fu_159_p2 = (indvar_flatten14_reg_98 + 4'd1);

assign add_ln253_1_fu_254_p2 = (4'd1 + indvar_flatten_reg_120);

assign add_ln255_fu_234_p2 = (2'd1 + c7_0_reg_142);

assign and_ln321_fu_209_p2 = (xor_ln321_fu_197_p2 & icmp_ln255_fu_203_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((icmp_ln251_reg_294 == 1'd0) & (fifo_B_local_out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln251_reg_294 == 1'd0) & (fifo_B_local_out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln251_reg_294 == 1'd0) & (fifo_B_local_out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln251_reg_294 == 1'd0) & (fifo_B_local_out_V_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign buf_data_split_0_V_fu_268_p1 = local_B_0_V_q0[63:0];

assign buf_data_split_1_V_fu_272_p4 = {{local_B_0_V_q0[127:64]}};

assign c5_fu_165_p2 = (2'd1 + ap_phi_mux_c5_0_phi_fu_113_p4);

assign c6_fu_215_p2 = (2'd1 + select_ln321_fu_177_p3);

assign c7_fu_246_p3 = ((or_ln255_fu_240_p2[0:0] === 1'b1) ? 2'd1 : add_ln255_fu_234_p2);

assign en_read_read_fu_72_p2 = en;

assign fifo_B_local_out_V_V_din = ((trunc_ln321_reg_308[0:0] === 1'b1) ? buf_data_split_1_V_fu_272_p4 : buf_data_split_0_V_fu_268_p1);

assign icmp_ln251_fu_153_p2 = ((indvar_flatten14_reg_98 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln253_fu_171_p2 = ((indvar_flatten_reg_120 == 4'd4) ? 1'b1 : 1'b0);

assign icmp_ln255_fu_203_p2 = ((c7_0_reg_142 == 2'd2) ? 1'b1 : 1'b0);

assign local_B_0_V_address0 = zext_ln263_fu_229_p1;

assign or_ln255_fu_240_p2 = (icmp_ln253_fu_171_p2 | and_ln321_fu_209_p2);

assign select_ln253_fu_260_p3 = ((icmp_ln253_fu_171_p2[0:0] === 1'b1) ? 4'd1 : add_ln253_1_fu_254_p2);

assign select_ln263_fu_221_p3 = ((and_ln321_fu_209_p2[0:0] === 1'b1) ? c6_fu_215_p2 : select_ln321_fu_177_p3);

assign select_ln321_1_fu_185_p3 = ((icmp_ln253_fu_171_p2[0:0] === 1'b1) ? c5_fu_165_p2 : ap_phi_mux_c5_0_phi_fu_113_p4);

assign select_ln321_fu_177_p3 = ((icmp_ln253_fu_171_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_c6_0_phi_fu_135_p4);

assign trunc_ln321_fu_193_p1 = select_ln321_1_fu_185_p3[0:0];

assign xor_ln321_fu_197_p2 = (icmp_ln253_fu_171_p2 ^ 1'd1);

assign zext_ln263_fu_229_p1 = select_ln263_fu_221_p3;

endmodule //B_IO_L2_in_intra_tra

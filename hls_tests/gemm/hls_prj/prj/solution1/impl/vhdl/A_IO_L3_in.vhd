-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity A_IO_L3_in is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    m_axi_A_V_AWVALID : OUT STD_LOGIC;
    m_axi_A_V_AWREADY : IN STD_LOGIC;
    m_axi_A_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_A_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_A_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_A_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_A_V_WVALID : OUT STD_LOGIC;
    m_axi_A_V_WREADY : IN STD_LOGIC;
    m_axi_A_V_WDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    m_axi_A_V_WSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_A_V_WLAST : OUT STD_LOGIC;
    m_axi_A_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_A_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_A_V_ARVALID : OUT STD_LOGIC;
    m_axi_A_V_ARREADY : IN STD_LOGIC;
    m_axi_A_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_A_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_A_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_A_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_A_V_RVALID : IN STD_LOGIC;
    m_axi_A_V_RREADY : OUT STD_LOGIC;
    m_axi_A_V_RDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    m_axi_A_V_RLAST : IN STD_LOGIC;
    m_axi_A_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_A_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_A_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_V_BVALID : IN STD_LOGIC;
    m_axi_A_V_BREADY : OUT STD_LOGIC;
    m_axi_A_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_A_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    A_V_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    A_V_offset_empty_n : IN STD_LOGIC;
    A_V_offset_read : OUT STD_LOGIC;
    fifo_A_local_out_V_V_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    fifo_A_local_out_V_V_full_n : IN STD_LOGIC;
    fifo_A_local_out_V_V_write : OUT STD_LOGIC );
end;


architecture behav of A_IO_L3_in is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal A_V_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln6_reg_637 : STD_LOGIC_VECTOR (0 downto 0);
    signal A_V_blk_n_R : STD_LOGIC;
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal icmp_ln6_reg_637_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal A_V_offset_blk_n : STD_LOGIC;
    signal fifo_A_local_out_V_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal icmp_ln6_reg_637_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten85_i_reg_137 : STD_LOGIC_VECTOR (5 downto 0);
    signal c0_0_i_reg_148 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten47_i_reg_159 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten17_i_reg_170 : STD_LOGIC_VECTOR (4 downto 0);
    signal c2_0_i_reg_181 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_i_reg_192 : STD_LOGIC_VECTOR (3 downto 0);
    signal c3_0_i_reg_203 : STD_LOGIC_VECTOR (1 downto 0);
    signal c4_0_i_reg_214 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln6_fu_235_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal zext_ln6_reg_632 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal icmp_ln6_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln6_reg_637_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln6_reg_637_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln6_reg_637_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln6_reg_637_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln6_reg_637_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln6_reg_637_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln6_fu_263_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln6_fu_343_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln6_reg_646 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln8_2_fu_459_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln11_2_fu_515_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln321_fu_569_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln321_reg_661 : STD_LOGIC_VECTOR (28 downto 0);
    signal c4_fu_574_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln11_4_fu_586_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln8_3_fu_600_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln7_1_fu_614_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal fifo_data_V_reg_692 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_phi_mux_c0_0_i_phi_fu_152_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln321_3_fu_622_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_fu_225_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal trunc_ln17_1_fu_243_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln17_fu_239_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln6_1_fu_269_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln17_2_fu_281_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln_mid_i_fu_285_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln_i_fu_247_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln13_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln7_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln8_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln7_2_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln8_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln17_3_fu_365_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln_mid4_i_fu_369_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln7_fu_293_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln8_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln7_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln8_1_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln7_1_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln8_fu_357_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln8_1_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_1_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln8_fu_409_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln8_1_fu_377_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln8_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln11_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln11_fu_427_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln11_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln17_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln17_1_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln11_fu_467_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln17_5_fu_493_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln_mid1_i_fu_497_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln11_1_fu_439_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln17_fu_485_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln17_1_fu_507_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln17_fu_523_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln17_6_fu_539_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln8_1_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln17_4_fu_435_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln8_2_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln17_fu_527_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln11_3_fu_549_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln_i_fu_557_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln321_fu_565_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln11_1_fu_580_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln8_1_fu_594_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln7_fu_608_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_const_logic_0 = A_V_offset_empty_n) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                elsif ((not(((ap_const_logic_0 = A_V_offset_empty_n) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c0_0_i_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln6_reg_637 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                c0_0_i_reg_148 <= select_ln6_reg_646;
            elsif ((not(((ap_const_logic_0 = A_V_offset_empty_n) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c0_0_i_reg_148 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    c2_0_i_reg_181_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln6_fu_257_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                c2_0_i_reg_181 <= select_ln8_2_fu_459_p3;
            elsif ((not(((ap_const_logic_0 = A_V_offset_empty_n) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c2_0_i_reg_181 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    c3_0_i_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln6_fu_257_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                c3_0_i_reg_203 <= select_ln11_2_fu_515_p3;
            elsif ((not(((ap_const_logic_0 = A_V_offset_empty_n) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c3_0_i_reg_203 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    c4_0_i_reg_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln6_fu_257_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                c4_0_i_reg_214 <= c4_fu_574_p2;
            elsif ((not(((ap_const_logic_0 = A_V_offset_empty_n) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c4_0_i_reg_214 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    indvar_flatten17_i_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln6_fu_257_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten17_i_reg_170 <= select_ln8_3_fu_600_p3;
            elsif ((not(((ap_const_logic_0 = A_V_offset_empty_n) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten17_i_reg_170 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten47_i_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln6_fu_257_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten47_i_reg_159 <= select_ln7_1_fu_614_p3;
            elsif ((not(((ap_const_logic_0 = A_V_offset_empty_n) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten47_i_reg_159 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten85_i_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln6_fu_257_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten85_i_reg_137 <= add_ln6_fu_263_p2;
            elsif ((not(((ap_const_logic_0 = A_V_offset_empty_n) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten85_i_reg_137 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten_i_reg_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln6_fu_257_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_i_reg_192 <= select_ln11_4_fu_586_p3;
            elsif ((not(((ap_const_logic_0 = A_V_offset_empty_n) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_i_reg_192 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln6_fu_257_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln321_reg_661 <= add_ln321_fu_569_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln6_reg_637_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                fifo_data_V_reg_692 <= m_axi_A_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln6_reg_637 <= icmp_ln6_fu_257_p2;
                icmp_ln6_reg_637_pp0_iter1_reg <= icmp_ln6_reg_637;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln6_reg_637_pp0_iter2_reg <= icmp_ln6_reg_637_pp0_iter1_reg;
                icmp_ln6_reg_637_pp0_iter3_reg <= icmp_ln6_reg_637_pp0_iter2_reg;
                icmp_ln6_reg_637_pp0_iter4_reg <= icmp_ln6_reg_637_pp0_iter3_reg;
                icmp_ln6_reg_637_pp0_iter5_reg <= icmp_ln6_reg_637_pp0_iter4_reg;
                icmp_ln6_reg_637_pp0_iter6_reg <= icmp_ln6_reg_637_pp0_iter5_reg;
                icmp_ln6_reg_637_pp0_iter7_reg <= icmp_ln6_reg_637_pp0_iter6_reg;
                icmp_ln6_reg_637_pp0_iter8_reg <= icmp_ln6_reg_637_pp0_iter7_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln6_fu_257_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln6_reg_646 <= select_ln6_fu_343_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = A_V_offset_empty_n) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    zext_ln6_reg_632(27 downto 0) <= zext_ln6_fu_235_p1(27 downto 0);
            end if;
        end if;
    end process;
    zext_ln6_reg_632(28) <= '0';

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, A_V_offset_empty_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, icmp_ln6_fu_257_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_const_logic_0 = A_V_offset_empty_n) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln6_fu_257_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln6_fu_257_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    A_V_blk_n_AR_assign_proc : process(m_axi_A_V_ARREADY, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln6_reg_637)
    begin
        if (((icmp_ln6_reg_637 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            A_V_blk_n_AR <= m_axi_A_V_ARREADY;
        else 
            A_V_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    A_V_blk_n_R_assign_proc : process(m_axi_A_V_RVALID, ap_block_pp0_stage0, ap_enable_reg_pp0_iter8, icmp_ln6_reg_637_pp0_iter7_reg)
    begin
        if (((icmp_ln6_reg_637_pp0_iter7_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            A_V_blk_n_R <= m_axi_A_V_RVALID;
        else 
            A_V_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    A_V_offset_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, A_V_offset_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            A_V_offset_blk_n <= A_V_offset_empty_n;
        else 
            A_V_offset_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    A_V_offset_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, A_V_offset_empty_n)
    begin
        if ((not(((ap_const_logic_0 = A_V_offset_empty_n) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            A_V_offset_read <= ap_const_logic_1;
        else 
            A_V_offset_read <= ap_const_logic_0;
        end if; 
    end process;

    add_ln11_1_fu_580_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(indvar_flatten_i_reg_192));
    add_ln11_fu_467_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln11_fu_427_p3));
    add_ln17_fu_527_p2 <= std_logic_vector(unsigned(select_ln17_1_fu_507_p3) + unsigned(zext_ln17_fu_523_p1));
    add_ln321_fu_569_p2 <= std_logic_vector(unsigned(zext_ln321_fu_565_p1) + unsigned(zext_ln6_reg_632));
    add_ln6_1_fu_269_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(ap_phi_mux_c0_0_i_phi_fu_152_p4));
    add_ln6_fu_263_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(indvar_flatten85_i_reg_137));
    add_ln7_fu_608_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(indvar_flatten47_i_reg_159));
    add_ln8_1_fu_594_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(indvar_flatten17_i_reg_170));
    add_ln8_fu_409_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln8_fu_357_p3));
    and_ln11_fu_453_p2 <= (xor_ln11_fu_447_p2 and and_ln8_fu_397_p2);
    and_ln7_1_fu_325_p2 <= (xor_ln7_fu_301_p2 and icmp_ln11_fu_319_p2);
    and_ln7_2_fu_337_p2 <= (xor_ln7_fu_301_p2 and icmp_ln8_fu_331_p2);
    and_ln7_fu_313_p2 <= (xor_ln7_fu_301_p2 and icmp_ln13_fu_307_p2);
    and_ln8_1_fu_403_p2 <= (or_ln8_1_fu_391_p2 and and_ln7_1_fu_325_p2);
    and_ln8_2_fu_543_p2 <= (xor_ln8_1_fu_533_p2 and trunc_ln17_6_fu_539_p1);
    and_ln8_fu_397_p2 <= (or_ln8_1_fu_391_p2 and and_ln7_fu_313_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(m_axi_A_V_RVALID, fifo_A_local_out_V_V_full_n, ap_enable_reg_pp0_iter8, icmp_ln6_reg_637_pp0_iter7_reg, ap_enable_reg_pp0_iter9, icmp_ln6_reg_637_pp0_iter8_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln6_reg_637_pp0_iter8_reg = ap_const_lv1_0) and (fifo_A_local_out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)) or ((icmp_ln6_reg_637_pp0_iter7_reg = ap_const_lv1_0) and (m_axi_A_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_A_V_RVALID, fifo_A_local_out_V_V_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, icmp_ln6_reg_637_pp0_iter7_reg, ap_enable_reg_pp0_iter9, icmp_ln6_reg_637_pp0_iter8_reg, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln6_reg_637_pp0_iter8_reg = ap_const_lv1_0) and (fifo_A_local_out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)) or ((icmp_ln6_reg_637_pp0_iter7_reg = ap_const_lv1_0) and (m_axi_A_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_A_V_RVALID, fifo_A_local_out_V_V_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, icmp_ln6_reg_637_pp0_iter7_reg, ap_enable_reg_pp0_iter9, icmp_ln6_reg_637_pp0_iter8_reg, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln6_reg_637_pp0_iter8_reg = ap_const_lv1_0) and (fifo_A_local_out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)) or ((icmp_ln6_reg_637_pp0_iter7_reg = ap_const_lv1_0) and (m_axi_A_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, A_V_offset_empty_n)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = A_V_offset_empty_n) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state10_pp0_stage0_iter8_assign_proc : process(m_axi_A_V_RVALID, icmp_ln6_reg_637_pp0_iter7_reg)
    begin
                ap_block_state10_pp0_stage0_iter8 <= ((icmp_ln6_reg_637_pp0_iter7_reg = ap_const_lv1_0) and (m_axi_A_V_RVALID = ap_const_logic_0));
    end process;


    ap_block_state11_pp0_stage0_iter9_assign_proc : process(fifo_A_local_out_V_V_full_n, icmp_ln6_reg_637_pp0_iter8_reg)
    begin
                ap_block_state11_pp0_stage0_iter9 <= ((icmp_ln6_reg_637_pp0_iter8_reg = ap_const_lv1_0) and (fifo_A_local_out_V_V_full_n = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(m_axi_A_V_ARREADY, icmp_ln6_reg_637)
    begin
                ap_block_state3_io <= ((icmp_ln6_reg_637 = ap_const_lv1_0) and (m_axi_A_V_ARREADY = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln6_fu_257_p2)
    begin
        if ((icmp_ln6_fu_257_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c0_0_i_phi_fu_152_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln6_reg_637, c0_0_i_reg_148, select_ln6_reg_646)
    begin
        if (((icmp_ln6_reg_637 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_c0_0_i_phi_fu_152_p4 <= select_ln6_reg_646;
        else 
            ap_phi_mux_c0_0_i_phi_fu_152_p4 <= c0_0_i_reg_148;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    c4_fu_574_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln17_fu_485_p3));

    fifo_A_local_out_V_V_blk_n_assign_proc : process(fifo_A_local_out_V_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter9, icmp_ln6_reg_637_pp0_iter8_reg)
    begin
        if (((icmp_ln6_reg_637_pp0_iter8_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            fifo_A_local_out_V_V_blk_n <= fifo_A_local_out_V_V_full_n;
        else 
            fifo_A_local_out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fifo_A_local_out_V_V_din <= fifo_data_V_reg_692;

    fifo_A_local_out_V_V_write_assign_proc : process(ap_enable_reg_pp0_iter9, icmp_ln6_reg_637_pp0_iter8_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln6_reg_637_pp0_iter8_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fifo_A_local_out_V_V_write <= ap_const_logic_1;
        else 
            fifo_A_local_out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln11_fu_319_p2 <= "1" when (indvar_flatten_i_reg_192 = ap_const_lv4_4) else "0";
    icmp_ln13_fu_307_p2 <= "1" when (c4_0_i_reg_214 = ap_const_lv2_2) else "0";
    icmp_ln6_fu_257_p2 <= "1" when (indvar_flatten85_i_reg_137 = ap_const_lv6_20) else "0";
    icmp_ln7_fu_275_p2 <= "1" when (indvar_flatten47_i_reg_159 = ap_const_lv6_10) else "0";
    icmp_ln8_fu_331_p2 <= "1" when (indvar_flatten17_i_reg_170 = ap_const_lv5_8) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_A_V_ARADDR <= zext_ln321_3_fu_622_p1(32 - 1 downto 0);
    m_axi_A_V_ARBURST <= ap_const_lv2_0;
    m_axi_A_V_ARCACHE <= ap_const_lv4_0;
    m_axi_A_V_ARID <= ap_const_lv1_0;
    m_axi_A_V_ARLEN <= ap_const_lv32_1;
    m_axi_A_V_ARLOCK <= ap_const_lv2_0;
    m_axi_A_V_ARPROT <= ap_const_lv3_0;
    m_axi_A_V_ARQOS <= ap_const_lv4_0;
    m_axi_A_V_ARREGION <= ap_const_lv4_0;
    m_axi_A_V_ARSIZE <= ap_const_lv3_0;
    m_axi_A_V_ARUSER <= ap_const_lv1_0;

    m_axi_A_V_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln6_reg_637, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln6_reg_637 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_A_V_ARVALID <= ap_const_logic_1;
        else 
            m_axi_A_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_A_V_AWADDR <= ap_const_lv32_0;
    m_axi_A_V_AWBURST <= ap_const_lv2_0;
    m_axi_A_V_AWCACHE <= ap_const_lv4_0;
    m_axi_A_V_AWID <= ap_const_lv1_0;
    m_axi_A_V_AWLEN <= ap_const_lv32_0;
    m_axi_A_V_AWLOCK <= ap_const_lv2_0;
    m_axi_A_V_AWPROT <= ap_const_lv3_0;
    m_axi_A_V_AWQOS <= ap_const_lv4_0;
    m_axi_A_V_AWREGION <= ap_const_lv4_0;
    m_axi_A_V_AWSIZE <= ap_const_lv3_0;
    m_axi_A_V_AWUSER <= ap_const_lv1_0;
    m_axi_A_V_AWVALID <= ap_const_logic_0;
    m_axi_A_V_BREADY <= ap_const_logic_0;

    m_axi_A_V_RREADY_assign_proc : process(ap_enable_reg_pp0_iter8, icmp_ln6_reg_637_pp0_iter7_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln6_reg_637_pp0_iter7_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_A_V_RREADY <= ap_const_logic_1;
        else 
            m_axi_A_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_A_V_WDATA <= ap_const_lv128_lc_1;
    m_axi_A_V_WID <= ap_const_lv1_0;
    m_axi_A_V_WLAST <= ap_const_logic_0;
    m_axi_A_V_WSTRB <= ap_const_lv16_0;
    m_axi_A_V_WUSER <= ap_const_lv1_0;
    m_axi_A_V_WVALID <= ap_const_logic_0;
    or_ln11_1_fu_421_p2 <= (or_ln11_fu_415_p2 or icmp_ln7_fu_275_p2);
    or_ln11_fu_415_p2 <= (and_ln8_1_fu_403_p2 or and_ln7_2_fu_337_p2);
    or_ln17_1_fu_479_p2 <= (or_ln8_fu_351_p2 or or_ln17_fu_473_p2);
    or_ln17_fu_473_p2 <= (and_ln8_1_fu_403_p2 or and_ln11_fu_453_p2);
    or_ln8_1_fu_391_p2 <= (xor_ln8_fu_385_p2 or icmp_ln7_fu_275_p2);
    or_ln8_fu_351_p2 <= (icmp_ln7_fu_275_p2 or and_ln7_2_fu_337_p2);
    or_ln_i_fu_247_p4 <= ((trunc_ln17_1_fu_243_p1 & trunc_ln17_fu_239_p1) & ap_const_lv1_0);
    or_ln_mid1_i_fu_497_p4 <= ((trunc_ln17_3_fu_365_p1 & trunc_ln17_5_fu_493_p1) & ap_const_lv1_0);
    or_ln_mid4_i_fu_369_p3 <= (trunc_ln17_3_fu_365_p1 & ap_const_lv2_0);
    or_ln_mid_i_fu_285_p3 <= (trunc_ln17_2_fu_281_p1 & ap_const_lv2_0);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    select_ln11_1_fu_439_p3 <= 
        or_ln_mid4_i_fu_369_p3 when (and_ln8_1_fu_403_p2(0) = '1') else 
        select_ln8_1_fu_377_p3;
    select_ln11_2_fu_515_p3 <= 
        add_ln11_fu_467_p2 when (and_ln11_fu_453_p2(0) = '1') else 
        select_ln11_fu_427_p3;
    select_ln11_3_fu_549_p3 <= 
        trunc_ln17_4_fu_435_p1 when (and_ln8_1_fu_403_p2(0) = '1') else 
        and_ln8_2_fu_543_p2;
    select_ln11_4_fu_586_p3 <= 
        ap_const_lv4_1 when (or_ln11_1_fu_421_p2(0) = '1') else 
        add_ln11_1_fu_580_p2;
    select_ln11_fu_427_p3 <= 
        ap_const_lv2_0 when (or_ln11_1_fu_421_p2(0) = '1') else 
        c3_0_i_reg_203;
    select_ln17_1_fu_507_p3 <= 
        or_ln_mid1_i_fu_497_p4 when (and_ln11_fu_453_p2(0) = '1') else 
        select_ln11_1_fu_439_p3;
    select_ln17_fu_485_p3 <= 
        ap_const_lv2_0 when (or_ln17_1_fu_479_p2(0) = '1') else 
        c4_0_i_reg_214;
    select_ln6_fu_343_p3 <= 
        add_ln6_1_fu_269_p2 when (icmp_ln7_fu_275_p2(0) = '1') else 
        ap_phi_mux_c0_0_i_phi_fu_152_p4;
    select_ln7_1_fu_614_p3 <= 
        ap_const_lv6_1 when (icmp_ln7_fu_275_p2(0) = '1') else 
        add_ln7_fu_608_p2;
    select_ln7_fu_293_p3 <= 
        or_ln_mid_i_fu_285_p3 when (icmp_ln7_fu_275_p2(0) = '1') else 
        or_ln_i_fu_247_p4;
    select_ln8_1_fu_377_p3 <= 
        or_ln_mid4_i_fu_369_p3 when (and_ln7_2_fu_337_p2(0) = '1') else 
        select_ln7_fu_293_p3;
    select_ln8_2_fu_459_p3 <= 
        add_ln8_fu_409_p2 when (and_ln8_1_fu_403_p2(0) = '1') else 
        select_ln8_fu_357_p3;
    select_ln8_3_fu_600_p3 <= 
        ap_const_lv5_1 when (or_ln8_fu_351_p2(0) = '1') else 
        add_ln8_1_fu_594_p2;
    select_ln8_fu_357_p3 <= 
        ap_const_lv2_0 when (or_ln8_fu_351_p2(0) = '1') else 
        c2_0_i_reg_181;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_225_p4 <= A_V_offset_dout(31 downto 4);
    trunc_ln17_1_fu_243_p1 <= ap_phi_mux_c0_0_i_phi_fu_152_p4(1 - 1 downto 0);
    trunc_ln17_2_fu_281_p1 <= add_ln6_1_fu_269_p2(1 - 1 downto 0);
    trunc_ln17_3_fu_365_p1 <= select_ln6_fu_343_p3(1 - 1 downto 0);
    trunc_ln17_4_fu_435_p1 <= add_ln8_fu_409_p2(1 - 1 downto 0);
    trunc_ln17_5_fu_493_p1 <= add_ln11_fu_467_p2(1 - 1 downto 0);
    trunc_ln17_6_fu_539_p1 <= c2_0_i_reg_181(1 - 1 downto 0);
    trunc_ln17_fu_239_p1 <= c3_0_i_reg_203(1 - 1 downto 0);
    trunc_ln_i_fu_557_p3 <= (add_ln17_fu_527_p2 & select_ln11_3_fu_549_p3);
    xor_ln11_fu_447_p2 <= (ap_const_lv1_1 xor and_ln8_1_fu_403_p2);
    xor_ln7_fu_301_p2 <= (icmp_ln7_fu_275_p2 xor ap_const_lv1_1);
    xor_ln8_1_fu_533_p2 <= (or_ln8_fu_351_p2 xor ap_const_lv1_1);
    xor_ln8_fu_385_p2 <= (icmp_ln8_fu_331_p2 xor ap_const_lv1_1);
    zext_ln17_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln17_fu_485_p3),3));
    zext_ln321_3_fu_622_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_reg_661),64));
    zext_ln321_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln_i_fu_557_p3),29));
    zext_ln6_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_225_p4),29));
end behav;

-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity C_drain_IO_L3_out is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_C_V_AWVALID : OUT STD_LOGIC;
    m_axi_C_V_AWREADY : IN STD_LOGIC;
    m_axi_C_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_C_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_C_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_C_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_C_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_C_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_C_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_C_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_C_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_C_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_C_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_C_V_WVALID : OUT STD_LOGIC;
    m_axi_C_V_WREADY : IN STD_LOGIC;
    m_axi_C_V_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_C_V_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_C_V_WLAST : OUT STD_LOGIC;
    m_axi_C_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_C_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_C_V_ARVALID : OUT STD_LOGIC;
    m_axi_C_V_ARREADY : IN STD_LOGIC;
    m_axi_C_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_C_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_C_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_C_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_C_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_C_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_C_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_C_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_C_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_C_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_C_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_C_V_RVALID : IN STD_LOGIC;
    m_axi_C_V_RREADY : OUT STD_LOGIC;
    m_axi_C_V_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_C_V_RLAST : IN STD_LOGIC;
    m_axi_C_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_C_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_C_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_C_V_BVALID : IN STD_LOGIC;
    m_axi_C_V_BREADY : OUT STD_LOGIC;
    m_axi_C_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_C_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_C_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    C_V_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    C_V_offset_empty_n : IN STD_LOGIC;
    C_V_offset_read : OUT STD_LOGIC;
    fifo_C_drain_local_in_V_V_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    fifo_C_drain_local_in_V_V_empty_n : IN STD_LOGIC;
    fifo_C_drain_local_in_V_V_read : OUT STD_LOGIC );
end;


architecture behav of C_drain_IO_L3_out is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal C_V_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln795_reg_715 : STD_LOGIC_VECTOR (0 downto 0);
    signal C_V_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln795_reg_715_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal C_V_blk_n_B : STD_LOGIC;
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal icmp_ln795_reg_715_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal C_V_offset_blk_n : STD_LOGIC;
    signal fifo_C_drain_local_in_V_V_blk_n : STD_LOGIC;
    signal indvar_flatten85_i_reg_146 : STD_LOGIC_VECTOR (5 downto 0);
    signal c0_0_i_reg_157 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten47_i_reg_168 : STD_LOGIC_VECTOR (5 downto 0);
    signal c1_0_i_reg_179 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten17_i_reg_190 : STD_LOGIC_VECTOR (4 downto 0);
    signal c3_0_i_reg_201 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_i_reg_212 : STD_LOGIC_VECTOR (3 downto 0);
    signal c4_0_i_reg_223 : STD_LOGIC_VECTOR (1 downto 0);
    signal c5_0_i_reg_234 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln795_fu_255_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln795_reg_710 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal icmp_ln795_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln795_reg_715_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln795_reg_715_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln795_reg_715_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln795_reg_715_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln795_fu_283_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln795_fu_381_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln795_reg_724 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln796_2_fu_465_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln796_2_reg_729 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln799_3_fu_535_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln801_fu_591_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln321_fu_647_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_reg_744 : STD_LOGIC_VECTOR (29 downto 0);
    signal c5_fu_652_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln801_1_fu_664_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln799_4_fu_678_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln796_3_fu_692_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_V_reg_769 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_phi_mux_c0_0_i_phi_fu_161_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_c1_0_i_phi_fu_183_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln321_1_fu_700_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_fu_245_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal trunc_ln808_1_fu_263_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln808_fu_259_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln796_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln808_2_fu_315_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln796_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln795_1_fu_289_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln808_3_fu_325_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln808_1_mid_i_fu_329_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln808_1_i_fu_267_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln803_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln801_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln799_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln796_fu_301_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln796_3_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln799_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln796_fu_389_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln808_4_fu_409_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln796_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln808_5_fu_421_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln808_1_mid3_i_fu_425_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln796_1_fu_337_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln799_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln796_1_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln799_1_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln796_2_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln799_fu_401_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln799_1_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln808_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln808_1_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln799_fu_473_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln808_7_fu_503_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln799_1_fu_413_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln799_2_fu_433_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln799_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln808_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln808_fu_491_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln808_fu_529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln808_2_fu_549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln808_3_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln801_fu_543_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln808_8_fu_569_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln808_1_mid1_i_fu_573_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln808_2_fu_515_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln808_3_fu_561_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln808_fu_599_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln808_4_fu_583_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln808_9_fu_615_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln799_1_fu_609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln808_6_fu_499_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln799_2_fu_619_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln808_fu_603_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln808_1_fu_507_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln808_5_fu_625_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln_i_fu_633_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln321_fu_643_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln801_1_fu_658_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln799_1_fu_672_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln796_1_fu_686_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_const_logic_0 = C_V_offset_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                elsif ((not(((ap_const_logic_0 = C_V_offset_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c0_0_i_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln795_reg_715 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                c0_0_i_reg_157 <= select_ln795_reg_724;
            elsif ((not(((ap_const_logic_0 = C_V_offset_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c0_0_i_reg_157 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    c1_0_i_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln795_reg_715 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                c1_0_i_reg_179 <= select_ln796_2_reg_729;
            elsif ((not(((ap_const_logic_0 = C_V_offset_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c1_0_i_reg_179 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    c3_0_i_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln795_fu_277_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                c3_0_i_reg_201 <= select_ln799_3_fu_535_p3;
            elsif ((not(((ap_const_logic_0 = C_V_offset_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c3_0_i_reg_201 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    c4_0_i_reg_223_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln795_fu_277_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                c4_0_i_reg_223 <= select_ln801_fu_591_p3;
            elsif ((not(((ap_const_logic_0 = C_V_offset_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c4_0_i_reg_223 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    c5_0_i_reg_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln795_fu_277_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                c5_0_i_reg_234 <= c5_fu_652_p2;
            elsif ((not(((ap_const_logic_0 = C_V_offset_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c5_0_i_reg_234 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    indvar_flatten17_i_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln795_fu_277_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten17_i_reg_190 <= select_ln799_4_fu_678_p3;
            elsif ((not(((ap_const_logic_0 = C_V_offset_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten17_i_reg_190 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten47_i_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln795_fu_277_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten47_i_reg_168 <= select_ln796_3_fu_692_p3;
            elsif ((not(((ap_const_logic_0 = C_V_offset_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten47_i_reg_168 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten85_i_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln795_fu_277_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten85_i_reg_146 <= add_ln795_fu_283_p2;
            elsif ((not(((ap_const_logic_0 = C_V_offset_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten85_i_reg_146 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten_i_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln795_fu_277_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_i_reg_212 <= select_ln801_1_fu_664_p3;
            elsif ((not(((ap_const_logic_0 = C_V_offset_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_i_reg_212 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln795_fu_277_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln321_reg_744 <= add_ln321_fu_647_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln795_reg_715 <= icmp_ln795_fu_277_p2;
                icmp_ln795_reg_715_pp0_iter1_reg <= icmp_ln795_reg_715;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln795_reg_715_pp0_iter2_reg <= icmp_ln795_reg_715_pp0_iter1_reg;
                icmp_ln795_reg_715_pp0_iter3_reg <= icmp_ln795_reg_715_pp0_iter2_reg;
                icmp_ln795_reg_715_pp0_iter4_reg <= icmp_ln795_reg_715_pp0_iter3_reg;
                icmp_ln795_reg_715_pp0_iter5_reg <= icmp_ln795_reg_715_pp0_iter4_reg;
                icmp_ln795_reg_715_pp0_iter6_reg <= icmp_ln795_reg_715_pp0_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln795_fu_277_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln795_reg_724 <= select_ln795_fu_381_p3;
                select_ln796_2_reg_729 <= select_ln796_2_fu_465_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln795_reg_715 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_V_reg_769 <= fifo_C_drain_local_in_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = C_V_offset_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    zext_ln795_reg_710(28 downto 0) <= zext_ln795_fu_255_p1(28 downto 0);
            end if;
        end if;
    end process;
    zext_ln795_reg_710(29) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, C_V_offset_empty_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter7, icmp_ln795_fu_277_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_const_logic_0 = C_V_offset_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln795_fu_277_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln795_fu_277_p2 = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    C_V_blk_n_AW_assign_proc : process(m_axi_C_V_AWREADY, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln795_reg_715)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln795_reg_715 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            C_V_blk_n_AW <= m_axi_C_V_AWREADY;
        else 
            C_V_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    C_V_blk_n_B_assign_proc : process(m_axi_C_V_BVALID, ap_block_pp0_stage0, ap_enable_reg_pp0_iter7, icmp_ln795_reg_715_pp0_iter6_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln795_reg_715_pp0_iter6_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            C_V_blk_n_B <= m_axi_C_V_BVALID;
        else 
            C_V_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    C_V_blk_n_W_assign_proc : process(m_axi_C_V_WREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln795_reg_715_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln795_reg_715_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            C_V_blk_n_W <= m_axi_C_V_WREADY;
        else 
            C_V_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    C_V_offset_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, C_V_offset_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            C_V_offset_blk_n <= C_V_offset_empty_n;
        else 
            C_V_offset_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    C_V_offset_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, C_V_offset_empty_n)
    begin
        if ((not(((ap_const_logic_0 = C_V_offset_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            C_V_offset_read <= ap_const_logic_1;
        else 
            C_V_offset_read <= ap_const_logic_0;
        end if; 
    end process;

    add_ln321_fu_647_p2 <= std_logic_vector(unsigned(zext_ln321_fu_643_p1) + unsigned(zext_ln795_reg_710));
    add_ln795_1_fu_289_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(ap_phi_mux_c0_0_i_phi_fu_161_p4));
    add_ln795_fu_283_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(indvar_flatten85_i_reg_146));
    add_ln796_1_fu_686_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(indvar_flatten47_i_reg_168));
    add_ln796_fu_389_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln796_fu_301_p3));
    add_ln799_1_fu_672_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(indvar_flatten17_i_reg_190));
    add_ln799_fu_473_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln799_fu_401_p3));
    add_ln801_1_fu_658_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(indvar_flatten_i_reg_212));
    add_ln801_fu_543_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln808_fu_491_p3));
    add_ln808_fu_603_p2 <= std_logic_vector(unsigned(zext_ln808_fu_599_p1) + unsigned(select_ln808_4_fu_583_p3));
    and_ln796_1_fu_351_p2 <= (xor_ln796_fu_309_p2 and icmp_ln803_fu_345_p2);
    and_ln796_2_fu_363_p2 <= (xor_ln796_fu_309_p2 and icmp_ln801_fu_357_p2);
    and_ln796_3_fu_375_p2 <= (xor_ln796_fu_309_p2 and icmp_ln799_fu_369_p2);
    and_ln796_fu_319_p2 <= (xor_ln796_fu_309_p2 and trunc_ln808_2_fu_315_p1);
    and_ln799_1_fu_459_p2 <= (or_ln799_1_fu_447_p2 and and_ln796_2_fu_363_p2);
    and_ln799_2_fu_619_p2 <= (xor_ln799_1_fu_609_p2 and trunc_ln808_9_fu_615_p1);
    and_ln799_fu_453_p2 <= (or_ln799_1_fu_447_p2 and and_ln796_1_fu_351_p2);
    and_ln808_fu_529_p2 <= (xor_ln808_fu_523_p2 and and_ln799_fu_453_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(m_axi_C_V_BVALID, fifo_C_drain_local_in_V_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln795_reg_715, ap_enable_reg_pp0_iter7, icmp_ln795_reg_715_pp0_iter6_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln795_reg_715 = ap_const_lv1_0) and (fifo_C_drain_local_in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((icmp_ln795_reg_715_pp0_iter6_reg = ap_const_lv1_0) and (m_axi_C_V_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_C_V_BVALID, fifo_C_drain_local_in_V_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln795_reg_715, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter7, icmp_ln795_reg_715_pp0_iter6_reg, ap_block_state3_io, ap_block_state4_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or ((icmp_ln795_reg_715 = ap_const_lv1_0) and (fifo_C_drain_local_in_V_V_empty_n = ap_const_logic_0)))) or ((icmp_ln795_reg_715_pp0_iter6_reg = ap_const_lv1_0) and (m_axi_C_V_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_C_V_BVALID, fifo_C_drain_local_in_V_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln795_reg_715, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter7, icmp_ln795_reg_715_pp0_iter6_reg, ap_block_state3_io, ap_block_state4_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or ((icmp_ln795_reg_715 = ap_const_lv1_0) and (fifo_C_drain_local_in_V_V_empty_n = ap_const_logic_0)))) or ((icmp_ln795_reg_715_pp0_iter6_reg = ap_const_lv1_0) and (m_axi_C_V_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, C_V_offset_empty_n)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = C_V_offset_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(m_axi_C_V_AWREADY, icmp_ln795_reg_715)
    begin
                ap_block_state3_io <= ((icmp_ln795_reg_715 = ap_const_lv1_0) and (m_axi_C_V_AWREADY = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage0_iter1_assign_proc : process(fifo_C_drain_local_in_V_V_empty_n, icmp_ln795_reg_715)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((icmp_ln795_reg_715 = ap_const_lv1_0) and (fifo_C_drain_local_in_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state4_io_assign_proc : process(m_axi_C_V_WREADY, icmp_ln795_reg_715_pp0_iter1_reg)
    begin
                ap_block_state4_io <= ((icmp_ln795_reg_715_pp0_iter1_reg = ap_const_lv1_0) and (m_axi_C_V_WREADY = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_pp0_stage0_iter7_assign_proc : process(m_axi_C_V_BVALID, icmp_ln795_reg_715_pp0_iter6_reg)
    begin
                ap_block_state9_pp0_stage0_iter7 <= ((icmp_ln795_reg_715_pp0_iter6_reg = ap_const_lv1_0) and (m_axi_C_V_BVALID = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln795_fu_277_p2)
    begin
        if ((icmp_ln795_fu_277_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c0_0_i_phi_fu_161_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln795_reg_715, c0_0_i_reg_157, select_ln795_reg_724)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln795_reg_715 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_c0_0_i_phi_fu_161_p4 <= select_ln795_reg_724;
        else 
            ap_phi_mux_c0_0_i_phi_fu_161_p4 <= c0_0_i_reg_157;
        end if; 
    end process;


    ap_phi_mux_c1_0_i_phi_fu_183_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln795_reg_715, c1_0_i_reg_179, select_ln796_2_reg_729)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln795_reg_715 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_c1_0_i_phi_fu_183_p4 <= select_ln796_2_reg_729;
        else 
            ap_phi_mux_c1_0_i_phi_fu_183_p4 <= c1_0_i_reg_179;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c5_fu_652_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln808_3_fu_561_p3));

    fifo_C_drain_local_in_V_V_blk_n_assign_proc : process(fifo_C_drain_local_in_V_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln795_reg_715)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln795_reg_715 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo_C_drain_local_in_V_V_blk_n <= fifo_C_drain_local_in_V_V_empty_n;
        else 
            fifo_C_drain_local_in_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fifo_C_drain_local_in_V_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln795_reg_715, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln795_reg_715 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fifo_C_drain_local_in_V_V_read <= ap_const_logic_1;
        else 
            fifo_C_drain_local_in_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln795_fu_277_p2 <= "1" when (indvar_flatten85_i_reg_146 = ap_const_lv6_20) else "0";
    icmp_ln796_fu_295_p2 <= "1" when (indvar_flatten47_i_reg_168 = ap_const_lv6_10) else "0";
    icmp_ln799_fu_369_p2 <= "1" when (indvar_flatten17_i_reg_190 = ap_const_lv5_8) else "0";
    icmp_ln801_fu_357_p2 <= "1" when (indvar_flatten_i_reg_212 = ap_const_lv4_4) else "0";
    icmp_ln803_fu_345_p2 <= "1" when (c5_0_i_reg_234 = ap_const_lv2_2) else "0";
    m_axi_C_V_ARADDR <= ap_const_lv32_0;
    m_axi_C_V_ARBURST <= ap_const_lv2_0;
    m_axi_C_V_ARCACHE <= ap_const_lv4_0;
    m_axi_C_V_ARID <= ap_const_lv1_0;
    m_axi_C_V_ARLEN <= ap_const_lv32_0;
    m_axi_C_V_ARLOCK <= ap_const_lv2_0;
    m_axi_C_V_ARPROT <= ap_const_lv3_0;
    m_axi_C_V_ARQOS <= ap_const_lv4_0;
    m_axi_C_V_ARREGION <= ap_const_lv4_0;
    m_axi_C_V_ARSIZE <= ap_const_lv3_0;
    m_axi_C_V_ARUSER <= ap_const_lv1_0;
    m_axi_C_V_ARVALID <= ap_const_logic_0;
    m_axi_C_V_AWADDR <= zext_ln321_1_fu_700_p1(32 - 1 downto 0);
    m_axi_C_V_AWBURST <= ap_const_lv2_0;
    m_axi_C_V_AWCACHE <= ap_const_lv4_0;
    m_axi_C_V_AWID <= ap_const_lv1_0;
    m_axi_C_V_AWLEN <= ap_const_lv32_1;
    m_axi_C_V_AWLOCK <= ap_const_lv2_0;
    m_axi_C_V_AWPROT <= ap_const_lv3_0;
    m_axi_C_V_AWQOS <= ap_const_lv4_0;
    m_axi_C_V_AWREGION <= ap_const_lv4_0;
    m_axi_C_V_AWSIZE <= ap_const_lv3_0;
    m_axi_C_V_AWUSER <= ap_const_lv1_0;

    m_axi_C_V_AWVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln795_reg_715, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln795_reg_715 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_C_V_AWVALID <= ap_const_logic_1;
        else 
            m_axi_C_V_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_C_V_BREADY_assign_proc : process(ap_enable_reg_pp0_iter7, icmp_ln795_reg_715_pp0_iter6_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln795_reg_715_pp0_iter6_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_C_V_BREADY <= ap_const_logic_1;
        else 
            m_axi_C_V_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_C_V_RREADY <= ap_const_logic_0;
    m_axi_C_V_WDATA <= tmp_V_reg_769;
    m_axi_C_V_WID <= ap_const_lv1_0;
    m_axi_C_V_WLAST <= ap_const_logic_0;
    m_axi_C_V_WSTRB <= ap_const_lv8_FF;
    m_axi_C_V_WUSER <= ap_const_lv1_0;

    m_axi_C_V_WVALID_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln795_reg_715_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln795_reg_715_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_C_V_WVALID <= ap_const_logic_1;
        else 
            m_axi_C_V_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    or_ln799_1_fu_447_p2 <= (xor_ln799_fu_441_p2 or icmp_ln796_fu_295_p2);
    or_ln799_fu_395_p2 <= (icmp_ln796_fu_295_p2 or and_ln796_3_fu_375_p2);
    or_ln808_1_fu_485_p2 <= (or_ln808_fu_479_p2 or icmp_ln796_fu_295_p2);
    or_ln808_1_i_fu_267_p4 <= ((trunc_ln808_1_fu_263_p1 & trunc_ln808_fu_259_p1) & ap_const_lv1_0);
    or_ln808_1_mid1_i_fu_573_p4 <= ((trunc_ln808_5_fu_421_p1 & trunc_ln808_8_fu_569_p1) & ap_const_lv1_0);
    or_ln808_1_mid3_i_fu_425_p3 <= (trunc_ln808_5_fu_421_p1 & ap_const_lv2_0);
    or_ln808_1_mid_i_fu_329_p3 <= (trunc_ln808_3_fu_325_p1 & ap_const_lv2_0);
    or_ln808_2_fu_549_p2 <= (and_ln808_fu_529_p2 or and_ln799_1_fu_459_p2);
    or_ln808_3_fu_555_p2 <= (or_ln808_2_fu_549_p2 or or_ln799_fu_395_p2);
    or_ln808_fu_479_p2 <= (and_ln799_1_fu_459_p2 or and_ln796_3_fu_375_p2);
    select_ln795_fu_381_p3 <= 
        add_ln795_1_fu_289_p2 when (icmp_ln796_fu_295_p2(0) = '1') else 
        ap_phi_mux_c0_0_i_phi_fu_161_p4;
    select_ln796_1_fu_337_p3 <= 
        or_ln808_1_mid_i_fu_329_p3 when (icmp_ln796_fu_295_p2(0) = '1') else 
        or_ln808_1_i_fu_267_p4;
    select_ln796_2_fu_465_p3 <= 
        add_ln796_fu_389_p2 when (and_ln796_3_fu_375_p2(0) = '1') else 
        select_ln796_fu_301_p3;
    select_ln796_3_fu_692_p3 <= 
        ap_const_lv6_1 when (icmp_ln796_fu_295_p2(0) = '1') else 
        add_ln796_1_fu_686_p2;
    select_ln796_fu_301_p3 <= 
        ap_const_lv2_0 when (icmp_ln796_fu_295_p2(0) = '1') else 
        ap_phi_mux_c1_0_i_phi_fu_183_p4;
    select_ln799_1_fu_413_p3 <= 
        trunc_ln808_4_fu_409_p1 when (and_ln796_3_fu_375_p2(0) = '1') else 
        and_ln796_fu_319_p2;
    select_ln799_2_fu_433_p3 <= 
        or_ln808_1_mid3_i_fu_425_p3 when (and_ln796_3_fu_375_p2(0) = '1') else 
        select_ln796_1_fu_337_p3;
    select_ln799_3_fu_535_p3 <= 
        add_ln799_fu_473_p2 when (and_ln799_1_fu_459_p2(0) = '1') else 
        select_ln799_fu_401_p3;
    select_ln799_4_fu_678_p3 <= 
        ap_const_lv5_1 when (or_ln799_fu_395_p2(0) = '1') else 
        add_ln799_1_fu_672_p2;
    select_ln799_fu_401_p3 <= 
        ap_const_lv2_0 when (or_ln799_fu_395_p2(0) = '1') else 
        c3_0_i_reg_201;
    select_ln801_1_fu_664_p3 <= 
        ap_const_lv4_1 when (or_ln808_1_fu_485_p2(0) = '1') else 
        add_ln801_1_fu_658_p2;
    select_ln801_fu_591_p3 <= 
        add_ln801_fu_543_p2 when (and_ln808_fu_529_p2(0) = '1') else 
        select_ln808_fu_491_p3;
    select_ln808_1_fu_507_p3 <= 
        trunc_ln808_7_fu_503_p1 when (and_ln799_1_fu_459_p2(0) = '1') else 
        select_ln799_1_fu_413_p3;
    select_ln808_2_fu_515_p3 <= 
        or_ln808_1_mid3_i_fu_425_p3 when (and_ln799_1_fu_459_p2(0) = '1') else 
        select_ln799_2_fu_433_p3;
    select_ln808_3_fu_561_p3 <= 
        ap_const_lv2_0 when (or_ln808_3_fu_555_p2(0) = '1') else 
        c5_0_i_reg_234;
    select_ln808_4_fu_583_p3 <= 
        or_ln808_1_mid1_i_fu_573_p4 when (and_ln808_fu_529_p2(0) = '1') else 
        select_ln808_2_fu_515_p3;
    select_ln808_5_fu_625_p3 <= 
        trunc_ln808_6_fu_499_p1 when (and_ln799_1_fu_459_p2(0) = '1') else 
        and_ln799_2_fu_619_p2;
    select_ln808_fu_491_p3 <= 
        ap_const_lv2_0 when (or_ln808_1_fu_485_p2(0) = '1') else 
        c4_0_i_reg_223;
    tmp_fu_245_p4 <= C_V_offset_dout(31 downto 3);
    trunc_ln808_1_fu_263_p1 <= ap_phi_mux_c0_0_i_phi_fu_161_p4(1 - 1 downto 0);
    trunc_ln808_2_fu_315_p1 <= ap_phi_mux_c1_0_i_phi_fu_183_p4(1 - 1 downto 0);
    trunc_ln808_3_fu_325_p1 <= add_ln795_1_fu_289_p2(1 - 1 downto 0);
    trunc_ln808_4_fu_409_p1 <= add_ln796_fu_389_p2(1 - 1 downto 0);
    trunc_ln808_5_fu_421_p1 <= select_ln795_fu_381_p3(1 - 1 downto 0);
    trunc_ln808_6_fu_499_p1 <= add_ln799_fu_473_p2(1 - 1 downto 0);
    trunc_ln808_7_fu_503_p1 <= select_ln796_2_fu_465_p3(1 - 1 downto 0);
    trunc_ln808_8_fu_569_p1 <= add_ln801_fu_543_p2(1 - 1 downto 0);
    trunc_ln808_9_fu_615_p1 <= c3_0_i_reg_201(1 - 1 downto 0);
    trunc_ln808_fu_259_p1 <= c4_0_i_reg_223(1 - 1 downto 0);
    trunc_ln_i_fu_633_p4 <= ((add_ln808_fu_603_p2 & select_ln808_1_fu_507_p3) & select_ln808_5_fu_625_p3);
    xor_ln796_fu_309_p2 <= (icmp_ln796_fu_295_p2 xor ap_const_lv1_1);
    xor_ln799_1_fu_609_p2 <= (or_ln799_fu_395_p2 xor ap_const_lv1_1);
    xor_ln799_fu_441_p2 <= (icmp_ln799_fu_369_p2 xor ap_const_lv1_1);
    xor_ln808_fu_523_p2 <= (ap_const_lv1_1 xor and_ln799_1_fu_459_p2);
    zext_ln321_1_fu_700_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_reg_744),64));
    zext_ln321_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln_i_fu_633_p4),30));
    zext_ln795_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_245_p4),30));
    zext_ln808_fu_599_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln808_3_fu_561_p3),3));
end behav;

-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity PE is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    fifo_A_in_V_V_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    fifo_A_in_V_V_empty_n : IN STD_LOGIC;
    fifo_A_in_V_V_read : OUT STD_LOGIC;
    fifo_A_out_V_V_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    fifo_A_out_V_V_full_n : IN STD_LOGIC;
    fifo_A_out_V_V_write : OUT STD_LOGIC;
    fifo_B_in_V_V_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    fifo_B_in_V_V_empty_n : IN STD_LOGIC;
    fifo_B_in_V_V_read : OUT STD_LOGIC;
    fifo_B_out_V_V_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    fifo_B_out_V_V_full_n : IN STD_LOGIC;
    fifo_B_out_V_V_write : OUT STD_LOGIC;
    fifo_C_drain_out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    fifo_C_drain_out_V_full_n : IN STD_LOGIC;
    fifo_C_drain_out_V_write : OUT STD_LOGIC );
end;


architecture behav of PE is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal fifo_A_in_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln449_reg_758 : STD_LOGIC_VECTOR (0 downto 0);
    signal fifo_A_out_V_V_blk_n : STD_LOGIC;
    signal fifo_B_in_V_V_blk_n : STD_LOGIC;
    signal fifo_B_out_V_V_blk_n : STD_LOGIC;
    signal fifo_C_drain_out_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal select_ln480_12_reg_772 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln480_12_reg_772_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten46_reg_254 : STD_LOGIC_VECTOR (4 downto 0);
    signal c2_0_reg_265 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten20_reg_276 : STD_LOGIC_VECTOR (4 downto 0);
    signal c5_0_reg_287 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten6_reg_298 : STD_LOGIC_VECTOR (3 downto 0);
    signal c61_0_reg_309 : STD_LOGIC_VECTOR (1 downto 0);
    signal c72_0_reg_320 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln435_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln435_fu_337_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln435_reg_735 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln440_fu_349_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal select_ln446_4_fu_375_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln440_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c7_fu_410_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln449_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state5_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state8_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln449_reg_758_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln449_reg_758_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln449_fu_440_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal select_ln449_fu_516_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln480_12_fu_556_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln480_12_reg_772_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln452_fu_582_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln479_fu_608_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln479_reg_781 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln479_4_fu_616_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln479_4_reg_786 : STD_LOGIC_VECTOR (1 downto 0);
    signal c7_4_fu_624_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln454_fu_636_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln452_4_fu_650_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Repl2_11_fu_661_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Repl2_11_reg_807 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Repl2_12_reg_812 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Repl2_s_fu_675_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Repl2_s_reg_817 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Repl2_10_reg_822 : STD_LOGIC_VECTOR (31 downto 0);
    signal local_C_addr_4_reg_827 : STD_LOGIC_VECTOR (1 downto 0);
    signal local_C_addr_4_reg_827_pp1_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln479_fu_711_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln479_reg_833 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln479_1_fu_715_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln479_1_reg_838 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state5 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal local_C_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal local_C_ce0 : STD_LOGIC;
    signal local_C_we0 : STD_LOGIC;
    signal local_C_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal local_C_ce1 : STD_LOGIC;
    signal local_C_we1 : STD_LOGIC;
    signal indvar_flatten53_reg_210 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal indvar_flatten_reg_221 : STD_LOGIC_VECTOR (2 downto 0);
    signal c6_0_reg_232 : STD_LOGIC_VECTOR (1 downto 0);
    signal c7_0_reg_243 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_c61_0_phi_fu_313_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln446_4_fu_405_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln479_8_fu_706_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal tmp_5_fu_723_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln442_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c6_fu_355_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln446_fu_367_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_387_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln442_fu_383_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln446_fu_395_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln446_fu_399_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln480_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln480_1_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln452_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln480_8_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln480_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln480_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln456_fu_492_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln454_fu_504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c2_fu_446_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln480_fu_458_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln480_18_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln480_fu_530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln480_10_fu_472_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln480_9_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln480_19_fu_550_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln480_16_fu_486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln480_4_fu_564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln480_17_fu_498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln480_4_fu_570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c5_fu_524_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln480_11_fu_536_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln480_20_fu_576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln479_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln479_4_fu_602_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c6_6_fu_590_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln454_4_fu_630_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln452_4_fu_644_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_fu_689_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln479_7_fu_696_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln479_fu_658_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln479_7_fu_700_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln479_fu_719_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component PE139_local_C IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    local_C_U : component PE139_local_C
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => local_C_address0,
        ce0 => local_C_ce0,
        we0 => local_C_we0,
        d0 => ap_const_lv32_0,
        q0 => local_C_q0,
        address1 => local_C_addr_4_reg_827_pp1_iter2_reg,
        ce1 => local_C_ce1,
        we1 => local_C_we1,
        d1 => tmp_5_fu_723_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln435_fu_331_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state5);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c2_0_reg_265_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                c2_0_reg_265 <= ap_const_lv2_0;
            elsif (((icmp_ln449_fu_434_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                c2_0_reg_265 <= select_ln449_fu_516_p3;
            end if; 
        end if;
    end process;

    c5_0_reg_287_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                c5_0_reg_287 <= ap_const_lv2_0;
            elsif (((icmp_ln449_fu_434_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                c5_0_reg_287 <= select_ln452_fu_582_p3;
            end if; 
        end if;
    end process;

    c61_0_reg_309_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                c61_0_reg_309 <= ap_const_lv2_0;
            elsif (((icmp_ln449_reg_758 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                c61_0_reg_309 <= select_ln479_4_reg_786;
            end if; 
        end if;
    end process;

    c6_0_reg_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln440_fu_343_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                c6_0_reg_232 <= select_ln446_4_fu_375_p3;
            elsif (((icmp_ln435_fu_331_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                c6_0_reg_232 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    c72_0_reg_320_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                c72_0_reg_320 <= ap_const_lv2_0;
            elsif (((icmp_ln449_fu_434_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                c72_0_reg_320 <= c7_4_fu_624_p2;
            end if; 
        end if;
    end process;

    c7_0_reg_243_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln440_fu_343_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                c7_0_reg_243 <= c7_fu_410_p2;
            elsif (((icmp_ln435_fu_331_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                c7_0_reg_243 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    indvar_flatten20_reg_276_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                indvar_flatten20_reg_276 <= ap_const_lv5_0;
            elsif (((icmp_ln449_fu_434_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                indvar_flatten20_reg_276 <= select_ln452_4_fu_650_p3;
            end if; 
        end if;
    end process;

    indvar_flatten46_reg_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                indvar_flatten46_reg_254 <= ap_const_lv5_0;
            elsif (((icmp_ln449_fu_434_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                indvar_flatten46_reg_254 <= add_ln449_fu_440_p2;
            end if; 
        end if;
    end process;

    indvar_flatten53_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                indvar_flatten53_reg_210 <= add_ln435_reg_735;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten53_reg_210 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    indvar_flatten6_reg_298_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                indvar_flatten6_reg_298 <= ap_const_lv4_0;
            elsif (((icmp_ln449_fu_434_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                indvar_flatten6_reg_298 <= select_ln454_fu_636_p3;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln440_fu_343_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                indvar_flatten_reg_221 <= add_ln440_fu_349_p2;
            elsif (((icmp_ln435_fu_331_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten_reg_221 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln435_reg_735 <= add_ln435_fu_337_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln449_reg_758 <= icmp_ln449_fu_434_p2;
                icmp_ln449_reg_758_pp1_iter1_reg <= icmp_ln449_reg_758;
                select_ln480_12_reg_772_pp1_iter1_reg <= select_ln480_12_reg_772;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                icmp_ln449_reg_758_pp1_iter2_reg <= icmp_ln449_reg_758_pp1_iter1_reg;
                local_C_addr_4_reg_827_pp1_iter2_reg <= local_C_addr_4_reg_827;
                select_ln480_12_reg_772_pp1_iter2_reg <= select_ln480_12_reg_772_pp1_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln449_reg_758 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                local_C_addr_4_reg_827 <= zext_ln479_8_fu_706_p1(2 - 1 downto 0);
                p_Repl2_10_reg_822 <= fifo_B_in_V_V_dout(63 downto 32);
                p_Repl2_11_reg_807 <= p_Repl2_11_fu_661_p1;
                p_Repl2_12_reg_812 <= fifo_A_in_V_V_dout(63 downto 32);
                p_Repl2_s_reg_817 <= p_Repl2_s_fu_675_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln449_reg_758_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                mul_ln479_1_reg_838 <= mul_ln479_1_fu_715_p2;
                mul_ln479_reg_833 <= mul_ln479_fu_711_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln449_fu_434_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                select_ln479_4_reg_786 <= select_ln479_4_fu_616_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln449_fu_434_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                select_ln479_reg_781 <= select_ln479_fu_608_p3;
                select_ln480_12_reg_772 <= select_ln480_12_fu_556_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter3, icmp_ln435_fu_331_p2, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln440_fu_343_p2, icmp_ln449_fu_434_p2, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln435_fu_331_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln440_fu_343_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((icmp_ln449_fu_434_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1)) or ((icmp_ln449_fu_434_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln435_fu_337_p2 <= std_logic_vector(unsigned(indvar_flatten53_reg_210) + unsigned(ap_const_lv3_1));
    add_ln440_fu_349_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_221) + unsigned(ap_const_lv3_1));
    add_ln446_fu_399_p2 <= std_logic_vector(unsigned(zext_ln442_fu_383_p1) + unsigned(zext_ln446_fu_395_p1));
    add_ln449_fu_440_p2 <= std_logic_vector(unsigned(indvar_flatten46_reg_254) + unsigned(ap_const_lv5_1));
    add_ln452_4_fu_644_p2 <= std_logic_vector(unsigned(indvar_flatten20_reg_276) + unsigned(ap_const_lv5_1));
    add_ln454_4_fu_630_p2 <= std_logic_vector(unsigned(indvar_flatten6_reg_298) + unsigned(ap_const_lv4_1));
    add_ln479_7_fu_700_p2 <= std_logic_vector(unsigned(zext_ln479_7_fu_696_p1) + unsigned(zext_ln479_fu_658_p1));
    add_ln479_fu_719_p2 <= std_logic_vector(unsigned(mul_ln479_1_reg_838) + unsigned(mul_ln479_reg_833));
    and_ln480_16_fu_486_p2 <= (xor_ln480_fu_480_p2 and and_ln480_fu_428_p2);
    and_ln480_17_fu_498_p2 <= (xor_ln480_fu_480_p2 and icmp_ln456_fu_492_p2);
    and_ln480_18_fu_510_p2 <= (xor_ln480_fu_480_p2 and icmp_ln454_fu_504_p2);
    and_ln480_19_fu_550_p2 <= (select_ln480_10_fu_472_p3 and icmp_ln480_9_fu_544_p2);
    and_ln480_20_fu_576_p2 <= (or_ln480_4_fu_570_p2 and and_ln480_17_fu_498_p2);
    and_ln480_fu_428_p2 <= (icmp_ln480_fu_416_p2 and icmp_ln480_1_fu_422_p2);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state9 <= ap_CS_fsm(5);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_01001_assign_proc : process(fifo_A_in_V_V_empty_n, fifo_A_out_V_V_full_n, fifo_B_in_V_V_empty_n, fifo_B_out_V_V_full_n, fifo_C_drain_out_V_full_n, ap_enable_reg_pp1_iter1, icmp_ln449_reg_758, ap_enable_reg_pp1_iter3, select_ln480_12_reg_772_pp1_iter2_reg)
    begin
                ap_block_pp1_stage0_01001 <= (((select_ln480_12_reg_772_pp1_iter2_reg = ap_const_lv1_1) and (fifo_C_drain_out_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (((icmp_ln449_reg_758 = ap_const_lv1_0) and (fifo_A_out_V_V_full_n = ap_const_logic_0)) or ((icmp_ln449_reg_758 = ap_const_lv1_0) and (fifo_B_out_V_V_full_n = ap_const_logic_0)) or ((icmp_ln449_reg_758 = ap_const_lv1_0) and (fifo_B_in_V_V_empty_n = ap_const_logic_0)) or ((icmp_ln449_reg_758 = ap_const_lv1_0) and (fifo_A_in_V_V_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp1_stage0_11001_assign_proc : process(fifo_A_in_V_V_empty_n, fifo_A_out_V_V_full_n, fifo_B_in_V_V_empty_n, fifo_B_out_V_V_full_n, fifo_C_drain_out_V_full_n, ap_enable_reg_pp1_iter1, icmp_ln449_reg_758, ap_enable_reg_pp1_iter3, select_ln480_12_reg_772_pp1_iter2_reg)
    begin
                ap_block_pp1_stage0_11001 <= (((select_ln480_12_reg_772_pp1_iter2_reg = ap_const_lv1_1) and (fifo_C_drain_out_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (((icmp_ln449_reg_758 = ap_const_lv1_0) and (fifo_A_out_V_V_full_n = ap_const_logic_0)) or ((icmp_ln449_reg_758 = ap_const_lv1_0) and (fifo_B_out_V_V_full_n = ap_const_logic_0)) or ((icmp_ln449_reg_758 = ap_const_lv1_0) and (fifo_B_in_V_V_empty_n = ap_const_logic_0)) or ((icmp_ln449_reg_758 = ap_const_lv1_0) and (fifo_A_in_V_V_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(fifo_A_in_V_V_empty_n, fifo_A_out_V_V_full_n, fifo_B_in_V_V_empty_n, fifo_B_out_V_V_full_n, fifo_C_drain_out_V_full_n, ap_enable_reg_pp1_iter1, icmp_ln449_reg_758, ap_enable_reg_pp1_iter3, select_ln480_12_reg_772_pp1_iter2_reg)
    begin
                ap_block_pp1_stage0_subdone <= (((select_ln480_12_reg_772_pp1_iter2_reg = ap_const_lv1_1) and (fifo_C_drain_out_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (((icmp_ln449_reg_758 = ap_const_lv1_0) and (fifo_A_out_V_V_full_n = ap_const_logic_0)) or ((icmp_ln449_reg_758 = ap_const_lv1_0) and (fifo_B_out_V_V_full_n = ap_const_logic_0)) or ((icmp_ln449_reg_758 = ap_const_lv1_0) and (fifo_B_in_V_V_empty_n = ap_const_logic_0)) or ((icmp_ln449_reg_758 = ap_const_lv1_0) and (fifo_A_in_V_V_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state5_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp1_stage0_iter1_assign_proc : process(fifo_A_in_V_V_empty_n, fifo_A_out_V_V_full_n, fifo_B_in_V_V_empty_n, fifo_B_out_V_V_full_n, icmp_ln449_reg_758)
    begin
                ap_block_state6_pp1_stage0_iter1 <= (((icmp_ln449_reg_758 = ap_const_lv1_0) and (fifo_A_out_V_V_full_n = ap_const_logic_0)) or ((icmp_ln449_reg_758 = ap_const_lv1_0) and (fifo_B_out_V_V_full_n = ap_const_logic_0)) or ((icmp_ln449_reg_758 = ap_const_lv1_0) and (fifo_B_in_V_V_empty_n = ap_const_logic_0)) or ((icmp_ln449_reg_758 = ap_const_lv1_0) and (fifo_A_in_V_V_empty_n = ap_const_logic_0)));
    end process;

        ap_block_state7_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_pp1_stage0_iter3_assign_proc : process(fifo_C_drain_out_V_full_n, select_ln480_12_reg_772_pp1_iter2_reg)
    begin
                ap_block_state8_pp1_stage0_iter3 <= ((select_ln480_12_reg_772_pp1_iter2_reg = ap_const_lv1_1) and (fifo_C_drain_out_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp1_exit_iter0_state5_assign_proc : process(icmp_ln449_fu_434_p2)
    begin
        if ((icmp_ln449_fu_434_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, icmp_ln435_fu_331_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln435_fu_331_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c61_0_phi_fu_313_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln449_reg_758, c61_0_reg_309, select_ln479_4_reg_786)
    begin
        if (((icmp_ln449_reg_758 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_c61_0_phi_fu_313_p4 <= select_ln479_4_reg_786;
        else 
            ap_phi_mux_c61_0_phi_fu_313_p4 <= c61_0_reg_309;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    c2_fu_446_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(c2_0_reg_265));
    c5_fu_524_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln480_fu_458_p3));
    c6_6_fu_590_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln480_11_fu_536_p3));
    c6_fu_355_p2 <= std_logic_vector(unsigned(c6_0_reg_232) + unsigned(ap_const_lv2_1));
    c7_4_fu_624_p2 <= std_logic_vector(unsigned(select_ln479_fu_608_p3) + unsigned(ap_const_lv2_1));
    c7_fu_410_p2 <= std_logic_vector(unsigned(select_ln446_fu_367_p3) + unsigned(ap_const_lv2_1));

    fifo_A_in_V_V_blk_n_assign_proc : process(fifo_A_in_V_V_empty_n, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln449_reg_758)
    begin
        if (((icmp_ln449_reg_758 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            fifo_A_in_V_V_blk_n <= fifo_A_in_V_V_empty_n;
        else 
            fifo_A_in_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fifo_A_in_V_V_read_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln449_reg_758, ap_block_pp1_stage0_11001)
    begin
        if (((icmp_ln449_reg_758 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            fifo_A_in_V_V_read <= ap_const_logic_1;
        else 
            fifo_A_in_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    fifo_A_out_V_V_blk_n_assign_proc : process(fifo_A_out_V_V_full_n, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln449_reg_758)
    begin
        if (((icmp_ln449_reg_758 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            fifo_A_out_V_V_blk_n <= fifo_A_out_V_V_full_n;
        else 
            fifo_A_out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fifo_A_out_V_V_din <= fifo_A_in_V_V_dout;

    fifo_A_out_V_V_write_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln449_reg_758, ap_block_pp1_stage0_11001)
    begin
        if (((icmp_ln449_reg_758 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            fifo_A_out_V_V_write <= ap_const_logic_1;
        else 
            fifo_A_out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;


    fifo_B_in_V_V_blk_n_assign_proc : process(fifo_B_in_V_V_empty_n, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln449_reg_758)
    begin
        if (((icmp_ln449_reg_758 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            fifo_B_in_V_V_blk_n <= fifo_B_in_V_V_empty_n;
        else 
            fifo_B_in_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fifo_B_in_V_V_read_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln449_reg_758, ap_block_pp1_stage0_11001)
    begin
        if (((icmp_ln449_reg_758 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            fifo_B_in_V_V_read <= ap_const_logic_1;
        else 
            fifo_B_in_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    fifo_B_out_V_V_blk_n_assign_proc : process(fifo_B_out_V_V_full_n, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln449_reg_758)
    begin
        if (((icmp_ln449_reg_758 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            fifo_B_out_V_V_blk_n <= fifo_B_out_V_V_full_n;
        else 
            fifo_B_out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fifo_B_out_V_V_din <= fifo_B_in_V_V_dout;

    fifo_B_out_V_V_write_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln449_reg_758, ap_block_pp1_stage0_11001)
    begin
        if (((icmp_ln449_reg_758 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            fifo_B_out_V_V_write <= ap_const_logic_1;
        else 
            fifo_B_out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;


    fifo_C_drain_out_V_blk_n_assign_proc : process(fifo_C_drain_out_V_full_n, ap_block_pp1_stage0, ap_enable_reg_pp1_iter3, select_ln480_12_reg_772_pp1_iter2_reg)
    begin
        if (((select_ln480_12_reg_772_pp1_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            fifo_C_drain_out_V_blk_n <= fifo_C_drain_out_V_full_n;
        else 
            fifo_C_drain_out_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fifo_C_drain_out_V_din <= tmp_5_fu_723_p2;

    fifo_C_drain_out_V_write_assign_proc : process(ap_enable_reg_pp1_iter3, select_ln480_12_reg_772_pp1_iter2_reg, ap_block_pp1_stage0_11001)
    begin
        if (((select_ln480_12_reg_772_pp1_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            fifo_C_drain_out_V_write <= ap_const_logic_1;
        else 
            fifo_C_drain_out_V_write <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln435_fu_331_p2 <= "1" when (indvar_flatten53_reg_210 = ap_const_lv3_4) else "0";
    icmp_ln440_fu_343_p2 <= "1" when (indvar_flatten_reg_221 = ap_const_lv3_4) else "0";
    icmp_ln442_fu_361_p2 <= "1" when (c7_0_reg_243 = ap_const_lv2_2) else "0";
    icmp_ln449_fu_434_p2 <= "1" when (indvar_flatten46_reg_254 = ap_const_lv5_10) else "0";
    icmp_ln452_fu_452_p2 <= "1" when (indvar_flatten20_reg_276 = ap_const_lv5_8) else "0";
    icmp_ln454_fu_504_p2 <= "1" when (indvar_flatten6_reg_298 = ap_const_lv4_4) else "0";
    icmp_ln456_fu_492_p2 <= "1" when (c72_0_reg_320 = ap_const_lv2_2) else "0";
    icmp_ln480_1_fu_422_p2 <= "1" when (c5_0_reg_287 = ap_const_lv2_1) else "0";
    icmp_ln480_8_fu_466_p2 <= "1" when (c2_0_reg_265 = ap_const_lv2_0) else "0";
    icmp_ln480_9_fu_544_p2 <= "1" when (select_ln480_fu_458_p3 = ap_const_lv2_0) else "0";
    icmp_ln480_fu_416_p2 <= "1" when (c2_0_reg_265 = ap_const_lv2_1) else "0";

    internal_ap_ready_assign_proc : process(icmp_ln435_fu_331_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln435_fu_331_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    local_C_address0_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_state3, local_C_addr_4_reg_827, ap_enable_reg_pp1_iter2, zext_ln446_4_fu_405_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            local_C_address0 <= local_C_addr_4_reg_827;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            local_C_address0 <= zext_ln446_4_fu_405_p1(2 - 1 downto 0);
        else 
            local_C_address0 <= "XX";
        end if; 
    end process;


    local_C_ce0_assign_proc : process(ap_CS_fsm_state3, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            local_C_ce0 <= ap_const_logic_1;
        else 
            local_C_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    local_C_ce1_assign_proc : process(ap_enable_reg_pp1_iter3, ap_block_pp1_stage0_11001)
    begin
        if (((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            local_C_ce1 <= ap_const_logic_1;
        else 
            local_C_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    local_C_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln440_fu_343_p2)
    begin
        if (((icmp_ln440_fu_343_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            local_C_we0 <= ap_const_logic_1;
        else 
            local_C_we0 <= ap_const_logic_0;
        end if; 
    end process;


    local_C_we1_assign_proc : process(ap_enable_reg_pp1_iter3, ap_block_pp1_stage0_11001, icmp_ln449_reg_758_pp1_iter2_reg)
    begin
        if (((icmp_ln449_reg_758_pp1_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            local_C_we1 <= ap_const_logic_1;
        else 
            local_C_we1 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln479_1_fu_715_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Repl2_12_reg_812) * signed(p_Repl2_10_reg_822))), 32));
    mul_ln479_fu_711_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Repl2_11_reg_807) * signed(p_Repl2_s_reg_817))), 32));
    or_ln479_4_fu_602_p2 <= (or_ln479_fu_596_p2 or icmp_ln452_fu_452_p2);
    or_ln479_fu_596_p2 <= (and_ln480_20_fu_576_p2 or and_ln480_18_fu_510_p2);
    or_ln480_4_fu_570_p2 <= (xor_ln480_4_fu_564_p2 or icmp_ln452_fu_452_p2);
    or_ln480_fu_530_p2 <= (icmp_ln452_fu_452_p2 or and_ln480_18_fu_510_p2);
    p_Repl2_11_fu_661_p1 <= fifo_A_in_V_V_dout(32 - 1 downto 0);
    p_Repl2_s_fu_675_p1 <= fifo_B_in_V_V_dout(32 - 1 downto 0);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    select_ln446_4_fu_375_p3 <= 
        c6_fu_355_p2 when (icmp_ln442_fu_361_p2(0) = '1') else 
        c6_0_reg_232;
    select_ln446_fu_367_p3 <= 
        ap_const_lv2_0 when (icmp_ln442_fu_361_p2(0) = '1') else 
        c7_0_reg_243;
    select_ln449_fu_516_p3 <= 
        c2_fu_446_p2 when (icmp_ln452_fu_452_p2(0) = '1') else 
        c2_0_reg_265;
    select_ln452_4_fu_650_p3 <= 
        ap_const_lv5_1 when (icmp_ln452_fu_452_p2(0) = '1') else 
        add_ln452_4_fu_644_p2;
    select_ln452_fu_582_p3 <= 
        c5_fu_524_p2 when (and_ln480_18_fu_510_p2(0) = '1') else 
        select_ln480_fu_458_p3;
    select_ln454_fu_636_p3 <= 
        ap_const_lv4_1 when (or_ln480_fu_530_p2(0) = '1') else 
        add_ln454_4_fu_630_p2;
    select_ln479_4_fu_616_p3 <= 
        c6_6_fu_590_p2 when (and_ln480_20_fu_576_p2(0) = '1') else 
        select_ln480_11_fu_536_p3;
    select_ln479_fu_608_p3 <= 
        ap_const_lv2_0 when (or_ln479_4_fu_602_p2(0) = '1') else 
        c72_0_reg_320;
    select_ln480_10_fu_472_p3 <= 
        icmp_ln480_8_fu_466_p2 when (icmp_ln452_fu_452_p2(0) = '1') else 
        icmp_ln480_fu_416_p2;
    select_ln480_11_fu_536_p3 <= 
        ap_const_lv2_0 when (or_ln480_fu_530_p2(0) = '1') else 
        ap_phi_mux_c61_0_phi_fu_313_p4;
    select_ln480_12_fu_556_p3 <= 
        and_ln480_19_fu_550_p2 when (and_ln480_18_fu_510_p2(0) = '1') else 
        and_ln480_16_fu_486_p2;
    select_ln480_fu_458_p3 <= 
        ap_const_lv2_0 when (icmp_ln452_fu_452_p2(0) = '1') else 
        c5_0_reg_287;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_2_fu_387_p3 <= (select_ln446_fu_367_p3 & ap_const_lv1_0);
    tmp_3_fu_689_p3 <= (select_ln479_reg_781 & ap_const_lv1_0);
    tmp_5_fu_723_p2 <= std_logic_vector(unsigned(local_C_q0) + unsigned(add_ln479_fu_719_p2));
    xor_ln480_4_fu_564_p2 <= (icmp_ln454_fu_504_p2 xor ap_const_lv1_1);
    xor_ln480_fu_480_p2 <= (icmp_ln452_fu_452_p2 xor ap_const_lv1_1);
    zext_ln442_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln446_4_fu_375_p3),4));
    zext_ln446_4_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln446_fu_399_p2),64));
    zext_ln446_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_387_p3),4));
    zext_ln479_7_fu_696_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_689_p3),4));
    zext_ln479_8_fu_706_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln479_7_fu_700_p2),64));
    zext_ln479_fu_658_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln479_4_reg_786),4));
end behav;

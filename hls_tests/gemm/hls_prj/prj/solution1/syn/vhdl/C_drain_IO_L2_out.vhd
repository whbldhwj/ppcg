-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity C_drain_IO_L2_out is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    fifo_C_drain_in_V_V_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    fifo_C_drain_in_V_V_empty_n : IN STD_LOGIC;
    fifo_C_drain_in_V_V_read : OUT STD_LOGIC;
    fifo_C_drain_out_V_V_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    fifo_C_drain_out_V_V_full_n : IN STD_LOGIC;
    fifo_C_drain_out_V_V_write : OUT STD_LOGIC;
    fifo_C_drain_local_in_V_V_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    fifo_C_drain_local_in_V_V_empty_n : IN STD_LOGIC;
    fifo_C_drain_local_in_V_V_read : OUT STD_LOGIC );
end;


architecture behav of C_drain_IO_L2_out is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal fifo_C_drain_in_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln738_reg_364 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln750_reg_373 : STD_LOGIC_VECTOR (0 downto 0);
    signal fifo_C_drain_out_V_V_blk_n : STD_LOGIC;
    signal fifo_C_drain_local_in_V_V_blk_n : STD_LOGIC;
    signal indvar_flatten63_reg_117 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten33_reg_128 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten11_reg_139 : STD_LOGIC_VECTOR (4 downto 0);
    signal c3_0_reg_150 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_reg_161 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln738_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_predicate_op47_read_state3 : BOOLEAN;
    signal ap_predicate_op49_read_state3 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln738_fu_190_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln750_fu_294_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln742_1_fu_302_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln744_fu_328_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln742_2_fu_342_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln739_fu_356_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_phi_mux_tmp_V_phi_fu_175_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter1_tmp_V_reg_172 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln739_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln750_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln739_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln744_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln742_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln739_2_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln742_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln742_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln739_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln742_1_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln739_1_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln742_fu_250_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln742_1_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln750_1_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln742_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c3_fu_282_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln744_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln744_1_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln744_fu_310_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln742_1_fu_336_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln739_fu_350_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c3_0_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln738_fu_184_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                c3_0_reg_150 <= select_ln742_1_fu_302_p3;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c3_0_reg_150 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    indvar_flatten11_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln738_fu_184_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten11_reg_139 <= select_ln742_2_fu_342_p3;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten11_reg_139 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten33_reg_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln738_fu_184_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten33_reg_128 <= select_ln739_fu_356_p3;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten33_reg_128 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten63_reg_117_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln738_fu_184_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten63_reg_117 <= add_ln738_fu_190_p2;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten63_reg_117 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln738_fu_184_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_161 <= select_ln744_fu_328_p3;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_161 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln738_reg_364 <= icmp_ln738_fu_184_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln738_fu_184_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln750_reg_373 <= select_ln750_fu_294_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln738_fu_184_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln738_fu_184_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln738_fu_184_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln738_fu_190_p2 <= std_logic_vector(unsigned(indvar_flatten63_reg_117) + unsigned(ap_const_lv6_1));
    add_ln739_fu_350_p2 <= std_logic_vector(unsigned(indvar_flatten33_reg_128) + unsigned(ap_const_lv6_1));
    add_ln742_1_fu_336_p2 <= std_logic_vector(unsigned(indvar_flatten11_reg_139) + unsigned(ap_const_lv5_1));
    add_ln744_fu_310_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_161) + unsigned(ap_const_lv4_1));
    and_ln739_1_fu_226_p2 <= (xor_ln739_fu_202_p2 and icmp_ln744_fu_220_p2);
    and_ln739_2_fu_238_p2 <= (xor_ln739_fu_202_p2 and icmp_ln742_fu_232_p2);
    and_ln739_fu_214_p2 <= (xor_ln739_fu_202_p2 and icmp_ln750_fu_208_p2);
    and_ln742_1_fu_276_p2 <= (or_ln742_1_fu_264_p2 and and_ln739_1_fu_226_p2);
    and_ln742_fu_270_p2 <= (or_ln742_1_fu_264_p2 and and_ln739_fu_214_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(fifo_C_drain_in_V_V_empty_n, fifo_C_drain_out_V_V_full_n, fifo_C_drain_local_in_V_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln738_reg_364, ap_predicate_op47_read_state3, ap_predicate_op49_read_state3)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((fifo_C_drain_local_in_V_V_empty_n = ap_const_logic_0) and (ap_predicate_op49_read_state3 = ap_const_boolean_1)) or ((fifo_C_drain_in_V_V_empty_n = ap_const_logic_0) and (ap_predicate_op47_read_state3 = ap_const_boolean_1)) or ((icmp_ln738_reg_364 = ap_const_lv1_0) and (fifo_C_drain_out_V_V_full_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(fifo_C_drain_in_V_V_empty_n, fifo_C_drain_out_V_V_full_n, fifo_C_drain_local_in_V_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln738_reg_364, ap_predicate_op47_read_state3, ap_predicate_op49_read_state3)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((fifo_C_drain_local_in_V_V_empty_n = ap_const_logic_0) and (ap_predicate_op49_read_state3 = ap_const_boolean_1)) or ((fifo_C_drain_in_V_V_empty_n = ap_const_logic_0) and (ap_predicate_op47_read_state3 = ap_const_boolean_1)) or ((icmp_ln738_reg_364 = ap_const_lv1_0) and (fifo_C_drain_out_V_V_full_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(fifo_C_drain_in_V_V_empty_n, fifo_C_drain_out_V_V_full_n, fifo_C_drain_local_in_V_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln738_reg_364, ap_predicate_op47_read_state3, ap_predicate_op49_read_state3)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((fifo_C_drain_local_in_V_V_empty_n = ap_const_logic_0) and (ap_predicate_op49_read_state3 = ap_const_boolean_1)) or ((fifo_C_drain_in_V_V_empty_n = ap_const_logic_0) and (ap_predicate_op47_read_state3 = ap_const_boolean_1)) or ((icmp_ln738_reg_364 = ap_const_lv1_0) and (fifo_C_drain_out_V_V_full_n = ap_const_logic_0))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(fifo_C_drain_in_V_V_empty_n, fifo_C_drain_out_V_V_full_n, fifo_C_drain_local_in_V_V_empty_n, icmp_ln738_reg_364, ap_predicate_op47_read_state3, ap_predicate_op49_read_state3)
    begin
                ap_block_state3_pp0_stage0_iter1 <= (((fifo_C_drain_local_in_V_V_empty_n = ap_const_logic_0) and (ap_predicate_op49_read_state3 = ap_const_boolean_1)) or ((fifo_C_drain_in_V_V_empty_n = ap_const_logic_0) and (ap_predicate_op47_read_state3 = ap_const_boolean_1)) or ((icmp_ln738_reg_364 = ap_const_lv1_0) and (fifo_C_drain_out_V_V_full_n = ap_const_logic_0)));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln738_fu_184_p2)
    begin
        if ((icmp_ln738_fu_184_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_tmp_V_phi_fu_175_p4_assign_proc : process(fifo_C_drain_in_V_V_dout, fifo_C_drain_local_in_V_V_dout, icmp_ln738_reg_364, select_ln750_reg_373, ap_phi_reg_pp0_iter1_tmp_V_reg_172)
    begin
        if ((icmp_ln738_reg_364 = ap_const_lv1_0)) then
            if ((select_ln750_reg_373 = ap_const_lv1_0)) then 
                ap_phi_mux_tmp_V_phi_fu_175_p4 <= fifo_C_drain_in_V_V_dout;
            elsif ((select_ln750_reg_373 = ap_const_lv1_1)) then 
                ap_phi_mux_tmp_V_phi_fu_175_p4 <= fifo_C_drain_local_in_V_V_dout;
            else 
                ap_phi_mux_tmp_V_phi_fu_175_p4 <= ap_phi_reg_pp0_iter1_tmp_V_reg_172;
            end if;
        else 
            ap_phi_mux_tmp_V_phi_fu_175_p4 <= ap_phi_reg_pp0_iter1_tmp_V_reg_172;
        end if; 
    end process;

    ap_phi_reg_pp0_iter1_tmp_V_reg_172 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op47_read_state3_assign_proc : process(icmp_ln738_reg_364, select_ln750_reg_373)
    begin
                ap_predicate_op47_read_state3 <= ((select_ln750_reg_373 = ap_const_lv1_0) and (icmp_ln738_reg_364 = ap_const_lv1_0));
    end process;


    ap_predicate_op49_read_state3_assign_proc : process(icmp_ln738_reg_364, select_ln750_reg_373)
    begin
                ap_predicate_op49_read_state3 <= ((select_ln750_reg_373 = ap_const_lv1_1) and (icmp_ln738_reg_364 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c3_fu_282_p2 <= std_logic_vector(unsigned(select_ln742_fu_250_p3) + unsigned(ap_const_lv2_1));

    fifo_C_drain_in_V_V_blk_n_assign_proc : process(fifo_C_drain_in_V_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln738_reg_364, select_ln750_reg_373)
    begin
        if (((select_ln750_reg_373 = ap_const_lv1_0) and (icmp_ln738_reg_364 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo_C_drain_in_V_V_blk_n <= fifo_C_drain_in_V_V_empty_n;
        else 
            fifo_C_drain_in_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fifo_C_drain_in_V_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op47_read_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op47_read_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo_C_drain_in_V_V_read <= ap_const_logic_1;
        else 
            fifo_C_drain_in_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    fifo_C_drain_local_in_V_V_blk_n_assign_proc : process(fifo_C_drain_local_in_V_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln738_reg_364, select_ln750_reg_373)
    begin
        if (((select_ln750_reg_373 = ap_const_lv1_1) and (icmp_ln738_reg_364 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo_C_drain_local_in_V_V_blk_n <= fifo_C_drain_local_in_V_V_empty_n;
        else 
            fifo_C_drain_local_in_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fifo_C_drain_local_in_V_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op49_read_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op49_read_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo_C_drain_local_in_V_V_read <= ap_const_logic_1;
        else 
            fifo_C_drain_local_in_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    fifo_C_drain_out_V_V_blk_n_assign_proc : process(fifo_C_drain_out_V_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln738_reg_364)
    begin
        if (((icmp_ln738_reg_364 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo_C_drain_out_V_V_blk_n <= fifo_C_drain_out_V_V_full_n;
        else 
            fifo_C_drain_out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fifo_C_drain_out_V_V_din <= ap_phi_mux_tmp_V_phi_fu_175_p4;

    fifo_C_drain_out_V_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln738_reg_364, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln738_reg_364 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo_C_drain_out_V_V_write <= ap_const_logic_1;
        else 
            fifo_C_drain_out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln738_fu_184_p2 <= "1" when (indvar_flatten63_reg_117 = ap_const_lv6_20) else "0";
    icmp_ln739_fu_196_p2 <= "1" when (indvar_flatten33_reg_128 = ap_const_lv6_10) else "0";
    icmp_ln742_fu_232_p2 <= "1" when (indvar_flatten11_reg_139 = ap_const_lv5_8) else "0";
    icmp_ln744_fu_220_p2 <= "1" when (indvar_flatten_reg_161 = ap_const_lv4_4) else "0";
    icmp_ln750_1_fu_288_p2 <= "1" when (select_ln742_fu_250_p3 = ap_const_lv2_0) else "0";
    icmp_ln750_fu_208_p2 <= "1" when (c3_0_reg_150 = ap_const_lv2_1) else "0";
    or_ln742_1_fu_264_p2 <= (xor_ln742_fu_258_p2 or icmp_ln739_fu_196_p2);
    or_ln742_fu_244_p2 <= (icmp_ln739_fu_196_p2 or and_ln739_2_fu_238_p2);
    or_ln744_1_fu_322_p2 <= (or_ln744_fu_316_p2 or icmp_ln739_fu_196_p2);
    or_ln744_fu_316_p2 <= (and_ln742_1_fu_276_p2 or and_ln739_2_fu_238_p2);
    select_ln739_fu_356_p3 <= 
        ap_const_lv6_1 when (icmp_ln739_fu_196_p2(0) = '1') else 
        add_ln739_fu_350_p2;
    select_ln742_1_fu_302_p3 <= 
        c3_fu_282_p2 when (and_ln742_1_fu_276_p2(0) = '1') else 
        select_ln742_fu_250_p3;
    select_ln742_2_fu_342_p3 <= 
        ap_const_lv5_1 when (or_ln742_fu_244_p2(0) = '1') else 
        add_ln742_1_fu_336_p2;
    select_ln742_fu_250_p3 <= 
        ap_const_lv2_0 when (or_ln742_fu_244_p2(0) = '1') else 
        c3_0_reg_150;
    select_ln744_fu_328_p3 <= 
        ap_const_lv4_1 when (or_ln744_1_fu_322_p2(0) = '1') else 
        add_ln744_fu_310_p2;
    select_ln750_fu_294_p3 <= 
        icmp_ln750_1_fu_288_p2 when (and_ln742_1_fu_276_p2(0) = '1') else 
        and_ln742_fu_270_p2;
    xor_ln739_fu_202_p2 <= (icmp_ln739_fu_196_p2 xor ap_const_lv1_1);
    xor_ln742_fu_258_p2 <= (icmp_ln742_fu_232_p2 xor ap_const_lv1_1);
end behav;

// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _C_drain_IO_L2_out_HH_
#define _C_drain_IO_L2_out_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct C_drain_IO_L2_out : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<64> > fifo_C_drain_in_V_V_dout;
    sc_in< sc_logic > fifo_C_drain_in_V_V_empty_n;
    sc_out< sc_logic > fifo_C_drain_in_V_V_read;
    sc_out< sc_lv<64> > fifo_C_drain_out_V_V_din;
    sc_in< sc_logic > fifo_C_drain_out_V_V_full_n;
    sc_out< sc_logic > fifo_C_drain_out_V_V_write;
    sc_in< sc_lv<64> > fifo_C_drain_local_in_V_V_dout;
    sc_in< sc_logic > fifo_C_drain_local_in_V_V_empty_n;
    sc_out< sc_logic > fifo_C_drain_local_in_V_V_read;


    // Module declarations
    C_drain_IO_L2_out(sc_module_name name);
    SC_HAS_PROCESS(C_drain_IO_L2_out);

    ~C_drain_IO_L2_out();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > fifo_C_drain_in_V_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln738_reg_364;
    sc_signal< sc_lv<1> > select_ln750_reg_373;
    sc_signal< sc_logic > fifo_C_drain_out_V_V_blk_n;
    sc_signal< sc_logic > fifo_C_drain_local_in_V_V_blk_n;
    sc_signal< sc_lv<6> > indvar_flatten63_reg_117;
    sc_signal< sc_lv<6> > indvar_flatten33_reg_128;
    sc_signal< sc_lv<5> > indvar_flatten11_reg_139;
    sc_signal< sc_lv<2> > c3_0_reg_150;
    sc_signal< sc_lv<4> > indvar_flatten_reg_161;
    sc_signal< sc_lv<1> > icmp_ln738_fu_184_p2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_predicate_op47_read_state3;
    sc_signal< bool > ap_predicate_op49_read_state3;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<6> > add_ln738_fu_190_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<1> > select_ln750_fu_294_p3;
    sc_signal< sc_lv<2> > select_ln742_1_fu_302_p3;
    sc_signal< sc_lv<4> > select_ln744_fu_328_p3;
    sc_signal< sc_lv<5> > select_ln742_2_fu_342_p3;
    sc_signal< sc_lv<6> > select_ln739_fu_356_p3;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_lv<64> > ap_phi_mux_tmp_V_phi_fu_175_p4;
    sc_signal< sc_lv<64> > ap_phi_reg_pp0_iter1_tmp_V_reg_172;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<1> > icmp_ln739_fu_196_p2;
    sc_signal< sc_lv<1> > icmp_ln750_fu_208_p2;
    sc_signal< sc_lv<1> > xor_ln739_fu_202_p2;
    sc_signal< sc_lv<1> > icmp_ln744_fu_220_p2;
    sc_signal< sc_lv<1> > icmp_ln742_fu_232_p2;
    sc_signal< sc_lv<1> > and_ln739_2_fu_238_p2;
    sc_signal< sc_lv<1> > or_ln742_fu_244_p2;
    sc_signal< sc_lv<1> > xor_ln742_fu_258_p2;
    sc_signal< sc_lv<1> > and_ln739_fu_214_p2;
    sc_signal< sc_lv<1> > or_ln742_1_fu_264_p2;
    sc_signal< sc_lv<1> > and_ln739_1_fu_226_p2;
    sc_signal< sc_lv<2> > select_ln742_fu_250_p3;
    sc_signal< sc_lv<1> > and_ln742_1_fu_276_p2;
    sc_signal< sc_lv<1> > icmp_ln750_1_fu_288_p2;
    sc_signal< sc_lv<1> > and_ln742_fu_270_p2;
    sc_signal< sc_lv<2> > c3_fu_282_p2;
    sc_signal< sc_lv<1> > or_ln744_fu_316_p2;
    sc_signal< sc_lv<1> > or_ln744_1_fu_322_p2;
    sc_signal< sc_lv<4> > add_ln744_fu_310_p2;
    sc_signal< sc_lv<5> > add_ln742_1_fu_336_p2;
    sc_signal< sc_lv<6> > add_ln739_fu_350_p2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<6> ap_const_lv6_20;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<6> ap_const_lv6_10;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<4> ap_const_lv4_4;
    static const sc_lv<5> ap_const_lv5_8;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln738_fu_190_p2();
    void thread_add_ln739_fu_350_p2();
    void thread_add_ln742_1_fu_336_p2();
    void thread_add_ln744_fu_310_p2();
    void thread_and_ln739_1_fu_226_p2();
    void thread_and_ln739_2_fu_238_p2();
    void thread_and_ln739_fu_214_p2();
    void thread_and_ln742_1_fu_276_p2();
    void thread_and_ln742_fu_270_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_tmp_V_phi_fu_175_p4();
    void thread_ap_phi_reg_pp0_iter1_tmp_V_reg_172();
    void thread_ap_predicate_op47_read_state3();
    void thread_ap_predicate_op49_read_state3();
    void thread_ap_ready();
    void thread_c3_fu_282_p2();
    void thread_fifo_C_drain_in_V_V_blk_n();
    void thread_fifo_C_drain_in_V_V_read();
    void thread_fifo_C_drain_local_in_V_V_blk_n();
    void thread_fifo_C_drain_local_in_V_V_read();
    void thread_fifo_C_drain_out_V_V_blk_n();
    void thread_fifo_C_drain_out_V_V_din();
    void thread_fifo_C_drain_out_V_V_write();
    void thread_icmp_ln738_fu_184_p2();
    void thread_icmp_ln739_fu_196_p2();
    void thread_icmp_ln742_fu_232_p2();
    void thread_icmp_ln744_fu_220_p2();
    void thread_icmp_ln750_1_fu_288_p2();
    void thread_icmp_ln750_fu_208_p2();
    void thread_or_ln742_1_fu_264_p2();
    void thread_or_ln742_fu_244_p2();
    void thread_or_ln744_1_fu_322_p2();
    void thread_or_ln744_fu_316_p2();
    void thread_select_ln739_fu_356_p3();
    void thread_select_ln742_1_fu_302_p3();
    void thread_select_ln742_2_fu_342_p3();
    void thread_select_ln742_fu_250_p3();
    void thread_select_ln744_fu_328_p3();
    void thread_select_ln750_fu_294_p3();
    void thread_xor_ln739_fu_202_p2();
    void thread_xor_ln742_fu_258_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif

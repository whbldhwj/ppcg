// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _B_IO_L2_in_inter_tra_HH_
#define _B_IO_L2_in_inter_tra_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct B_IO_L2_in_inter_tra : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<1> > local_B_0_V_address0;
    sc_out< sc_logic > local_B_0_V_ce0;
    sc_out< sc_logic > local_B_0_V_we0;
    sc_out< sc_lv<128> > local_B_0_V_d0;
    sc_in< sc_lv<128> > fifo_B_in_V_V_dout;
    sc_in< sc_logic > fifo_B_in_V_V_empty_n;
    sc_out< sc_logic > fifo_B_in_V_V_read;


    // Module declarations
    B_IO_L2_in_inter_tra(sc_module_name name);
    SC_HAS_PROCESS(B_IO_L2_in_inter_tra);

    ~B_IO_L2_in_inter_tra();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > fifo_B_in_V_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln317_reg_101;
    sc_signal< sc_lv<2> > c4_0_0_reg_72;
    sc_signal< sc_lv<1> > icmp_ln317_fu_84_p2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<2> > add_ln317_fu_90_p2;
    sc_signal< sc_lv<2> > add_ln317_reg_105;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_lv<2> > ap_phi_mux_c4_0_0_phi_fu_76_p4;
    sc_signal< sc_lv<64> > zext_ln322_fu_96_p1;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state4;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln317_fu_90_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_c4_0_0_phi_fu_76_p4();
    void thread_ap_ready();
    void thread_fifo_B_in_V_V_blk_n();
    void thread_fifo_B_in_V_V_read();
    void thread_icmp_ln317_fu_84_p2();
    void thread_local_B_0_V_address0();
    void thread_local_B_0_V_ce0();
    void thread_local_B_0_V_d0();
    void thread_local_B_0_V_we0();
    void thread_zext_ln322_fu_96_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif

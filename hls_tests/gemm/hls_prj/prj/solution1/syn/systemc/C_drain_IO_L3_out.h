// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _C_drain_IO_L3_out_HH_
#define _C_drain_IO_L3_out_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct C_drain_IO_L3_out : public sc_module {
    // Port declarations 58
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > m_axi_C_V_AWVALID;
    sc_in< sc_logic > m_axi_C_V_AWREADY;
    sc_out< sc_lv<32> > m_axi_C_V_AWADDR;
    sc_out< sc_lv<1> > m_axi_C_V_AWID;
    sc_out< sc_lv<32> > m_axi_C_V_AWLEN;
    sc_out< sc_lv<3> > m_axi_C_V_AWSIZE;
    sc_out< sc_lv<2> > m_axi_C_V_AWBURST;
    sc_out< sc_lv<2> > m_axi_C_V_AWLOCK;
    sc_out< sc_lv<4> > m_axi_C_V_AWCACHE;
    sc_out< sc_lv<3> > m_axi_C_V_AWPROT;
    sc_out< sc_lv<4> > m_axi_C_V_AWQOS;
    sc_out< sc_lv<4> > m_axi_C_V_AWREGION;
    sc_out< sc_lv<1> > m_axi_C_V_AWUSER;
    sc_out< sc_logic > m_axi_C_V_WVALID;
    sc_in< sc_logic > m_axi_C_V_WREADY;
    sc_out< sc_lv<64> > m_axi_C_V_WDATA;
    sc_out< sc_lv<8> > m_axi_C_V_WSTRB;
    sc_out< sc_logic > m_axi_C_V_WLAST;
    sc_out< sc_lv<1> > m_axi_C_V_WID;
    sc_out< sc_lv<1> > m_axi_C_V_WUSER;
    sc_out< sc_logic > m_axi_C_V_ARVALID;
    sc_in< sc_logic > m_axi_C_V_ARREADY;
    sc_out< sc_lv<32> > m_axi_C_V_ARADDR;
    sc_out< sc_lv<1> > m_axi_C_V_ARID;
    sc_out< sc_lv<32> > m_axi_C_V_ARLEN;
    sc_out< sc_lv<3> > m_axi_C_V_ARSIZE;
    sc_out< sc_lv<2> > m_axi_C_V_ARBURST;
    sc_out< sc_lv<2> > m_axi_C_V_ARLOCK;
    sc_out< sc_lv<4> > m_axi_C_V_ARCACHE;
    sc_out< sc_lv<3> > m_axi_C_V_ARPROT;
    sc_out< sc_lv<4> > m_axi_C_V_ARQOS;
    sc_out< sc_lv<4> > m_axi_C_V_ARREGION;
    sc_out< sc_lv<1> > m_axi_C_V_ARUSER;
    sc_in< sc_logic > m_axi_C_V_RVALID;
    sc_out< sc_logic > m_axi_C_V_RREADY;
    sc_in< sc_lv<64> > m_axi_C_V_RDATA;
    sc_in< sc_logic > m_axi_C_V_RLAST;
    sc_in< sc_lv<1> > m_axi_C_V_RID;
    sc_in< sc_lv<1> > m_axi_C_V_RUSER;
    sc_in< sc_lv<2> > m_axi_C_V_RRESP;
    sc_in< sc_logic > m_axi_C_V_BVALID;
    sc_out< sc_logic > m_axi_C_V_BREADY;
    sc_in< sc_lv<2> > m_axi_C_V_BRESP;
    sc_in< sc_lv<1> > m_axi_C_V_BID;
    sc_in< sc_lv<1> > m_axi_C_V_BUSER;
    sc_in< sc_lv<32> > C_V_offset_dout;
    sc_in< sc_logic > C_V_offset_empty_n;
    sc_out< sc_logic > C_V_offset_read;
    sc_in< sc_lv<64> > fifo_C_drain_local_in_V_V_dout;
    sc_in< sc_logic > fifo_C_drain_local_in_V_V_empty_n;
    sc_out< sc_logic > fifo_C_drain_local_in_V_V_read;


    // Module declarations
    C_drain_IO_L3_out(sc_module_name name);
    SC_HAS_PROCESS(C_drain_IO_L3_out);

    ~C_drain_IO_L3_out();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > C_V_blk_n_AW;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln795_reg_715;
    sc_signal< sc_logic > C_V_blk_n_W;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<1> > icmp_ln795_reg_715_pp0_iter1_reg;
    sc_signal< sc_logic > C_V_blk_n_B;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter7;
    sc_signal< sc_lv<1> > icmp_ln795_reg_715_pp0_iter6_reg;
    sc_signal< sc_logic > C_V_offset_blk_n;
    sc_signal< sc_logic > fifo_C_drain_local_in_V_V_blk_n;
    sc_signal< sc_lv<6> > indvar_flatten85_i_reg_146;
    sc_signal< sc_lv<2> > c0_0_i_reg_157;
    sc_signal< sc_lv<6> > indvar_flatten47_i_reg_168;
    sc_signal< sc_lv<2> > c1_0_i_reg_179;
    sc_signal< sc_lv<5> > indvar_flatten17_i_reg_190;
    sc_signal< sc_lv<2> > c3_0_i_reg_201;
    sc_signal< sc_lv<4> > indvar_flatten_i_reg_212;
    sc_signal< sc_lv<2> > c4_0_i_reg_223;
    sc_signal< sc_lv<2> > c5_0_i_reg_234;
    sc_signal< sc_lv<30> > zext_ln795_fu_255_p1;
    sc_signal< sc_lv<30> > zext_ln795_reg_710;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<1> > icmp_ln795_fu_277_p2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state3_io;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state4_io;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter4;
    sc_signal< bool > ap_block_state7_pp0_stage0_iter5;
    sc_signal< bool > ap_block_state8_pp0_stage0_iter6;
    sc_signal< bool > ap_block_state9_pp0_stage0_iter7;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > icmp_ln795_reg_715_pp0_iter2_reg;
    sc_signal< sc_lv<1> > icmp_ln795_reg_715_pp0_iter3_reg;
    sc_signal< sc_lv<1> > icmp_ln795_reg_715_pp0_iter4_reg;
    sc_signal< sc_lv<1> > icmp_ln795_reg_715_pp0_iter5_reg;
    sc_signal< sc_lv<6> > add_ln795_fu_283_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<2> > select_ln795_fu_381_p3;
    sc_signal< sc_lv<2> > select_ln795_reg_724;
    sc_signal< sc_lv<2> > select_ln796_2_fu_465_p3;
    sc_signal< sc_lv<2> > select_ln796_2_reg_729;
    sc_signal< sc_lv<2> > select_ln799_3_fu_535_p3;
    sc_signal< sc_lv<2> > select_ln801_fu_591_p3;
    sc_signal< sc_lv<30> > add_ln321_fu_647_p2;
    sc_signal< sc_lv<30> > add_ln321_reg_744;
    sc_signal< sc_lv<2> > c5_fu_652_p2;
    sc_signal< sc_lv<4> > select_ln801_1_fu_664_p3;
    sc_signal< sc_lv<5> > select_ln799_4_fu_678_p3;
    sc_signal< sc_lv<6> > select_ln796_3_fu_692_p3;
    sc_signal< sc_lv<64> > tmp_V_reg_769;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter5;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter6;
    sc_signal< sc_lv<2> > ap_phi_mux_c0_0_i_phi_fu_161_p4;
    sc_signal< sc_lv<2> > ap_phi_mux_c1_0_i_phi_fu_183_p4;
    sc_signal< sc_lv<64> > zext_ln321_1_fu_700_p1;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<29> > tmp_fu_245_p4;
    sc_signal< sc_lv<1> > trunc_ln808_1_fu_263_p1;
    sc_signal< sc_lv<1> > trunc_ln808_fu_259_p1;
    sc_signal< sc_lv<1> > icmp_ln796_fu_295_p2;
    sc_signal< sc_lv<1> > trunc_ln808_2_fu_315_p1;
    sc_signal< sc_lv<1> > xor_ln796_fu_309_p2;
    sc_signal< sc_lv<2> > add_ln795_1_fu_289_p2;
    sc_signal< sc_lv<1> > trunc_ln808_3_fu_325_p1;
    sc_signal< sc_lv<3> > or_ln808_1_mid_i_fu_329_p3;
    sc_signal< sc_lv<3> > or_ln808_1_i_fu_267_p4;
    sc_signal< sc_lv<1> > icmp_ln803_fu_345_p2;
    sc_signal< sc_lv<1> > icmp_ln801_fu_357_p2;
    sc_signal< sc_lv<1> > icmp_ln799_fu_369_p2;
    sc_signal< sc_lv<2> > select_ln796_fu_301_p3;
    sc_signal< sc_lv<1> > and_ln796_3_fu_375_p2;
    sc_signal< sc_lv<1> > or_ln799_fu_395_p2;
    sc_signal< sc_lv<2> > add_ln796_fu_389_p2;
    sc_signal< sc_lv<1> > trunc_ln808_4_fu_409_p1;
    sc_signal< sc_lv<1> > and_ln796_fu_319_p2;
    sc_signal< sc_lv<1> > trunc_ln808_5_fu_421_p1;
    sc_signal< sc_lv<3> > or_ln808_1_mid3_i_fu_425_p3;
    sc_signal< sc_lv<3> > select_ln796_1_fu_337_p3;
    sc_signal< sc_lv<1> > xor_ln799_fu_441_p2;
    sc_signal< sc_lv<1> > and_ln796_1_fu_351_p2;
    sc_signal< sc_lv<1> > or_ln799_1_fu_447_p2;
    sc_signal< sc_lv<1> > and_ln796_2_fu_363_p2;
    sc_signal< sc_lv<2> > select_ln799_fu_401_p3;
    sc_signal< sc_lv<1> > and_ln799_1_fu_459_p2;
    sc_signal< sc_lv<1> > or_ln808_fu_479_p2;
    sc_signal< sc_lv<1> > or_ln808_1_fu_485_p2;
    sc_signal< sc_lv<2> > add_ln799_fu_473_p2;
    sc_signal< sc_lv<1> > trunc_ln808_7_fu_503_p1;
    sc_signal< sc_lv<1> > select_ln799_1_fu_413_p3;
    sc_signal< sc_lv<3> > select_ln799_2_fu_433_p3;
    sc_signal< sc_lv<1> > and_ln799_fu_453_p2;
    sc_signal< sc_lv<1> > xor_ln808_fu_523_p2;
    sc_signal< sc_lv<2> > select_ln808_fu_491_p3;
    sc_signal< sc_lv<1> > and_ln808_fu_529_p2;
    sc_signal< sc_lv<1> > or_ln808_2_fu_549_p2;
    sc_signal< sc_lv<1> > or_ln808_3_fu_555_p2;
    sc_signal< sc_lv<2> > add_ln801_fu_543_p2;
    sc_signal< sc_lv<1> > trunc_ln808_8_fu_569_p1;
    sc_signal< sc_lv<3> > or_ln808_1_mid1_i_fu_573_p4;
    sc_signal< sc_lv<3> > select_ln808_2_fu_515_p3;
    sc_signal< sc_lv<2> > select_ln808_3_fu_561_p3;
    sc_signal< sc_lv<3> > zext_ln808_fu_599_p1;
    sc_signal< sc_lv<3> > select_ln808_4_fu_583_p3;
    sc_signal< sc_lv<1> > trunc_ln808_9_fu_615_p1;
    sc_signal< sc_lv<1> > xor_ln799_1_fu_609_p2;
    sc_signal< sc_lv<1> > trunc_ln808_6_fu_499_p1;
    sc_signal< sc_lv<1> > and_ln799_2_fu_619_p2;
    sc_signal< sc_lv<3> > add_ln808_fu_603_p2;
    sc_signal< sc_lv<1> > select_ln808_1_fu_507_p3;
    sc_signal< sc_lv<1> > select_ln808_5_fu_625_p3;
    sc_signal< sc_lv<5> > trunc_ln_i_fu_633_p4;
    sc_signal< sc_lv<30> > zext_ln321_fu_643_p1;
    sc_signal< sc_lv<4> > add_ln801_1_fu_658_p2;
    sc_signal< sc_lv<5> > add_ln799_1_fu_672_p2;
    sc_signal< sc_lv<6> > add_ln796_1_fu_686_p2;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state10;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<6> ap_const_lv6_20;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<6> ap_const_lv6_10;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<4> ap_const_lv4_4;
    static const sc_lv<5> ap_const_lv5_8;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_C_V_blk_n_AW();
    void thread_C_V_blk_n_B();
    void thread_C_V_blk_n_W();
    void thread_C_V_offset_blk_n();
    void thread_C_V_offset_read();
    void thread_add_ln321_fu_647_p2();
    void thread_add_ln795_1_fu_289_p2();
    void thread_add_ln795_fu_283_p2();
    void thread_add_ln796_1_fu_686_p2();
    void thread_add_ln796_fu_389_p2();
    void thread_add_ln799_1_fu_672_p2();
    void thread_add_ln799_fu_473_p2();
    void thread_add_ln801_1_fu_658_p2();
    void thread_add_ln801_fu_543_p2();
    void thread_add_ln808_fu_603_p2();
    void thread_and_ln796_1_fu_351_p2();
    void thread_and_ln796_2_fu_363_p2();
    void thread_and_ln796_3_fu_375_p2();
    void thread_and_ln796_fu_319_p2();
    void thread_and_ln799_1_fu_459_p2();
    void thread_and_ln799_2_fu_619_p2();
    void thread_and_ln799_fu_453_p2();
    void thread_and_ln808_fu_529_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_io();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_io();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_block_state5_pp0_stage0_iter3();
    void thread_ap_block_state6_pp0_stage0_iter4();
    void thread_ap_block_state7_pp0_stage0_iter5();
    void thread_ap_block_state8_pp0_stage0_iter6();
    void thread_ap_block_state9_pp0_stage0_iter7();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_c0_0_i_phi_fu_161_p4();
    void thread_ap_phi_mux_c1_0_i_phi_fu_183_p4();
    void thread_ap_ready();
    void thread_c5_fu_652_p2();
    void thread_fifo_C_drain_local_in_V_V_blk_n();
    void thread_fifo_C_drain_local_in_V_V_read();
    void thread_icmp_ln795_fu_277_p2();
    void thread_icmp_ln796_fu_295_p2();
    void thread_icmp_ln799_fu_369_p2();
    void thread_icmp_ln801_fu_357_p2();
    void thread_icmp_ln803_fu_345_p2();
    void thread_m_axi_C_V_ARADDR();
    void thread_m_axi_C_V_ARBURST();
    void thread_m_axi_C_V_ARCACHE();
    void thread_m_axi_C_V_ARID();
    void thread_m_axi_C_V_ARLEN();
    void thread_m_axi_C_V_ARLOCK();
    void thread_m_axi_C_V_ARPROT();
    void thread_m_axi_C_V_ARQOS();
    void thread_m_axi_C_V_ARREGION();
    void thread_m_axi_C_V_ARSIZE();
    void thread_m_axi_C_V_ARUSER();
    void thread_m_axi_C_V_ARVALID();
    void thread_m_axi_C_V_AWADDR();
    void thread_m_axi_C_V_AWBURST();
    void thread_m_axi_C_V_AWCACHE();
    void thread_m_axi_C_V_AWID();
    void thread_m_axi_C_V_AWLEN();
    void thread_m_axi_C_V_AWLOCK();
    void thread_m_axi_C_V_AWPROT();
    void thread_m_axi_C_V_AWQOS();
    void thread_m_axi_C_V_AWREGION();
    void thread_m_axi_C_V_AWSIZE();
    void thread_m_axi_C_V_AWUSER();
    void thread_m_axi_C_V_AWVALID();
    void thread_m_axi_C_V_BREADY();
    void thread_m_axi_C_V_RREADY();
    void thread_m_axi_C_V_WDATA();
    void thread_m_axi_C_V_WID();
    void thread_m_axi_C_V_WLAST();
    void thread_m_axi_C_V_WSTRB();
    void thread_m_axi_C_V_WUSER();
    void thread_m_axi_C_V_WVALID();
    void thread_or_ln799_1_fu_447_p2();
    void thread_or_ln799_fu_395_p2();
    void thread_or_ln808_1_fu_485_p2();
    void thread_or_ln808_1_i_fu_267_p4();
    void thread_or_ln808_1_mid1_i_fu_573_p4();
    void thread_or_ln808_1_mid3_i_fu_425_p3();
    void thread_or_ln808_1_mid_i_fu_329_p3();
    void thread_or_ln808_2_fu_549_p2();
    void thread_or_ln808_3_fu_555_p2();
    void thread_or_ln808_fu_479_p2();
    void thread_select_ln795_fu_381_p3();
    void thread_select_ln796_1_fu_337_p3();
    void thread_select_ln796_2_fu_465_p3();
    void thread_select_ln796_3_fu_692_p3();
    void thread_select_ln796_fu_301_p3();
    void thread_select_ln799_1_fu_413_p3();
    void thread_select_ln799_2_fu_433_p3();
    void thread_select_ln799_3_fu_535_p3();
    void thread_select_ln799_4_fu_678_p3();
    void thread_select_ln799_fu_401_p3();
    void thread_select_ln801_1_fu_664_p3();
    void thread_select_ln801_fu_591_p3();
    void thread_select_ln808_1_fu_507_p3();
    void thread_select_ln808_2_fu_515_p3();
    void thread_select_ln808_3_fu_561_p3();
    void thread_select_ln808_4_fu_583_p3();
    void thread_select_ln808_5_fu_625_p3();
    void thread_select_ln808_fu_491_p3();
    void thread_tmp_fu_245_p4();
    void thread_trunc_ln808_1_fu_263_p1();
    void thread_trunc_ln808_2_fu_315_p1();
    void thread_trunc_ln808_3_fu_325_p1();
    void thread_trunc_ln808_4_fu_409_p1();
    void thread_trunc_ln808_5_fu_421_p1();
    void thread_trunc_ln808_6_fu_499_p1();
    void thread_trunc_ln808_7_fu_503_p1();
    void thread_trunc_ln808_8_fu_569_p1();
    void thread_trunc_ln808_9_fu_615_p1();
    void thread_trunc_ln808_fu_259_p1();
    void thread_trunc_ln_i_fu_633_p4();
    void thread_xor_ln796_fu_309_p2();
    void thread_xor_ln799_1_fu_609_p2();
    void thread_xor_ln799_fu_441_p2();
    void thread_xor_ln808_fu_523_p2();
    void thread_zext_ln321_1_fu_700_p1();
    void thread_zext_ln321_fu_643_p1();
    void thread_zext_ln795_fu_255_p1();
    void thread_zext_ln808_fu_599_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif

// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _A_IO_L3_in_HH_
#define _A_IO_L3_in_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct A_IO_L3_in : public sc_module {
    // Port declarations 61
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_out< sc_logic > m_axi_A_V_AWVALID;
    sc_in< sc_logic > m_axi_A_V_AWREADY;
    sc_out< sc_lv<32> > m_axi_A_V_AWADDR;
    sc_out< sc_lv<1> > m_axi_A_V_AWID;
    sc_out< sc_lv<32> > m_axi_A_V_AWLEN;
    sc_out< sc_lv<3> > m_axi_A_V_AWSIZE;
    sc_out< sc_lv<2> > m_axi_A_V_AWBURST;
    sc_out< sc_lv<2> > m_axi_A_V_AWLOCK;
    sc_out< sc_lv<4> > m_axi_A_V_AWCACHE;
    sc_out< sc_lv<3> > m_axi_A_V_AWPROT;
    sc_out< sc_lv<4> > m_axi_A_V_AWQOS;
    sc_out< sc_lv<4> > m_axi_A_V_AWREGION;
    sc_out< sc_lv<1> > m_axi_A_V_AWUSER;
    sc_out< sc_logic > m_axi_A_V_WVALID;
    sc_in< sc_logic > m_axi_A_V_WREADY;
    sc_out< sc_lv<128> > m_axi_A_V_WDATA;
    sc_out< sc_lv<16> > m_axi_A_V_WSTRB;
    sc_out< sc_logic > m_axi_A_V_WLAST;
    sc_out< sc_lv<1> > m_axi_A_V_WID;
    sc_out< sc_lv<1> > m_axi_A_V_WUSER;
    sc_out< sc_logic > m_axi_A_V_ARVALID;
    sc_in< sc_logic > m_axi_A_V_ARREADY;
    sc_out< sc_lv<32> > m_axi_A_V_ARADDR;
    sc_out< sc_lv<1> > m_axi_A_V_ARID;
    sc_out< sc_lv<32> > m_axi_A_V_ARLEN;
    sc_out< sc_lv<3> > m_axi_A_V_ARSIZE;
    sc_out< sc_lv<2> > m_axi_A_V_ARBURST;
    sc_out< sc_lv<2> > m_axi_A_V_ARLOCK;
    sc_out< sc_lv<4> > m_axi_A_V_ARCACHE;
    sc_out< sc_lv<3> > m_axi_A_V_ARPROT;
    sc_out< sc_lv<4> > m_axi_A_V_ARQOS;
    sc_out< sc_lv<4> > m_axi_A_V_ARREGION;
    sc_out< sc_lv<1> > m_axi_A_V_ARUSER;
    sc_in< sc_logic > m_axi_A_V_RVALID;
    sc_out< sc_logic > m_axi_A_V_RREADY;
    sc_in< sc_lv<128> > m_axi_A_V_RDATA;
    sc_in< sc_logic > m_axi_A_V_RLAST;
    sc_in< sc_lv<1> > m_axi_A_V_RID;
    sc_in< sc_lv<1> > m_axi_A_V_RUSER;
    sc_in< sc_lv<2> > m_axi_A_V_RRESP;
    sc_in< sc_logic > m_axi_A_V_BVALID;
    sc_out< sc_logic > m_axi_A_V_BREADY;
    sc_in< sc_lv<2> > m_axi_A_V_BRESP;
    sc_in< sc_lv<1> > m_axi_A_V_BID;
    sc_in< sc_lv<1> > m_axi_A_V_BUSER;
    sc_in< sc_lv<32> > A_V_offset_dout;
    sc_in< sc_logic > A_V_offset_empty_n;
    sc_out< sc_logic > A_V_offset_read;
    sc_out< sc_lv<128> > fifo_A_local_out_V_V_din;
    sc_in< sc_logic > fifo_A_local_out_V_V_full_n;
    sc_out< sc_logic > fifo_A_local_out_V_V_write;


    // Module declarations
    A_IO_L3_in(sc_module_name name);
    SC_HAS_PROCESS(A_IO_L3_in);

    ~A_IO_L3_in();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_logic > A_V_blk_n_AR;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln6_reg_637;
    sc_signal< sc_logic > A_V_blk_n_R;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter8;
    sc_signal< sc_lv<1> > icmp_ln6_reg_637_pp0_iter7_reg;
    sc_signal< sc_logic > A_V_offset_blk_n;
    sc_signal< sc_logic > fifo_A_local_out_V_V_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter9;
    sc_signal< sc_lv<1> > icmp_ln6_reg_637_pp0_iter8_reg;
    sc_signal< sc_lv<6> > indvar_flatten85_i_reg_137;
    sc_signal< sc_lv<2> > c0_0_i_reg_148;
    sc_signal< sc_lv<6> > indvar_flatten47_i_reg_159;
    sc_signal< sc_lv<5> > indvar_flatten17_i_reg_170;
    sc_signal< sc_lv<2> > c2_0_i_reg_181;
    sc_signal< sc_lv<4> > indvar_flatten_i_reg_192;
    sc_signal< sc_lv<2> > c3_0_i_reg_203;
    sc_signal< sc_lv<2> > c4_0_i_reg_214;
    sc_signal< sc_lv<29> > zext_ln6_fu_235_p1;
    sc_signal< sc_lv<29> > zext_ln6_reg_632;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<1> > icmp_ln6_fu_257_p2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state3_io;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter4;
    sc_signal< bool > ap_block_state7_pp0_stage0_iter5;
    sc_signal< bool > ap_block_state8_pp0_stage0_iter6;
    sc_signal< bool > ap_block_state9_pp0_stage0_iter7;
    sc_signal< bool > ap_block_state10_pp0_stage0_iter8;
    sc_signal< bool > ap_block_state11_pp0_stage0_iter9;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > icmp_ln6_reg_637_pp0_iter1_reg;
    sc_signal< sc_lv<1> > icmp_ln6_reg_637_pp0_iter2_reg;
    sc_signal< sc_lv<1> > icmp_ln6_reg_637_pp0_iter3_reg;
    sc_signal< sc_lv<1> > icmp_ln6_reg_637_pp0_iter4_reg;
    sc_signal< sc_lv<1> > icmp_ln6_reg_637_pp0_iter5_reg;
    sc_signal< sc_lv<1> > icmp_ln6_reg_637_pp0_iter6_reg;
    sc_signal< sc_lv<6> > add_ln6_fu_263_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<2> > select_ln6_fu_343_p3;
    sc_signal< sc_lv<2> > select_ln6_reg_646;
    sc_signal< sc_lv<2> > select_ln8_2_fu_459_p3;
    sc_signal< sc_lv<2> > select_ln11_2_fu_515_p3;
    sc_signal< sc_lv<29> > add_ln321_fu_569_p2;
    sc_signal< sc_lv<29> > add_ln321_reg_661;
    sc_signal< sc_lv<2> > c4_fu_574_p2;
    sc_signal< sc_lv<4> > select_ln11_4_fu_586_p3;
    sc_signal< sc_lv<5> > select_ln8_3_fu_600_p3;
    sc_signal< sc_lv<6> > select_ln7_1_fu_614_p3;
    sc_signal< sc_lv<128> > fifo_data_V_reg_692;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter5;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter6;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter7;
    sc_signal< sc_lv<2> > ap_phi_mux_c0_0_i_phi_fu_152_p4;
    sc_signal< sc_lv<64> > zext_ln321_3_fu_622_p1;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<28> > tmp_fu_225_p4;
    sc_signal< sc_lv<1> > trunc_ln17_1_fu_243_p1;
    sc_signal< sc_lv<1> > trunc_ln17_fu_239_p1;
    sc_signal< sc_lv<2> > add_ln6_1_fu_269_p2;
    sc_signal< sc_lv<1> > trunc_ln17_2_fu_281_p1;
    sc_signal< sc_lv<1> > icmp_ln7_fu_275_p2;
    sc_signal< sc_lv<3> > or_ln_mid_i_fu_285_p3;
    sc_signal< sc_lv<3> > or_ln_i_fu_247_p4;
    sc_signal< sc_lv<1> > icmp_ln13_fu_307_p2;
    sc_signal< sc_lv<1> > xor_ln7_fu_301_p2;
    sc_signal< sc_lv<1> > icmp_ln11_fu_319_p2;
    sc_signal< sc_lv<1> > icmp_ln8_fu_331_p2;
    sc_signal< sc_lv<1> > and_ln7_2_fu_337_p2;
    sc_signal< sc_lv<1> > or_ln8_fu_351_p2;
    sc_signal< sc_lv<1> > trunc_ln17_3_fu_365_p1;
    sc_signal< sc_lv<3> > or_ln_mid4_i_fu_369_p3;
    sc_signal< sc_lv<3> > select_ln7_fu_293_p3;
    sc_signal< sc_lv<1> > xor_ln8_fu_385_p2;
    sc_signal< sc_lv<1> > and_ln7_fu_313_p2;
    sc_signal< sc_lv<1> > or_ln8_1_fu_391_p2;
    sc_signal< sc_lv<1> > and_ln7_1_fu_325_p2;
    sc_signal< sc_lv<2> > select_ln8_fu_357_p3;
    sc_signal< sc_lv<1> > and_ln8_1_fu_403_p2;
    sc_signal< sc_lv<1> > or_ln11_fu_415_p2;
    sc_signal< sc_lv<1> > or_ln11_1_fu_421_p2;
    sc_signal< sc_lv<2> > add_ln8_fu_409_p2;
    sc_signal< sc_lv<3> > select_ln8_1_fu_377_p3;
    sc_signal< sc_lv<1> > and_ln8_fu_397_p2;
    sc_signal< sc_lv<1> > xor_ln11_fu_447_p2;
    sc_signal< sc_lv<2> > select_ln11_fu_427_p3;
    sc_signal< sc_lv<1> > and_ln11_fu_453_p2;
    sc_signal< sc_lv<1> > or_ln17_fu_473_p2;
    sc_signal< sc_lv<1> > or_ln17_1_fu_479_p2;
    sc_signal< sc_lv<2> > add_ln11_fu_467_p2;
    sc_signal< sc_lv<1> > trunc_ln17_5_fu_493_p1;
    sc_signal< sc_lv<3> > or_ln_mid1_i_fu_497_p4;
    sc_signal< sc_lv<3> > select_ln11_1_fu_439_p3;
    sc_signal< sc_lv<2> > select_ln17_fu_485_p3;
    sc_signal< sc_lv<3> > select_ln17_1_fu_507_p3;
    sc_signal< sc_lv<3> > zext_ln17_fu_523_p1;
    sc_signal< sc_lv<1> > trunc_ln17_6_fu_539_p1;
    sc_signal< sc_lv<1> > xor_ln8_1_fu_533_p2;
    sc_signal< sc_lv<1> > trunc_ln17_4_fu_435_p1;
    sc_signal< sc_lv<1> > and_ln8_2_fu_543_p2;
    sc_signal< sc_lv<3> > add_ln17_fu_527_p2;
    sc_signal< sc_lv<1> > select_ln11_3_fu_549_p3;
    sc_signal< sc_lv<4> > trunc_ln_i_fu_557_p3;
    sc_signal< sc_lv<29> > zext_ln321_fu_565_p1;
    sc_signal< sc_lv<4> > add_ln11_1_fu_580_p2;
    sc_signal< sc_lv<5> > add_ln8_1_fu_594_p2;
    sc_signal< sc_lv<6> > add_ln7_fu_608_p2;
    sc_signal< sc_logic > ap_CS_fsm_state12;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state12;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<128> ap_const_lv128_lc_1;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<6> ap_const_lv6_20;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<6> ap_const_lv6_10;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<4> ap_const_lv4_4;
    static const sc_lv<5> ap_const_lv5_8;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_A_V_blk_n_AR();
    void thread_A_V_blk_n_R();
    void thread_A_V_offset_blk_n();
    void thread_A_V_offset_read();
    void thread_add_ln11_1_fu_580_p2();
    void thread_add_ln11_fu_467_p2();
    void thread_add_ln17_fu_527_p2();
    void thread_add_ln321_fu_569_p2();
    void thread_add_ln6_1_fu_269_p2();
    void thread_add_ln6_fu_263_p2();
    void thread_add_ln7_fu_608_p2();
    void thread_add_ln8_1_fu_594_p2();
    void thread_add_ln8_fu_409_p2();
    void thread_and_ln11_fu_453_p2();
    void thread_and_ln7_1_fu_325_p2();
    void thread_and_ln7_2_fu_337_p2();
    void thread_and_ln7_fu_313_p2();
    void thread_and_ln8_1_fu_403_p2();
    void thread_and_ln8_2_fu_543_p2();
    void thread_and_ln8_fu_397_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state12();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state10_pp0_stage0_iter8();
    void thread_ap_block_state11_pp0_stage0_iter9();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_io();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_block_state5_pp0_stage0_iter3();
    void thread_ap_block_state6_pp0_stage0_iter4();
    void thread_ap_block_state7_pp0_stage0_iter5();
    void thread_ap_block_state8_pp0_stage0_iter6();
    void thread_ap_block_state9_pp0_stage0_iter7();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_c0_0_i_phi_fu_152_p4();
    void thread_ap_ready();
    void thread_c4_fu_574_p2();
    void thread_fifo_A_local_out_V_V_blk_n();
    void thread_fifo_A_local_out_V_V_din();
    void thread_fifo_A_local_out_V_V_write();
    void thread_icmp_ln11_fu_319_p2();
    void thread_icmp_ln13_fu_307_p2();
    void thread_icmp_ln6_fu_257_p2();
    void thread_icmp_ln7_fu_275_p2();
    void thread_icmp_ln8_fu_331_p2();
    void thread_internal_ap_ready();
    void thread_m_axi_A_V_ARADDR();
    void thread_m_axi_A_V_ARBURST();
    void thread_m_axi_A_V_ARCACHE();
    void thread_m_axi_A_V_ARID();
    void thread_m_axi_A_V_ARLEN();
    void thread_m_axi_A_V_ARLOCK();
    void thread_m_axi_A_V_ARPROT();
    void thread_m_axi_A_V_ARQOS();
    void thread_m_axi_A_V_ARREGION();
    void thread_m_axi_A_V_ARSIZE();
    void thread_m_axi_A_V_ARUSER();
    void thread_m_axi_A_V_ARVALID();
    void thread_m_axi_A_V_AWADDR();
    void thread_m_axi_A_V_AWBURST();
    void thread_m_axi_A_V_AWCACHE();
    void thread_m_axi_A_V_AWID();
    void thread_m_axi_A_V_AWLEN();
    void thread_m_axi_A_V_AWLOCK();
    void thread_m_axi_A_V_AWPROT();
    void thread_m_axi_A_V_AWQOS();
    void thread_m_axi_A_V_AWREGION();
    void thread_m_axi_A_V_AWSIZE();
    void thread_m_axi_A_V_AWUSER();
    void thread_m_axi_A_V_AWVALID();
    void thread_m_axi_A_V_BREADY();
    void thread_m_axi_A_V_RREADY();
    void thread_m_axi_A_V_WDATA();
    void thread_m_axi_A_V_WID();
    void thread_m_axi_A_V_WLAST();
    void thread_m_axi_A_V_WSTRB();
    void thread_m_axi_A_V_WUSER();
    void thread_m_axi_A_V_WVALID();
    void thread_or_ln11_1_fu_421_p2();
    void thread_or_ln11_fu_415_p2();
    void thread_or_ln17_1_fu_479_p2();
    void thread_or_ln17_fu_473_p2();
    void thread_or_ln8_1_fu_391_p2();
    void thread_or_ln8_fu_351_p2();
    void thread_or_ln_i_fu_247_p4();
    void thread_or_ln_mid1_i_fu_497_p4();
    void thread_or_ln_mid4_i_fu_369_p3();
    void thread_or_ln_mid_i_fu_285_p3();
    void thread_real_start();
    void thread_select_ln11_1_fu_439_p3();
    void thread_select_ln11_2_fu_515_p3();
    void thread_select_ln11_3_fu_549_p3();
    void thread_select_ln11_4_fu_586_p3();
    void thread_select_ln11_fu_427_p3();
    void thread_select_ln17_1_fu_507_p3();
    void thread_select_ln17_fu_485_p3();
    void thread_select_ln6_fu_343_p3();
    void thread_select_ln7_1_fu_614_p3();
    void thread_select_ln7_fu_293_p3();
    void thread_select_ln8_1_fu_377_p3();
    void thread_select_ln8_2_fu_459_p3();
    void thread_select_ln8_3_fu_600_p3();
    void thread_select_ln8_fu_357_p3();
    void thread_start_out();
    void thread_start_write();
    void thread_tmp_fu_225_p4();
    void thread_trunc_ln17_1_fu_243_p1();
    void thread_trunc_ln17_2_fu_281_p1();
    void thread_trunc_ln17_3_fu_365_p1();
    void thread_trunc_ln17_4_fu_435_p1();
    void thread_trunc_ln17_5_fu_493_p1();
    void thread_trunc_ln17_6_fu_539_p1();
    void thread_trunc_ln17_fu_239_p1();
    void thread_trunc_ln_i_fu_557_p3();
    void thread_xor_ln11_fu_447_p2();
    void thread_xor_ln7_fu_301_p2();
    void thread_xor_ln8_1_fu_533_p2();
    void thread_xor_ln8_fu_385_p2();
    void thread_zext_ln17_fu_523_p1();
    void thread_zext_ln321_3_fu_622_p1();
    void thread_zext_ln321_fu_565_p1();
    void thread_zext_ln6_fu_235_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif

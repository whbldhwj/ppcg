// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _C_drain_IO_L1_out_in_2_HH_
#define _C_drain_IO_L1_out_in_2_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct C_drain_IO_L1_out_in_2 : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<1> > local_C_0_V_address0;
    sc_out< sc_logic > local_C_0_V_ce0;
    sc_in< sc_lv<64> > local_C_0_V_q0;
    sc_in< sc_lv<64> > fifo_C_drain_in_V_V_dout;
    sc_in< sc_logic > fifo_C_drain_in_V_V_empty_n;
    sc_out< sc_logic > fifo_C_drain_in_V_V_read;
    sc_out< sc_lv<64> > fifo_C_drain_out_V_V_din;
    sc_in< sc_logic > fifo_C_drain_out_V_V_full_n;
    sc_out< sc_logic > fifo_C_drain_out_V_V_write;
    sc_in< sc_logic > en;


    // Module declarations
    C_drain_IO_L1_out_in_2(sc_module_name name);
    SC_HAS_PROCESS(C_drain_IO_L1_out_in_2);

    ~C_drain_IO_L1_out_in_2();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > fifo_C_drain_in_V_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln610_reg_230;
    sc_signal< sc_lv<1> > select_ln616_1_reg_239;
    sc_signal< sc_logic > fifo_C_drain_out_V_V_blk_n;
    sc_signal< sc_lv<3> > indvar_flatten_reg_110;
    sc_signal< sc_lv<2> > c4_0_reg_121;
    sc_signal< sc_lv<2> > c5_0_reg_132;
    sc_signal< sc_lv<1> > en_read_read_fu_78_p2;
    sc_signal< sc_lv<1> > icmp_ln610_fu_155_p2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_predicate_op31_read_state3;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<3> > add_ln610_fu_161_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<1> > select_ln616_1_fu_199_p3;
    sc_signal< sc_lv<2> > select_ln610_fu_207_p3;
    sc_signal< sc_lv<2> > c5_fu_220_p2;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_lv<64> > ap_phi_mux_tmp_V_phi_fu_146_p4;
    sc_signal< sc_lv<64> > ap_phi_reg_pp0_iter1_tmp_V_reg_143;
    sc_signal< sc_lv<64> > zext_ln617_fu_215_p1;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<1> > icmp_ln612_fu_173_p2;
    sc_signal< sc_lv<1> > icmp_ln616_fu_187_p2;
    sc_signal< sc_lv<1> > icmp_ln616_1_fu_193_p2;
    sc_signal< sc_lv<2> > c4_fu_167_p2;
    sc_signal< sc_lv<2> > select_ln616_fu_179_p3;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state4;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln610_fu_161_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_tmp_V_phi_fu_146_p4();
    void thread_ap_phi_reg_pp0_iter1_tmp_V_reg_143();
    void thread_ap_predicate_op31_read_state3();
    void thread_ap_ready();
    void thread_c4_fu_167_p2();
    void thread_c5_fu_220_p2();
    void thread_en_read_read_fu_78_p2();
    void thread_fifo_C_drain_in_V_V_blk_n();
    void thread_fifo_C_drain_in_V_V_read();
    void thread_fifo_C_drain_out_V_V_blk_n();
    void thread_fifo_C_drain_out_V_V_din();
    void thread_fifo_C_drain_out_V_V_write();
    void thread_icmp_ln610_fu_155_p2();
    void thread_icmp_ln612_fu_173_p2();
    void thread_icmp_ln616_1_fu_193_p2();
    void thread_icmp_ln616_fu_187_p2();
    void thread_local_C_0_V_address0();
    void thread_local_C_0_V_ce0();
    void thread_select_ln610_fu_207_p3();
    void thread_select_ln616_1_fu_199_p3();
    void thread_select_ln616_fu_179_p3();
    void thread_zext_ln617_fu_215_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif

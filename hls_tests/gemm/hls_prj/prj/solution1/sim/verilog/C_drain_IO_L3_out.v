// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module C_drain_IO_L3_out (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        m_axi_C_V_AWVALID,
        m_axi_C_V_AWREADY,
        m_axi_C_V_AWADDR,
        m_axi_C_V_AWID,
        m_axi_C_V_AWLEN,
        m_axi_C_V_AWSIZE,
        m_axi_C_V_AWBURST,
        m_axi_C_V_AWLOCK,
        m_axi_C_V_AWCACHE,
        m_axi_C_V_AWPROT,
        m_axi_C_V_AWQOS,
        m_axi_C_V_AWREGION,
        m_axi_C_V_AWUSER,
        m_axi_C_V_WVALID,
        m_axi_C_V_WREADY,
        m_axi_C_V_WDATA,
        m_axi_C_V_WSTRB,
        m_axi_C_V_WLAST,
        m_axi_C_V_WID,
        m_axi_C_V_WUSER,
        m_axi_C_V_ARVALID,
        m_axi_C_V_ARREADY,
        m_axi_C_V_ARADDR,
        m_axi_C_V_ARID,
        m_axi_C_V_ARLEN,
        m_axi_C_V_ARSIZE,
        m_axi_C_V_ARBURST,
        m_axi_C_V_ARLOCK,
        m_axi_C_V_ARCACHE,
        m_axi_C_V_ARPROT,
        m_axi_C_V_ARQOS,
        m_axi_C_V_ARREGION,
        m_axi_C_V_ARUSER,
        m_axi_C_V_RVALID,
        m_axi_C_V_RREADY,
        m_axi_C_V_RDATA,
        m_axi_C_V_RLAST,
        m_axi_C_V_RID,
        m_axi_C_V_RUSER,
        m_axi_C_V_RRESP,
        m_axi_C_V_BVALID,
        m_axi_C_V_BREADY,
        m_axi_C_V_BRESP,
        m_axi_C_V_BID,
        m_axi_C_V_BUSER,
        C_V_offset_dout,
        C_V_offset_empty_n,
        C_V_offset_read,
        fifo_C_drain_local_in_V_V_dout,
        fifo_C_drain_local_in_V_V_empty_n,
        fifo_C_drain_local_in_V_V_read
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state10 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   m_axi_C_V_AWVALID;
input   m_axi_C_V_AWREADY;
output  [31:0] m_axi_C_V_AWADDR;
output  [0:0] m_axi_C_V_AWID;
output  [31:0] m_axi_C_V_AWLEN;
output  [2:0] m_axi_C_V_AWSIZE;
output  [1:0] m_axi_C_V_AWBURST;
output  [1:0] m_axi_C_V_AWLOCK;
output  [3:0] m_axi_C_V_AWCACHE;
output  [2:0] m_axi_C_V_AWPROT;
output  [3:0] m_axi_C_V_AWQOS;
output  [3:0] m_axi_C_V_AWREGION;
output  [0:0] m_axi_C_V_AWUSER;
output   m_axi_C_V_WVALID;
input   m_axi_C_V_WREADY;
output  [63:0] m_axi_C_V_WDATA;
output  [7:0] m_axi_C_V_WSTRB;
output   m_axi_C_V_WLAST;
output  [0:0] m_axi_C_V_WID;
output  [0:0] m_axi_C_V_WUSER;
output   m_axi_C_V_ARVALID;
input   m_axi_C_V_ARREADY;
output  [31:0] m_axi_C_V_ARADDR;
output  [0:0] m_axi_C_V_ARID;
output  [31:0] m_axi_C_V_ARLEN;
output  [2:0] m_axi_C_V_ARSIZE;
output  [1:0] m_axi_C_V_ARBURST;
output  [1:0] m_axi_C_V_ARLOCK;
output  [3:0] m_axi_C_V_ARCACHE;
output  [2:0] m_axi_C_V_ARPROT;
output  [3:0] m_axi_C_V_ARQOS;
output  [3:0] m_axi_C_V_ARREGION;
output  [0:0] m_axi_C_V_ARUSER;
input   m_axi_C_V_RVALID;
output   m_axi_C_V_RREADY;
input  [63:0] m_axi_C_V_RDATA;
input   m_axi_C_V_RLAST;
input  [0:0] m_axi_C_V_RID;
input  [0:0] m_axi_C_V_RUSER;
input  [1:0] m_axi_C_V_RRESP;
input   m_axi_C_V_BVALID;
output   m_axi_C_V_BREADY;
input  [1:0] m_axi_C_V_BRESP;
input  [0:0] m_axi_C_V_BID;
input  [0:0] m_axi_C_V_BUSER;
input  [31:0] C_V_offset_dout;
input   C_V_offset_empty_n;
output   C_V_offset_read;
input  [63:0] fifo_C_drain_local_in_V_V_dout;
input   fifo_C_drain_local_in_V_V_empty_n;
output   fifo_C_drain_local_in_V_V_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_C_V_AWVALID;
reg m_axi_C_V_WVALID;
reg m_axi_C_V_BREADY;
reg C_V_offset_read;
reg fifo_C_drain_local_in_V_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    C_V_blk_n_AW;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln795_reg_715;
reg    C_V_blk_n_W;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln795_reg_715_pp0_iter1_reg;
reg    C_V_blk_n_B;
reg    ap_enable_reg_pp0_iter7;
reg   [0:0] icmp_ln795_reg_715_pp0_iter6_reg;
reg    C_V_offset_blk_n;
reg    fifo_C_drain_local_in_V_V_blk_n;
reg   [5:0] indvar_flatten85_i_reg_146;
reg   [1:0] c0_0_i_reg_157;
reg   [5:0] indvar_flatten47_i_reg_168;
reg   [1:0] c1_0_i_reg_179;
reg   [4:0] indvar_flatten17_i_reg_190;
reg   [1:0] c3_0_i_reg_201;
reg   [3:0] indvar_flatten_i_reg_212;
reg   [1:0] c4_0_i_reg_223;
reg   [1:0] c5_0_i_reg_234;
wire   [29:0] zext_ln795_fu_255_p1;
reg   [29:0] zext_ln795_reg_710;
reg    ap_block_state1;
wire   [0:0] icmp_ln795_fu_277_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state3_io;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state4_io;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
reg    ap_block_state9_pp0_stage0_iter7;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln795_reg_715_pp0_iter2_reg;
reg   [0:0] icmp_ln795_reg_715_pp0_iter3_reg;
reg   [0:0] icmp_ln795_reg_715_pp0_iter4_reg;
reg   [0:0] icmp_ln795_reg_715_pp0_iter5_reg;
wire   [5:0] add_ln795_fu_283_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [1:0] select_ln795_fu_381_p3;
reg   [1:0] select_ln795_reg_724;
wire   [1:0] select_ln796_2_fu_465_p3;
reg   [1:0] select_ln796_2_reg_729;
wire   [1:0] select_ln799_3_fu_535_p3;
wire   [1:0] select_ln801_fu_591_p3;
wire   [29:0] add_ln321_fu_647_p2;
reg   [29:0] add_ln321_reg_744;
wire   [1:0] c5_fu_652_p2;
wire   [3:0] select_ln801_1_fu_664_p3;
wire   [4:0] select_ln799_4_fu_678_p3;
wire   [5:0] select_ln796_3_fu_692_p3;
reg   [63:0] tmp_V_reg_769;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg   [1:0] ap_phi_mux_c0_0_i_phi_fu_161_p4;
reg   [1:0] ap_phi_mux_c1_0_i_phi_fu_183_p4;
wire   [63:0] zext_ln321_1_fu_700_p1;
reg    ap_block_pp0_stage0_01001;
wire   [28:0] tmp_fu_245_p4;
wire   [0:0] trunc_ln808_1_fu_263_p1;
wire   [0:0] trunc_ln808_fu_259_p1;
wire   [0:0] icmp_ln796_fu_295_p2;
wire   [0:0] trunc_ln808_2_fu_315_p1;
wire   [0:0] xor_ln796_fu_309_p2;
wire   [1:0] add_ln795_1_fu_289_p2;
wire   [0:0] trunc_ln808_3_fu_325_p1;
wire   [2:0] or_ln808_1_mid_i_fu_329_p3;
wire   [2:0] or_ln808_1_i_fu_267_p4;
wire   [0:0] icmp_ln803_fu_345_p2;
wire   [0:0] icmp_ln801_fu_357_p2;
wire   [0:0] icmp_ln799_fu_369_p2;
wire   [1:0] select_ln796_fu_301_p3;
wire   [0:0] and_ln796_3_fu_375_p2;
wire   [0:0] or_ln799_fu_395_p2;
wire   [1:0] add_ln796_fu_389_p2;
wire   [0:0] trunc_ln808_4_fu_409_p1;
wire   [0:0] and_ln796_fu_319_p2;
wire   [0:0] trunc_ln808_5_fu_421_p1;
wire   [2:0] or_ln808_1_mid3_i_fu_425_p3;
wire   [2:0] select_ln796_1_fu_337_p3;
wire   [0:0] xor_ln799_fu_441_p2;
wire   [0:0] and_ln796_1_fu_351_p2;
wire   [0:0] or_ln799_1_fu_447_p2;
wire   [0:0] and_ln796_2_fu_363_p2;
wire   [1:0] select_ln799_fu_401_p3;
wire   [0:0] and_ln799_1_fu_459_p2;
wire   [0:0] or_ln808_fu_479_p2;
wire   [0:0] or_ln808_1_fu_485_p2;
wire   [1:0] add_ln799_fu_473_p2;
wire   [0:0] trunc_ln808_7_fu_503_p1;
wire   [0:0] select_ln799_1_fu_413_p3;
wire   [2:0] select_ln799_2_fu_433_p3;
wire   [0:0] and_ln799_fu_453_p2;
wire   [0:0] xor_ln808_fu_523_p2;
wire   [1:0] select_ln808_fu_491_p3;
wire   [0:0] and_ln808_fu_529_p2;
wire   [0:0] or_ln808_2_fu_549_p2;
wire   [0:0] or_ln808_3_fu_555_p2;
wire   [1:0] add_ln801_fu_543_p2;
wire   [0:0] trunc_ln808_8_fu_569_p1;
wire   [2:0] or_ln808_1_mid1_i_fu_573_p4;
wire   [2:0] select_ln808_2_fu_515_p3;
wire   [1:0] select_ln808_3_fu_561_p3;
wire   [2:0] zext_ln808_fu_599_p1;
wire   [2:0] select_ln808_4_fu_583_p3;
wire   [0:0] trunc_ln808_9_fu_615_p1;
wire   [0:0] xor_ln799_1_fu_609_p2;
wire   [0:0] trunc_ln808_6_fu_499_p1;
wire   [0:0] and_ln799_2_fu_619_p2;
wire   [2:0] add_ln808_fu_603_p2;
wire   [0:0] select_ln808_1_fu_507_p3;
wire   [0:0] select_ln808_5_fu_625_p3;
wire   [4:0] trunc_ln_i_fu_633_p4;
wire   [29:0] zext_ln321_fu_643_p1;
wire   [3:0] add_ln801_1_fu_658_p2;
wire   [4:0] add_ln799_1_fu_672_p2;
wire   [5:0] add_ln796_1_fu_686_p2;
wire    ap_CS_fsm_state10;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((1'b0 == C_V_offset_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end else if ((~((1'b0 == C_V_offset_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln795_reg_715 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        c0_0_i_reg_157 <= select_ln795_reg_724;
    end else if ((~((1'b0 == C_V_offset_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        c0_0_i_reg_157 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln795_reg_715 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        c1_0_i_reg_179 <= select_ln796_2_reg_729;
    end else if ((~((1'b0 == C_V_offset_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        c1_0_i_reg_179 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln795_fu_277_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        c3_0_i_reg_201 <= select_ln799_3_fu_535_p3;
    end else if ((~((1'b0 == C_V_offset_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        c3_0_i_reg_201 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln795_fu_277_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        c4_0_i_reg_223 <= select_ln801_fu_591_p3;
    end else if ((~((1'b0 == C_V_offset_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        c4_0_i_reg_223 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln795_fu_277_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        c5_0_i_reg_234 <= c5_fu_652_p2;
    end else if ((~((1'b0 == C_V_offset_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        c5_0_i_reg_234 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln795_fu_277_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten17_i_reg_190 <= select_ln799_4_fu_678_p3;
    end else if ((~((1'b0 == C_V_offset_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten17_i_reg_190 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln795_fu_277_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten47_i_reg_168 <= select_ln796_3_fu_692_p3;
    end else if ((~((1'b0 == C_V_offset_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten47_i_reg_168 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln795_fu_277_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten85_i_reg_146 <= add_ln795_fu_283_p2;
    end else if ((~((1'b0 == C_V_offset_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten85_i_reg_146 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln795_fu_277_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_i_reg_212 <= select_ln801_1_fu_664_p3;
    end else if ((~((1'b0 == C_V_offset_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_i_reg_212 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln795_fu_277_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln321_reg_744 <= add_ln321_fu_647_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln795_reg_715 <= icmp_ln795_fu_277_p2;
        icmp_ln795_reg_715_pp0_iter1_reg <= icmp_ln795_reg_715;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln795_reg_715_pp0_iter2_reg <= icmp_ln795_reg_715_pp0_iter1_reg;
        icmp_ln795_reg_715_pp0_iter3_reg <= icmp_ln795_reg_715_pp0_iter2_reg;
        icmp_ln795_reg_715_pp0_iter4_reg <= icmp_ln795_reg_715_pp0_iter3_reg;
        icmp_ln795_reg_715_pp0_iter5_reg <= icmp_ln795_reg_715_pp0_iter4_reg;
        icmp_ln795_reg_715_pp0_iter6_reg <= icmp_ln795_reg_715_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln795_fu_277_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln795_reg_724 <= select_ln795_fu_381_p3;
        select_ln796_2_reg_729 <= select_ln796_2_fu_465_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln795_reg_715 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_V_reg_769 <= fifo_C_drain_local_in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == C_V_offset_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        zext_ln795_reg_710[28 : 0] <= zext_ln795_fu_255_p1[28 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln795_reg_715 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        C_V_blk_n_AW = m_axi_C_V_AWREADY;
    end else begin
        C_V_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln795_reg_715_pp0_iter6_reg == 1'd0) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        C_V_blk_n_B = m_axi_C_V_BVALID;
    end else begin
        C_V_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln795_reg_715_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        C_V_blk_n_W = m_axi_C_V_WREADY;
    end else begin
        C_V_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        C_V_offset_blk_n = C_V_offset_empty_n;
    end else begin
        C_V_offset_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == C_V_offset_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        C_V_offset_read = 1'b1;
    end else begin
        C_V_offset_read = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln795_fu_277_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln795_reg_715 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_c0_0_i_phi_fu_161_p4 = select_ln795_reg_724;
    end else begin
        ap_phi_mux_c0_0_i_phi_fu_161_p4 = c0_0_i_reg_157;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln795_reg_715 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_c1_0_i_phi_fu_183_p4 = select_ln796_2_reg_729;
    end else begin
        ap_phi_mux_c1_0_i_phi_fu_183_p4 = c1_0_i_reg_179;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln795_reg_715 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fifo_C_drain_local_in_V_V_blk_n = fifo_C_drain_local_in_V_V_empty_n;
    end else begin
        fifo_C_drain_local_in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln795_reg_715 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        fifo_C_drain_local_in_V_V_read = 1'b1;
    end else begin
        fifo_C_drain_local_in_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln795_reg_715 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_C_V_AWVALID = 1'b1;
    end else begin
        m_axi_C_V_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln795_reg_715_pp0_iter6_reg == 1'd0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_C_V_BREADY = 1'b1;
    end else begin
        m_axi_C_V_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln795_reg_715_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_C_V_WVALID = 1'b1;
    end else begin
        m_axi_C_V_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b0 == C_V_offset_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln795_fu_277_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter6 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter7 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln795_fu_277_p2 == 1'd1)) | ((ap_enable_reg_pp0_iter6 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter7 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln321_fu_647_p2 = (zext_ln321_fu_643_p1 + zext_ln795_reg_710);

assign add_ln795_1_fu_289_p2 = (2'd1 + ap_phi_mux_c0_0_i_phi_fu_161_p4);

assign add_ln795_fu_283_p2 = (6'd1 + indvar_flatten85_i_reg_146);

assign add_ln796_1_fu_686_p2 = (6'd1 + indvar_flatten47_i_reg_168);

assign add_ln796_fu_389_p2 = (2'd1 + select_ln796_fu_301_p3);

assign add_ln799_1_fu_672_p2 = (5'd1 + indvar_flatten17_i_reg_190);

assign add_ln799_fu_473_p2 = (2'd1 + select_ln799_fu_401_p3);

assign add_ln801_1_fu_658_p2 = (4'd1 + indvar_flatten_i_reg_212);

assign add_ln801_fu_543_p2 = (2'd1 + select_ln808_fu_491_p3);

assign add_ln808_fu_603_p2 = (zext_ln808_fu_599_p1 + select_ln808_4_fu_583_p3);

assign and_ln796_1_fu_351_p2 = (xor_ln796_fu_309_p2 & icmp_ln803_fu_345_p2);

assign and_ln796_2_fu_363_p2 = (xor_ln796_fu_309_p2 & icmp_ln801_fu_357_p2);

assign and_ln796_3_fu_375_p2 = (xor_ln796_fu_309_p2 & icmp_ln799_fu_369_p2);

assign and_ln796_fu_319_p2 = (xor_ln796_fu_309_p2 & trunc_ln808_2_fu_315_p1);

assign and_ln799_1_fu_459_p2 = (or_ln799_1_fu_447_p2 & and_ln796_2_fu_363_p2);

assign and_ln799_2_fu_619_p2 = (xor_ln799_1_fu_609_p2 & trunc_ln808_9_fu_615_p1);

assign and_ln799_fu_453_p2 = (or_ln799_1_fu_447_p2 & and_ln796_1_fu_351_p2);

assign and_ln808_fu_529_p2 = (xor_ln808_fu_523_p2 & and_ln799_fu_453_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln795_reg_715 == 1'd0) & (fifo_C_drain_local_in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((icmp_ln795_reg_715_pp0_iter6_reg == 1'd0) & (m_axi_C_V_BVALID == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((icmp_ln795_reg_715 == 1'd0) & (fifo_C_drain_local_in_V_V_empty_n == 1'b0)))) | ((icmp_ln795_reg_715_pp0_iter6_reg == 1'd0) & (m_axi_C_V_BVALID == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((icmp_ln795_reg_715 == 1'd0) & (fifo_C_drain_local_in_V_V_empty_n == 1'b0)))) | ((icmp_ln795_reg_715_pp0_iter6_reg == 1'd0) & (m_axi_C_V_BVALID == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == C_V_offset_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((icmp_ln795_reg_715 == 1'd0) & (m_axi_C_V_AWREADY == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln795_reg_715 == 1'd0) & (fifo_C_drain_local_in_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_io = ((icmp_ln795_reg_715_pp0_iter1_reg == 1'd0) & (m_axi_C_V_WREADY == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_pp0_stage0_iter7 = ((icmp_ln795_reg_715_pp0_iter6_reg == 1'd0) & (m_axi_C_V_BVALID == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign c5_fu_652_p2 = (2'd1 + select_ln808_3_fu_561_p3);

assign icmp_ln795_fu_277_p2 = ((indvar_flatten85_i_reg_146 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln796_fu_295_p2 = ((indvar_flatten47_i_reg_168 == 6'd16) ? 1'b1 : 1'b0);

assign icmp_ln799_fu_369_p2 = ((indvar_flatten17_i_reg_190 == 5'd8) ? 1'b1 : 1'b0);

assign icmp_ln801_fu_357_p2 = ((indvar_flatten_i_reg_212 == 4'd4) ? 1'b1 : 1'b0);

assign icmp_ln803_fu_345_p2 = ((c5_0_i_reg_234 == 2'd2) ? 1'b1 : 1'b0);

assign m_axi_C_V_ARADDR = 32'd0;

assign m_axi_C_V_ARBURST = 2'd0;

assign m_axi_C_V_ARCACHE = 4'd0;

assign m_axi_C_V_ARID = 1'd0;

assign m_axi_C_V_ARLEN = 32'd0;

assign m_axi_C_V_ARLOCK = 2'd0;

assign m_axi_C_V_ARPROT = 3'd0;

assign m_axi_C_V_ARQOS = 4'd0;

assign m_axi_C_V_ARREGION = 4'd0;

assign m_axi_C_V_ARSIZE = 3'd0;

assign m_axi_C_V_ARUSER = 1'd0;

assign m_axi_C_V_ARVALID = 1'b0;

assign m_axi_C_V_AWADDR = zext_ln321_1_fu_700_p1;

assign m_axi_C_V_AWBURST = 2'd0;

assign m_axi_C_V_AWCACHE = 4'd0;

assign m_axi_C_V_AWID = 1'd0;

assign m_axi_C_V_AWLEN = 32'd1;

assign m_axi_C_V_AWLOCK = 2'd0;

assign m_axi_C_V_AWPROT = 3'd0;

assign m_axi_C_V_AWQOS = 4'd0;

assign m_axi_C_V_AWREGION = 4'd0;

assign m_axi_C_V_AWSIZE = 3'd0;

assign m_axi_C_V_AWUSER = 1'd0;

assign m_axi_C_V_RREADY = 1'b0;

assign m_axi_C_V_WDATA = tmp_V_reg_769;

assign m_axi_C_V_WID = 1'd0;

assign m_axi_C_V_WLAST = 1'b0;

assign m_axi_C_V_WSTRB = 8'd255;

assign m_axi_C_V_WUSER = 1'd0;

assign or_ln799_1_fu_447_p2 = (xor_ln799_fu_441_p2 | icmp_ln796_fu_295_p2);

assign or_ln799_fu_395_p2 = (icmp_ln796_fu_295_p2 | and_ln796_3_fu_375_p2);

assign or_ln808_1_fu_485_p2 = (or_ln808_fu_479_p2 | icmp_ln796_fu_295_p2);

assign or_ln808_1_i_fu_267_p4 = {{{trunc_ln808_1_fu_263_p1}, {trunc_ln808_fu_259_p1}}, {1'd0}};

assign or_ln808_1_mid1_i_fu_573_p4 = {{{trunc_ln808_5_fu_421_p1}, {trunc_ln808_8_fu_569_p1}}, {1'd0}};

assign or_ln808_1_mid3_i_fu_425_p3 = {{trunc_ln808_5_fu_421_p1}, {2'd0}};

assign or_ln808_1_mid_i_fu_329_p3 = {{trunc_ln808_3_fu_325_p1}, {2'd0}};

assign or_ln808_2_fu_549_p2 = (and_ln808_fu_529_p2 | and_ln799_1_fu_459_p2);

assign or_ln808_3_fu_555_p2 = (or_ln808_2_fu_549_p2 | or_ln799_fu_395_p2);

assign or_ln808_fu_479_p2 = (and_ln799_1_fu_459_p2 | and_ln796_3_fu_375_p2);

assign select_ln795_fu_381_p3 = ((icmp_ln796_fu_295_p2[0:0] === 1'b1) ? add_ln795_1_fu_289_p2 : ap_phi_mux_c0_0_i_phi_fu_161_p4);

assign select_ln796_1_fu_337_p3 = ((icmp_ln796_fu_295_p2[0:0] === 1'b1) ? or_ln808_1_mid_i_fu_329_p3 : or_ln808_1_i_fu_267_p4);

assign select_ln796_2_fu_465_p3 = ((and_ln796_3_fu_375_p2[0:0] === 1'b1) ? add_ln796_fu_389_p2 : select_ln796_fu_301_p3);

assign select_ln796_3_fu_692_p3 = ((icmp_ln796_fu_295_p2[0:0] === 1'b1) ? 6'd1 : add_ln796_1_fu_686_p2);

assign select_ln796_fu_301_p3 = ((icmp_ln796_fu_295_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_c1_0_i_phi_fu_183_p4);

assign select_ln799_1_fu_413_p3 = ((and_ln796_3_fu_375_p2[0:0] === 1'b1) ? trunc_ln808_4_fu_409_p1 : and_ln796_fu_319_p2);

assign select_ln799_2_fu_433_p3 = ((and_ln796_3_fu_375_p2[0:0] === 1'b1) ? or_ln808_1_mid3_i_fu_425_p3 : select_ln796_1_fu_337_p3);

assign select_ln799_3_fu_535_p3 = ((and_ln799_1_fu_459_p2[0:0] === 1'b1) ? add_ln799_fu_473_p2 : select_ln799_fu_401_p3);

assign select_ln799_4_fu_678_p3 = ((or_ln799_fu_395_p2[0:0] === 1'b1) ? 5'd1 : add_ln799_1_fu_672_p2);

assign select_ln799_fu_401_p3 = ((or_ln799_fu_395_p2[0:0] === 1'b1) ? 2'd0 : c3_0_i_reg_201);

assign select_ln801_1_fu_664_p3 = ((or_ln808_1_fu_485_p2[0:0] === 1'b1) ? 4'd1 : add_ln801_1_fu_658_p2);

assign select_ln801_fu_591_p3 = ((and_ln808_fu_529_p2[0:0] === 1'b1) ? add_ln801_fu_543_p2 : select_ln808_fu_491_p3);

assign select_ln808_1_fu_507_p3 = ((and_ln799_1_fu_459_p2[0:0] === 1'b1) ? trunc_ln808_7_fu_503_p1 : select_ln799_1_fu_413_p3);

assign select_ln808_2_fu_515_p3 = ((and_ln799_1_fu_459_p2[0:0] === 1'b1) ? or_ln808_1_mid3_i_fu_425_p3 : select_ln799_2_fu_433_p3);

assign select_ln808_3_fu_561_p3 = ((or_ln808_3_fu_555_p2[0:0] === 1'b1) ? 2'd0 : c5_0_i_reg_234);

assign select_ln808_4_fu_583_p3 = ((and_ln808_fu_529_p2[0:0] === 1'b1) ? or_ln808_1_mid1_i_fu_573_p4 : select_ln808_2_fu_515_p3);

assign select_ln808_5_fu_625_p3 = ((and_ln799_1_fu_459_p2[0:0] === 1'b1) ? trunc_ln808_6_fu_499_p1 : and_ln799_2_fu_619_p2);

assign select_ln808_fu_491_p3 = ((or_ln808_1_fu_485_p2[0:0] === 1'b1) ? 2'd0 : c4_0_i_reg_223);

assign tmp_fu_245_p4 = {{C_V_offset_dout[31:3]}};

assign trunc_ln808_1_fu_263_p1 = ap_phi_mux_c0_0_i_phi_fu_161_p4[0:0];

assign trunc_ln808_2_fu_315_p1 = ap_phi_mux_c1_0_i_phi_fu_183_p4[0:0];

assign trunc_ln808_3_fu_325_p1 = add_ln795_1_fu_289_p2[0:0];

assign trunc_ln808_4_fu_409_p1 = add_ln796_fu_389_p2[0:0];

assign trunc_ln808_5_fu_421_p1 = select_ln795_fu_381_p3[0:0];

assign trunc_ln808_6_fu_499_p1 = add_ln799_fu_473_p2[0:0];

assign trunc_ln808_7_fu_503_p1 = select_ln796_2_fu_465_p3[0:0];

assign trunc_ln808_8_fu_569_p1 = add_ln801_fu_543_p2[0:0];

assign trunc_ln808_9_fu_615_p1 = c3_0_i_reg_201[0:0];

assign trunc_ln808_fu_259_p1 = c4_0_i_reg_223[0:0];

assign trunc_ln_i_fu_633_p4 = {{{add_ln808_fu_603_p2}, {select_ln808_1_fu_507_p3}}, {select_ln808_5_fu_625_p3}};

assign xor_ln796_fu_309_p2 = (icmp_ln796_fu_295_p2 ^ 1'd1);

assign xor_ln799_1_fu_609_p2 = (or_ln799_fu_395_p2 ^ 1'd1);

assign xor_ln799_fu_441_p2 = (icmp_ln799_fu_369_p2 ^ 1'd1);

assign xor_ln808_fu_523_p2 = (1'd1 ^ and_ln799_1_fu_459_p2);

assign zext_ln321_1_fu_700_p1 = add_ln321_reg_744;

assign zext_ln321_fu_643_p1 = trunc_ln_i_fu_633_p4;

assign zext_ln795_fu_255_p1 = tmp_fu_245_p4;

assign zext_ln808_fu_599_p1 = select_ln808_3_fu_561_p3;

always @ (posedge ap_clk) begin
    zext_ln795_reg_710[29] <= 1'b0;
end

endmodule //C_drain_IO_L3_out
